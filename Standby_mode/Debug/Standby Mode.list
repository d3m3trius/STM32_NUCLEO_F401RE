
Standby Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003504  08003504  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800350c  0800350c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08003584  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003584  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a292  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c54  00000000  00000000  0002a332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159f9  00000000  00000000  0002d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7c8  00000000  00000000  00042b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b08  00000000  00000000  0004d311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5e19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028bc  00000000  00000000  000d5e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003444 	.word	0x08003444

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003444 	.word	0x08003444

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09c      	sub	sp, #112	; 0x70
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fb59 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f89d 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f9ad 	bl	80008f4 <MX_GPIO_Init>
  MX_RTC_Init();
 800059a:	f000 f91d 	bl	80007d8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f97f 	bl	80008a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffertx[100];

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80005a2:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <main+0x12c>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d12d      	bne.n	800060a <main+0x82>
    {
  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80005ae:	4b41      	ldr	r3, [pc, #260]	; (80006b4 <main+0x12c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a40      	ldr	r2, [pc, #256]	; (80006b4 <main+0x12c>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6013      	str	r3, [r2, #0]

  	  /** display  the string **/
  	  sprintf(buffertx, "Wakeup from the STANDBY MODE\n\n");
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	493e      	ldr	r1, [pc, #248]	; (80006b8 <main+0x130>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fb12 	bl	8002be8 <siprintf>
  	  HAL_UART_Transmit(&huart2, buffertx, strlen (buffertx), 1000);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe0a 	bl	80001e0 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	4839      	ldr	r0, [pc, #228]	; (80006bc <main+0x134>)
 80005d8:	f002 f82f 	bl	800263a <HAL_UART_Transmit>

  	  /** Blink the LED **/
  	  for (int i=0; i<20; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005e0:	e009      	b.n	80005f6 <main+0x6e>
  	  {
  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005e2:	2120      	movs	r1, #32
 80005e4:	4836      	ldr	r0, [pc, #216]	; (80006c0 <main+0x138>)
 80005e6:	f000 fe72 	bl	80012ce <HAL_GPIO_TogglePin>
  		  HAL_Delay(200);
 80005ea:	20c8      	movs	r0, #200	; 0xc8
 80005ec:	f000 fb9c 	bl	8000d28 <HAL_Delay>
  	  for (int i=0; i<20; i++)
 80005f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005f2:	3301      	adds	r3, #1
 80005f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005f8:	2b13      	cmp	r3, #19
 80005fa:	ddf2      	ble.n	80005e2 <main+0x5a>
  	  }

  	  /** Disable the WWAKEUP PIN **/
  	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80005fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000600:	f000 fe92 	bl	8001328 <HAL_PWR_DisableWakeUpPin>

  	  /** Deactivate the RTC wakeup  **/
  	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000604:	482f      	ldr	r0, [pc, #188]	; (80006c4 <main+0x13c>)
 8000606:	f001 ff45 	bl	8002494 <HAL_RTCEx_DeactivateWakeUpTimer>
    }


    /** Now enter the standby mode **/
     /* Clear the WU FLAG */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <main+0x12c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <main+0x12c>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6013      	str	r3, [r2, #0]

     /* clear the RTC Wake UP (WU) flag */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <main+0x13c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <main+0x13c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000626:	60da      	str	r2, [r3, #12]

     /* Display the string */
    sprintf(buffertx,"About to enter the STANDBY MODE\n\n");
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4927      	ldr	r1, [pc, #156]	; (80006c8 <main+0x140>)
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fadb 	bl	8002be8 <siprintf>
    HAL_UART_Transmit(&huart2, buffertx, strlen (buffertx), 1000);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fdd3 	bl	80001e0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	1d39      	adds	r1, r7, #4
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	481d      	ldr	r0, [pc, #116]	; (80006bc <main+0x134>)
 8000646:	f001 fff8 	bl	800263a <HAL_UART_Transmit>

     /* Blink the LED */
    for (int i=0; i<5; i++)
 800064a:	2300      	movs	r3, #0
 800064c:	66bb      	str	r3, [r7, #104]	; 0x68
 800064e:	e00a      	b.n	8000666 <main+0xde>
    {
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000650:	2120      	movs	r1, #32
 8000652:	481b      	ldr	r0, [pc, #108]	; (80006c0 <main+0x138>)
 8000654:	f000 fe3b 	bl	80012ce <HAL_GPIO_TogglePin>
  	  HAL_Delay(750);
 8000658:	f240 20ee 	movw	r0, #750	; 0x2ee
 800065c:	f000 fb64 	bl	8000d28 <HAL_Delay>
    for (int i=0; i<5; i++)
 8000660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000662:	3301      	adds	r3, #1
 8000664:	66bb      	str	r3, [r7, #104]	; 0x68
 8000666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000668:	2b04      	cmp	r3, #4
 800066a:	ddf1      	ble.n	8000650 <main+0xc8>
    }

     /* Enable the WAKEUP PIN */
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800066c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000670:	f000 fe48 	bl	8001304 <HAL_PWR_EnableWakeUpPin>
        Exaple: To configure the wake up timer to 5s the WakeUpCounter is set to 0x2710:
        RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
        Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
        ==> WakeUpCounter = ~10s/0.0005s = 40000 = 0x4E20
      */
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0X4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000674:	2200      	movs	r2, #0
 8000676:	f644 6120 	movw	r1, #20000	; 0x4e20
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <main+0x13c>)
 800067c:	f001 fe4a 	bl	8002314 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <main+0x102>
    {
      Error_Handler();
 8000686:	f000 f9a5 	bl	80009d4 <Error_Handler>
    }

     /* one last string to be sure */

    sprintf(buffertx,"STANDBY MODE is ON\n\n");
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	490f      	ldr	r1, [pc, #60]	; (80006cc <main+0x144>)
 800068e:	4618      	mov	r0, r3
 8000690:	f002 faaa 	bl	8002be8 <siprintf>
    HAL_UART_Transmit(&huart2, buffertx, strlen (buffertx), 1000);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fda2 	bl	80001e0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <main+0x134>)
 80006a8:	f001 ffc7 	bl	800263a <HAL_UART_Transmit>

     /* Finally enter the standby mode */
    HAL_PWR_EnterSTANDBYMode();
 80006ac:	f000 fe50 	bl	8001350 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x128>
 80006b2:	bf00      	nop
 80006b4:	40007000 	.word	0x40007000
 80006b8:	0800345c 	.word	0x0800345c
 80006bc:	200000b8 	.word	0x200000b8
 80006c0:	40020000 	.word	0x40020000
 80006c4:	20000098 	.word	0x20000098
 80006c8:	0800347c 	.word	0x0800347c
 80006cc:	080034a0 	.word	0x080034a0

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b098      	sub	sp, #96	; 0x60
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fa7a 	bl	8002bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <SystemClock_Config+0x100>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <SystemClock_Config+0x100>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <SystemClock_Config+0x100>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0x104>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800072c:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <SystemClock_Config+0x104>)
 800072e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000740:	230a      	movs	r3, #10
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000760:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000766:	2307      	movs	r3, #7
 8000768:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fe06 	bl	8001380 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800077a:	f000 f92b 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f868 	bl	8001870 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007a6:	f000 f915 	bl	80009d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fa55 	bl	8001c68 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80007c4:	f000 f906 	bl	80009d4 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3760      	adds	r7, #96	; 0x60
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_RTC_Init+0xc0>)
 80007f2:	4a2a      	ldr	r2, [pc, #168]	; (800089c <MX_RTC_Init+0xc4>)
 80007f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <MX_RTC_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_RTC_Init+0xc0>)
 80007fe:	227f      	movs	r2, #127	; 0x7f
 8000800:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_RTC_Init+0xc0>)
 8000804:	22ff      	movs	r2, #255	; 0xff
 8000806:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_RTC_Init+0xc0>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_RTC_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_RTC_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800081a:	481f      	ldr	r0, [pc, #124]	; (8000898 <MX_RTC_Init+0xc0>)
 800081c:	f001 fb12 	bl	8001e44 <HAL_RTC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f8d5 	bl	80009d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800082a:	2300      	movs	r3, #0
 800082c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800082e:	2300      	movs	r3, #0
 8000830:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000832:	2300      	movs	r3, #0
 8000834:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_RTC_Init+0xc0>)
 8000846:	f001 fb8e 	bl	8001f66 <HAL_RTC_SetTime>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f8c0 	bl	80009d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000854:	2301      	movs	r3, #1
 8000856:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000858:	2301      	movs	r3, #1
 800085a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800085c:	2301      	movs	r3, #1
 800085e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000860:	2300      	movs	r3, #0
 8000862:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_RTC_Init+0xc0>)
 800086c:	f001 fc38 	bl	80020e0 <HAL_RTC_SetDate>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000876:	f000 f8ad 	bl	80009d4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_RTC_Init+0xc0>)
 8000880:	f001 fd48 	bl	8002314 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800088a:	f000 f8a3 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000098 	.word	0x20000098
 800089c:	40002800 	.word	0x40002800

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_USART2_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d8:	f001 fe62 	bl	80025a0 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 f877 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000b8 	.word	0x200000b8
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <MX_GPIO_Init+0xd0>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2120      	movs	r1, #32
 800097e:	4812      	ldr	r0, [pc, #72]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000980:	f000 fc8c 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_GPIO_Init+0xd8>)
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_GPIO_Init+0xdc>)
 800099a:	f000 fafb 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0xd4>)
 80009b6:	f000 faed 	bl	8000f94 <HAL_GPIO_Init>

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	10210000 	.word	0x10210000
 80009d0:	40020800 	.word	0x40020800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1e:	2007      	movs	r0, #7
 8000a20:	f000 fa76 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_RTC_MspInit+0x30>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10a      	bne.n	8000a58 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_RTC_MspInit+0x34>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 fa6a 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000a52:	2003      	movs	r0, #3
 8000a54:	f000 fa83 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40002800 	.word	0x40002800
 8000a64:	42470e3c 	.word	0x42470e3c

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_UART_MspInit+0x8c>)
 8000ade:	f000 fa59 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f8d0 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <RTC_WKUP_IRQHandler+0x10>)
 8000b52:	f001 fcf7 	bl	8002544 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000098 	.word	0x20000098

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f001 fff8 	bl	8002b84 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20018000 	.word	0x20018000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	20000110 	.word	0x20000110

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f001 ffb7 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fcb1 	bl	8000588 <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c34:	08003514 	.word	0x08003514
  ldr r2, =_sbss
 8000c38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c3c:	20000110 	.word	0x20000110

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f94f 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff feb2 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f967 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc4:	f000 f92f 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200000fc 	.word	0x200000fc

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000fc 	.word	0x200000fc

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e159      	b.n	8001264 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8148 	bne.w	800125e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b03      	cmp	r3, #3
 8001052:	d017      	beq.n	8001084 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d123      	bne.n	80010d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	69b9      	ldr	r1, [r7, #24]
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a2 	beq.w	800125e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b57      	ldr	r3, [pc, #348]	; (800127c <HAL_GPIO_Init+0x2e8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a56      	ldr	r2, [pc, #344]	; (800127c <HAL_GPIO_Init+0x2e8>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <HAL_GPIO_Init+0x2e8>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001136:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_GPIO_Init+0x2ec>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a49      	ldr	r2, [pc, #292]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d019      	beq.n	8001196 <HAL_GPIO_Init+0x202>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a48      	ldr	r2, [pc, #288]	; (8001288 <HAL_GPIO_Init+0x2f4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0x1fe>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a47      	ldr	r2, [pc, #284]	; (800128c <HAL_GPIO_Init+0x2f8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00d      	beq.n	800118e <HAL_GPIO_Init+0x1fa>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a46      	ldr	r2, [pc, #280]	; (8001290 <HAL_GPIO_Init+0x2fc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d007      	beq.n	800118a <HAL_GPIO_Init+0x1f6>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a45      	ldr	r2, [pc, #276]	; (8001294 <HAL_GPIO_Init+0x300>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_GPIO_Init+0x1f2>
 8001182:	2304      	movs	r3, #4
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x204>
 8001186:	2307      	movs	r3, #7
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x204>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x204>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x204>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x204>
 8001196:	2300      	movs	r3, #0
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x2ec>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_GPIO_Init+0x304>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011da:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <HAL_GPIO_Init+0x304>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_GPIO_Init+0x304>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001204:	4a24      	ldr	r2, [pc, #144]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_GPIO_Init+0x304>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122e:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_GPIO_Init+0x304>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	f67f aea2 	bls.w	8000fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	041a      	lsls	r2, r3, #16
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	400b      	ands	r3, r1
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_PWR_EnableWakeUpPin+0x20>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4904      	ldr	r1, [pc, #16]	; (8001324 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40007000 	.word	0x40007000

08001328 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_PWR_DisableWakeUpPin+0x24>)
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	43db      	mvns	r3, r3
 8001338:	4904      	ldr	r1, [pc, #16]	; (800134c <HAL_PWR_DisableWakeUpPin+0x24>)
 800133a:	4013      	ands	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40007000 	.word	0x40007000

08001350 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800136c:	bf30      	wfi
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40007000 	.word	0x40007000
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e264      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	4ba3      	ldr	r3, [pc, #652]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d00c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4ba0      	ldr	r3, [pc, #640]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b9d      	ldr	r3, [pc, #628]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b99      	ldr	r3, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e23f      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a90      	ldr	r2, [pc, #576]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b8b      	ldr	r3, [pc, #556]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a8a      	ldr	r2, [pc, #552]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a87      	ldr	r2, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b84      	ldr	r3, [pc, #528]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a83      	ldr	r2, [pc, #524]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a80      	ldr	r2, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc6a 	bl	8000d10 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc66 	bl	8000d10 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e204      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc56 	bl	8000d10 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc52 	bl	8000d10 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1f0      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1c4      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4952      	ldr	r1, [pc, #328]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_RCC_OscConfig+0x2b0>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc0b 	bl	8000d10 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc07 	bl	8000d10 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1a5      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4940      	ldr	r1, [pc, #256]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <HAL_RCC_OscConfig+0x2b0>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fbea 	bl	8000d10 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fbe6 	bl	8000d10 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e184      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d030      	beq.n	80015cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d016      	beq.n	80015a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_OscConfig+0x2b4>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fbca 	bl	8000d10 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fbc6 	bl	8000d10 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e164      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
 800159e:	e015      	b.n	80015cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x2b4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fbb3 	bl	8000d10 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fbaf 	bl	8000d10 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e14d      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a0 	beq.w	800171a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_OscConfig+0x2b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d121      	bne.n	800165a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_OscConfig+0x2b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_RCC_OscConfig+0x2b8>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb75 	bl	8000d10 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e011      	b.n	800164e <HAL_RCC_OscConfig+0x2ce>
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	42470000 	.word	0x42470000
 8001634:	42470e80 	.word	0x42470e80
 8001638:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7ff fb68 	bl	8000d10 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e106      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_OscConfig+0x4e4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <HAL_RCC_OscConfig+0x2f0>
 8001662:	4b81      	ldr	r3, [pc, #516]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a80      	ldr	r2, [pc, #512]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	e01c      	b.n	80016aa <HAL_RCC_OscConfig+0x32a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x312>
 8001678:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	4b78      	ldr	r3, [pc, #480]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a77      	ldr	r2, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0x32a>
 8001692:	4b75      	ldr	r3, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	4a74      	ldr	r2, [pc, #464]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6713      	str	r3, [r2, #112]	; 0x70
 800169e:	4b72      	ldr	r3, [pc, #456]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a71      	ldr	r2, [pc, #452]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d015      	beq.n	80016de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fb2d 	bl	8000d10 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fb29 	bl	8000d10 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0c5      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ee      	beq.n	80016ba <HAL_RCC_OscConfig+0x33a>
 80016dc:	e014      	b.n	8001708 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fb17 	bl	8000d10 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fb13 	bl	8000d10 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0af      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ee      	bne.n	80016e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a55      	ldr	r2, [pc, #340]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 809b 	beq.w	800185a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d05c      	beq.n	80017ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d141      	bne.n	80017bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fae7 	bl	8000d10 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff fae3 	bl	8000d10 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e081      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	019b      	lsls	r3, r3, #6
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	041b      	lsls	r3, r3, #16
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	061b      	lsls	r3, r3, #24
 8001788:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fabc 	bl	8000d10 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fab8 	bl	8000d10 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e056      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x41c>
 80017ba:	e04e      	b.n	800185a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff faa5 	bl	8000d10 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff faa1 	bl	8000d10 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e03f      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x44a>
 80017e8:	e037      	b.n	800185a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e032      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d028      	beq.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d121      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d11a      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001826:	4013      	ands	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800182c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800182e:	4293      	cmp	r3, r2
 8001830:	d111      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40007000 	.word	0x40007000
 8001868:	40023800 	.word	0x40023800
 800186c:	42470060 	.word	0x42470060

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d90c      	bls.n	80018ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d044      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d119      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e067      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4934      	ldr	r1, [pc, #208]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff f9d6 	bl	8000d10 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff f9d2 	bl	8000d10 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d20c      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f936 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	080034b8 	.word	0x080034b8
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d00d      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	f200 80bd 	bhi.w	8001be0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6e:	e0b7      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a72:	60bb      	str	r3, [r7, #8]
       break;
 8001a74:	e0b7      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a78:	60bb      	str	r3, [r7, #8]
      break;
 8001a7a:	e0b4      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a7c:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a86:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04d      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b58      	ldr	r3, [pc, #352]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	ea02 0800 	and.w	r8, r2, r0
 8001aaa:	ea03 0901 	and.w	r9, r3, r1
 8001aae:	4640      	mov	r0, r8
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	014b      	lsls	r3, r1, #5
 8001abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ac0:	0142      	lsls	r2, r0, #5
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	ebb0 0008 	subs.w	r0, r0, r8
 8001aca:	eb61 0109 	sbc.w	r1, r1, r9
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	018b      	lsls	r3, r1, #6
 8001ad8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001adc:	0182      	lsls	r2, r0, #6
 8001ade:	1a12      	subs	r2, r2, r0
 8001ae0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ae4:	f04f 0000 	mov.w	r0, #0
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	00d9      	lsls	r1, r3, #3
 8001aee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001af2:	00d0      	lsls	r0, r2, #3
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	eb12 0208 	adds.w	r2, r2, r8
 8001afc:	eb43 0309 	adc.w	r3, r3, r9
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	0259      	lsls	r1, r3, #9
 8001b0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b0e:	0250      	lsls	r0, r2, #9
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	f7fe fbb6 	bl	8000290 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e04a      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	461a      	mov	r2, r3
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	ea02 0400 	and.w	r4, r2, r0
 8001b46:	ea03 0501 	and.w	r5, r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	014b      	lsls	r3, r1, #5
 8001b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b5c:	0142      	lsls	r2, r0, #5
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	1b00      	subs	r0, r0, r4
 8001b64:	eb61 0105 	sbc.w	r1, r1, r5
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	018b      	lsls	r3, r1, #6
 8001b72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b76:	0182      	lsls	r2, r0, #6
 8001b78:	1a12      	subs	r2, r2, r0
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	f04f 0000 	mov.w	r0, #0
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	00d9      	lsls	r1, r3, #3
 8001b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b8c:	00d0      	lsls	r0, r2, #3
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	1912      	adds	r2, r2, r4
 8001b94:	eb45 0303 	adc.w	r3, r5, r3
 8001b98:	f04f 0000 	mov.w	r0, #0
 8001b9c:	f04f 0100 	mov.w	r1, #0
 8001ba0:	0299      	lsls	r1, r3, #10
 8001ba2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ba6:	0290      	lsls	r0, r2, #10
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	f7fe fb6a 	bl	8000290 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	60bb      	str	r3, [r7, #8]
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001be2:	60bb      	str	r3, [r7, #8]
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	68bb      	ldr	r3, [r7, #8]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a9b      	lsrs	r3, r3, #10
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	080034c8 	.word	0x080034c8

08001c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c44:	f7ff ffdc 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0b5b      	lsrs	r3, r3, #13
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080034c8 	.word	0x080034c8

08001c68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d035      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c90:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c96:	f7ff f83b 	bl	8000d10 <HAL_GetTick>
 8001c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c9e:	f7ff f837 	bl	8000d10 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0ba      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cb0:	4b60      	ldr	r3, [pc, #384]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	019a      	lsls	r2, r3, #6
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	071b      	lsls	r3, r3, #28
 8001cc8:	495a      	ldr	r1, [pc, #360]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cd0:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cd6:	f7ff f81b 	bl	8000d10 <HAL_GetTick>
 8001cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cde:	f7ff f817 	bl	8000d10 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e09a      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8083 	beq.w	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d26:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d32:	f7fe ffed 	bl	8000d10 <HAL_GetTick>
 8001d36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7fe ffe9 	bl	8000d10 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e06c      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d02f      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d028      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d8c:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d114      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ffb7 	bl	8000d10 <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7fe ffb3 	bl	8000d10 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e034      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ee      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dd4:	d10d      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dea:	4912      	ldr	r1, [pc, #72]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
 8001df0:	e005      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001df8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dfc:	6093      	str	r3, [r2, #8]
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	490a      	ldr	r1, [pc, #40]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7c1a      	ldrb	r2, [r3, #16]
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e22:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	42470068 	.word	0x42470068
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	42470e40 	.word	0x42470e40
 8001e40:	424711e0 	.word	0x424711e0

08001e44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e083      	b.n	8001f5e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7f5b      	ldrb	r3, [r3, #29]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fde2 	bl	8000a30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	22ca      	movs	r2, #202	; 0xca
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2253      	movs	r2, #83	; 0x53
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f9fb 	bl	800227e <RTC_EnterInitMode>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	22ff      	movs	r2, #255	; 0xff
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e05e      	b.n	8001f5e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eb2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68d2      	ldr	r2, [r2, #12]
 8001eda:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	041a      	lsls	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f98d 	bl	800222e <HAL_RTC_WaitForSynchro>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e018      	b.n	8001f5e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f66:	b590      	push	{r4, r7, lr}
 8001f68:	b087      	sub	sp, #28
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	7f1b      	ldrb	r3, [r3, #28]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_RTC_SetTime+0x1c>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e0aa      	b.n	80020d8 <HAL_RTC_SetTime+0x172>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d126      	bne.n	8001fe2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f992 	bl	80022d6 <RTC_ByteToBcd2>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f98b 	bl	80022d6 <RTC_ByteToBcd2>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fc4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	789b      	ldrb	r3, [r3, #2]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f983 	bl	80022d6 <RTC_ByteToBcd2>
 8001fd0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fd2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	78db      	ldrb	r3, [r3, #3]
 8001fda:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e018      	b.n	8002014 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002002:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002008:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	78db      	ldrb	r3, [r3, #3]
 800200e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	22ca      	movs	r2, #202	; 0xca
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2253      	movs	r2, #83	; 0x53
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f92a 	bl	800227e <RTC_EnterInitMode>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00b      	beq.n	8002048 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2204      	movs	r2, #4
 800203c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e047      	b.n	80020d8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002052:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002056:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002066:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	431a      	orrs	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d111      	bne.n	80020c2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f8c5 	bl	800222e <HAL_RTC_WaitForSynchro>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2204      	movs	r2, #4
 80020b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00a      	b.n	80020d8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	22ff      	movs	r2, #255	; 0xff
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80020d6:	2300      	movs	r3, #0
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}

080020e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	7f1b      	ldrb	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_RTC_SetDate+0x1c>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e094      	b.n	8002226 <HAL_RTC_SetDate+0x146>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10e      	bne.n	800212c <HAL_RTC_SetDate+0x4c>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	f023 0310 	bic.w	r3, r3, #16
 8002122:	b2db      	uxtb	r3, r3
 8002124:	330a      	adds	r3, #10
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11c      	bne.n	800216c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	78db      	ldrb	r3, [r3, #3]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f8cd 	bl	80022d6 <RTC_ByteToBcd2>
 800213c:	4603      	mov	r3, r0
 800213e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f8c6 	bl	80022d6 <RTC_ByteToBcd2>
 800214a:	4603      	mov	r3, r0
 800214c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800214e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	789b      	ldrb	r3, [r3, #2]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f8be 	bl	80022d6 <RTC_ByteToBcd2>
 800215a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800215c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e00e      	b.n	800218a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	78db      	ldrb	r3, [r3, #3]
 8002170:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002178:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800217e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	22ca      	movs	r2, #202	; 0xca
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2253      	movs	r2, #83	; 0x53
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f86f 	bl	800227e <RTC_EnterInitMode>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2204      	movs	r2, #4
 80021b2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e033      	b.n	8002226 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f81e 	bl	800222e <HAL_RTC_WaitForSynchro>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00b      	beq.n	8002210 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	22ff      	movs	r2, #255	; 0xff
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2204      	movs	r2, #4
 8002204:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e00a      	b.n	8002226 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}

0800222e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002248:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800224a:	f7fe fd61 	bl	8000d10 <HAL_GetTick>
 800224e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002250:	e009      	b.n	8002266 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002252:	f7fe fd5d 	bl	8000d10 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002260:	d901      	bls.n	8002266 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e007      	b.n	8002276 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d119      	bne.n	80022cc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022a2:	f7fe fd35 	bl	8000d10 <HAL_GetTick>
 80022a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022a8:	e009      	b.n	80022be <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80022aa:	f7fe fd31 	bl	8000d10 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b8:	d901      	bls.n	80022be <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e007      	b.n	80022ce <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ee      	beq.n	80022aa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80022e4:	e005      	b.n	80022f2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	3b0a      	subs	r3, #10
 80022f0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b09      	cmp	r3, #9
 80022f6:	d8f6      	bhi.n	80022e6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4313      	orrs	r3, r2
 8002304:	b2db      	uxtb	r3, r3
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	7f1b      	ldrb	r3, [r3, #28]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8002328:	2302      	movs	r3, #2
 800232a:	e0a6      	b.n	800247a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2202      	movs	r2, #2
 8002336:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	22ca      	movs	r2, #202	; 0xca
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2253      	movs	r2, #83	; 0x53
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d022      	beq.n	800239c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8002356:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0adb      	lsrs	r3, r3, #11
 8002362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1e5a      	subs	r2, r3, #1
 8002370:	617a      	str	r2, [r7, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	22ff      	movs	r2, #255	; 0xff
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2203      	movs	r2, #3
 8002382:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e075      	b.n	800247a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e7      	bne.n	800236c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80023ac:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a36      	ldr	r2, [pc, #216]	; (800248c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0adb      	lsrs	r3, r3, #11
 80023b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	617a      	str	r2, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	22ff      	movs	r2, #255	; 0xff
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2203      	movs	r2, #3
 80023d8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e04a      	b.n	800247a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0e7      	beq.n	80023c2 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0207 	bic.w	r2, r2, #7
 8002408:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002424:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800242c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002430:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002442:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002452:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002462:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000
 800248c:	10624dd3 	.word	0x10624dd3
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7f1b      	ldrb	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e047      	b.n	800253c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	22ca      	movs	r2, #202	; 0xca
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2253      	movs	r2, #83	; 0x53
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024e6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e8:	f7fe fc12 	bl	8000d10 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80024ee:	e013      	b.n	8002518 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024f0:	f7fe fc0e 	bl	8000d10 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024fe:	d90b      	bls.n	8002518 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	22ff      	movs	r2, #255	; 0xff
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2203      	movs	r2, #3
 800250c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e011      	b.n	800253c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0e4      	beq.n	80024f0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	22ff      	movs	r2, #255	; 0xff
 800252c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f816 	bl	800258c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002570:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8002574:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002578:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	775a      	strb	r2, [r3, #29]
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40013c00 	.word	0x40013c00

0800258c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e03f      	b.n	8002632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fa4e 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f905 	bl	80027f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b08a      	sub	sp, #40	; 0x28
 800263e:	af02      	add	r7, sp, #8
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	d17c      	bne.n	8002754 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_UART_Transmit+0x2c>
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e075      	b.n	8002756 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_UART_Transmit+0x3e>
 8002674:	2302      	movs	r3, #2
 8002676:	e06e      	b.n	8002756 <HAL_UART_Transmit+0x11c>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2221      	movs	r2, #33	; 0x21
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800268e:	f7fe fb3f 	bl	8000d10 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a8:	d108      	bne.n	80026bc <HAL_UART_Transmit+0x82>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d104      	bne.n	80026bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	e003      	b.n	80026c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026cc:	e02a      	b.n	8002724 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f840 	bl	800275e <UART_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e036      	b.n	8002756 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	3302      	adds	r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e007      	b.n	8002716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3301      	adds	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1cf      	bne.n	80026ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f810 	bl	800275e <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e006      	b.n	8002756 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800276e:	e02c      	b.n	80027ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002776:	d028      	beq.n	80027ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <UART_WaitOnFlagUntilTimeout+0x30>
 800277e:	f7fe fac7 	bl	8000d10 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	429a      	cmp	r2, r3
 800278c:	d21d      	bcs.n	80027ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800279c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e00f      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d0c3      	beq.n	8002770 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f8:	b09f      	sub	sp, #124	; 0x7c
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	ea40 0301 	orr.w	r3, r0, r1
 8002814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	431a      	orrs	r2, r3
 8002820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	431a      	orrs	r2, r3
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4313      	orrs	r3, r2
 800282c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002838:	f021 010c 	bic.w	r1, r1, #12
 800283c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002842:	430b      	orrs	r3, r1
 8002844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002852:	6999      	ldr	r1, [r3, #24]
 8002854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	ea40 0301 	orr.w	r3, r0, r1
 800285c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4bc5      	ldr	r3, [pc, #788]	; (8002b78 <UART_SetConfig+0x384>)
 8002864:	429a      	cmp	r2, r3
 8002866:	d004      	beq.n	8002872 <UART_SetConfig+0x7e>
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4bc3      	ldr	r3, [pc, #780]	; (8002b7c <UART_SetConfig+0x388>)
 800286e:	429a      	cmp	r2, r3
 8002870:	d103      	bne.n	800287a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002872:	f7ff f9e5 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8002876:	6778      	str	r0, [r7, #116]	; 0x74
 8002878:	e002      	b.n	8002880 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800287a:	f7ff f9cd 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 800287e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002888:	f040 80b6 	bne.w	80029f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800288c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288e:	461c      	mov	r4, r3
 8002890:	f04f 0500 	mov.w	r5, #0
 8002894:	4622      	mov	r2, r4
 8002896:	462b      	mov	r3, r5
 8002898:	1891      	adds	r1, r2, r2
 800289a:	6439      	str	r1, [r7, #64]	; 0x40
 800289c:	415b      	adcs	r3, r3
 800289e:	647b      	str	r3, [r7, #68]	; 0x44
 80028a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028a4:	1912      	adds	r2, r2, r4
 80028a6:	eb45 0303 	adc.w	r3, r5, r3
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	00d9      	lsls	r1, r3, #3
 80028b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028b8:	00d0      	lsls	r0, r2, #3
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	1911      	adds	r1, r2, r4
 80028c0:	6639      	str	r1, [r7, #96]	; 0x60
 80028c2:	416b      	adcs	r3, r5
 80028c4:	667b      	str	r3, [r7, #100]	; 0x64
 80028c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80028d4:	415b      	adcs	r3, r3
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028e0:	f7fd fcd6 	bl	8000290 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4ba5      	ldr	r3, [pc, #660]	; (8002b80 <UART_SetConfig+0x38c>)
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	011e      	lsls	r6, r3, #4
 80028f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f4:	461c      	mov	r4, r3
 80028f6:	f04f 0500 	mov.w	r5, #0
 80028fa:	4622      	mov	r2, r4
 80028fc:	462b      	mov	r3, r5
 80028fe:	1891      	adds	r1, r2, r2
 8002900:	6339      	str	r1, [r7, #48]	; 0x30
 8002902:	415b      	adcs	r3, r3
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
 8002906:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800290a:	1912      	adds	r2, r2, r4
 800290c:	eb45 0303 	adc.w	r3, r5, r3
 8002910:	f04f 0000 	mov.w	r0, #0
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	00d9      	lsls	r1, r3, #3
 800291a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800291e:	00d0      	lsls	r0, r2, #3
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	1911      	adds	r1, r2, r4
 8002926:	65b9      	str	r1, [r7, #88]	; 0x58
 8002928:	416b      	adcs	r3, r5
 800292a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800292c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	461a      	mov	r2, r3
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	1891      	adds	r1, r2, r2
 8002938:	62b9      	str	r1, [r7, #40]	; 0x28
 800293a:	415b      	adcs	r3, r3
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002942:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002946:	f7fd fca3 	bl	8000290 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4b8c      	ldr	r3, [pc, #560]	; (8002b80 <UART_SetConfig+0x38c>)
 8002950:	fba3 1302 	umull	r1, r3, r3, r2
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	2164      	movs	r1, #100	; 0x64
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	3332      	adds	r3, #50	; 0x32
 8002962:	4a87      	ldr	r2, [pc, #540]	; (8002b80 <UART_SetConfig+0x38c>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002970:	441e      	add	r6, r3
 8002972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002974:	4618      	mov	r0, r3
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	1894      	adds	r4, r2, r2
 8002980:	623c      	str	r4, [r7, #32]
 8002982:	415b      	adcs	r3, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298a:	1812      	adds	r2, r2, r0
 800298c:	eb41 0303 	adc.w	r3, r1, r3
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	f04f 0500 	mov.w	r5, #0
 8002998:	00dd      	lsls	r5, r3, #3
 800299a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800299e:	00d4      	lsls	r4, r2, #3
 80029a0:	4622      	mov	r2, r4
 80029a2:	462b      	mov	r3, r5
 80029a4:	1814      	adds	r4, r2, r0
 80029a6:	653c      	str	r4, [r7, #80]	; 0x50
 80029a8:	414b      	adcs	r3, r1
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
 80029ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	61b9      	str	r1, [r7, #24]
 80029ba:	415b      	adcs	r3, r3
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029c6:	f7fd fc63 	bl	8000290 <__aeabi_uldivmod>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <UART_SetConfig+0x38c>)
 80029d0:	fba3 1302 	umull	r1, r3, r3, r2
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	2164      	movs	r1, #100	; 0x64
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	3332      	adds	r3, #50	; 0x32
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <UART_SetConfig+0x38c>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	f003 0207 	and.w	r2, r3, #7
 80029ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4432      	add	r2, r6
 80029f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029f6:	e0b9      	b.n	8002b6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fa:	461c      	mov	r4, r3
 80029fc:	f04f 0500 	mov.w	r5, #0
 8002a00:	4622      	mov	r2, r4
 8002a02:	462b      	mov	r3, r5
 8002a04:	1891      	adds	r1, r2, r2
 8002a06:	6139      	str	r1, [r7, #16]
 8002a08:	415b      	adcs	r3, r3
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a10:	1912      	adds	r2, r2, r4
 8002a12:	eb45 0303 	adc.w	r3, r5, r3
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	00d9      	lsls	r1, r3, #3
 8002a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a24:	00d0      	lsls	r0, r2, #3
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	eb12 0804 	adds.w	r8, r2, r4
 8002a2e:	eb43 0905 	adc.w	r9, r3, r5
 8002a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	008b      	lsls	r3, r1, #2
 8002a46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a4a:	0082      	lsls	r2, r0, #2
 8002a4c:	4640      	mov	r0, r8
 8002a4e:	4649      	mov	r1, r9
 8002a50:	f7fd fc1e 	bl	8000290 <__aeabi_uldivmod>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <UART_SetConfig+0x38c>)
 8002a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	011e      	lsls	r6, r3, #4
 8002a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a64:	4618      	mov	r0, r3
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	1894      	adds	r4, r2, r2
 8002a70:	60bc      	str	r4, [r7, #8]
 8002a72:	415b      	adcs	r3, r3
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a7a:	1812      	adds	r2, r2, r0
 8002a7c:	eb41 0303 	adc.w	r3, r1, r3
 8002a80:	f04f 0400 	mov.w	r4, #0
 8002a84:	f04f 0500 	mov.w	r5, #0
 8002a88:	00dd      	lsls	r5, r3, #3
 8002a8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a8e:	00d4      	lsls	r4, r2, #3
 8002a90:	4622      	mov	r2, r4
 8002a92:	462b      	mov	r3, r5
 8002a94:	1814      	adds	r4, r2, r0
 8002a96:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a98:	414b      	adcs	r3, r1
 8002a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	008b      	lsls	r3, r1, #2
 8002ab0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ab4:	0082      	lsls	r2, r0, #2
 8002ab6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002aba:	f7fd fbe9 	bl	8000290 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <UART_SetConfig+0x38c>)
 8002ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	2164      	movs	r1, #100	; 0x64
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	3332      	adds	r3, #50	; 0x32
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <UART_SetConfig+0x38c>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae2:	441e      	add	r6, r3
 8002ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	1894      	adds	r4, r2, r2
 8002af2:	603c      	str	r4, [r7, #0]
 8002af4:	415b      	adcs	r3, r3
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afc:	1812      	adds	r2, r2, r0
 8002afe:	eb41 0303 	adc.w	r3, r1, r3
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	f04f 0500 	mov.w	r5, #0
 8002b0a:	00dd      	lsls	r5, r3, #3
 8002b0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b10:	00d4      	lsls	r4, r2, #3
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	eb12 0a00 	adds.w	sl, r2, r0
 8002b1a:	eb43 0b01 	adc.w	fp, r3, r1
 8002b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f04f 0100 	mov.w	r1, #0
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	008b      	lsls	r3, r1, #2
 8002b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b36:	0082      	lsls	r2, r0, #2
 8002b38:	4650      	mov	r0, sl
 8002b3a:	4659      	mov	r1, fp
 8002b3c:	f7fd fba8 	bl	8000290 <__aeabi_uldivmod>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <UART_SetConfig+0x38c>)
 8002b46:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2164      	movs	r1, #100	; 0x64
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	3332      	adds	r3, #50	; 0x32
 8002b58:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <UART_SetConfig+0x38c>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4432      	add	r2, r6
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	377c      	adds	r7, #124	; 0x7c
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b76:	bf00      	nop
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	40011400 	.word	0x40011400
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	4d0d      	ldr	r5, [pc, #52]	; (8002bc8 <__libc_init_array+0x38>)
 8002b94:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	4d0b      	ldr	r5, [pc, #44]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba2:	4c0c      	ldr	r4, [pc, #48]	; (8002bd4 <__libc_init_array+0x44>)
 8002ba4:	f000 fc4e 	bl	8003444 <_init>
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	2600      	movs	r6, #0
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	0800350c 	.word	0x0800350c
 8002bcc:	0800350c 	.word	0x0800350c
 8002bd0:	0800350c 	.word	0x0800350c
 8002bd4:	08003510 	.word	0x08003510

08002bd8 <memset>:
 8002bd8:	4402      	add	r2, r0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d100      	bne.n	8002be2 <memset+0xa>
 8002be0:	4770      	bx	lr
 8002be2:	f803 1b01 	strb.w	r1, [r3], #1
 8002be6:	e7f9      	b.n	8002bdc <memset+0x4>

08002be8 <siprintf>:
 8002be8:	b40e      	push	{r1, r2, r3}
 8002bea:	b500      	push	{lr}
 8002bec:	b09c      	sub	sp, #112	; 0x70
 8002bee:	ab1d      	add	r3, sp, #116	; 0x74
 8002bf0:	9002      	str	r0, [sp, #8]
 8002bf2:	9006      	str	r0, [sp, #24]
 8002bf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bf8:	4809      	ldr	r0, [pc, #36]	; (8002c20 <siprintf+0x38>)
 8002bfa:	9107      	str	r1, [sp, #28]
 8002bfc:	9104      	str	r1, [sp, #16]
 8002bfe:	4909      	ldr	r1, [pc, #36]	; (8002c24 <siprintf+0x3c>)
 8002c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c04:	9105      	str	r1, [sp, #20]
 8002c06:	6800      	ldr	r0, [r0, #0]
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	a902      	add	r1, sp, #8
 8002c0c:	f000 f868 	bl	8002ce0 <_svfiprintf_r>
 8002c10:	9b02      	ldr	r3, [sp, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	b01c      	add	sp, #112	; 0x70
 8002c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c1c:	b003      	add	sp, #12
 8002c1e:	4770      	bx	lr
 8002c20:	2000000c 	.word	0x2000000c
 8002c24:	ffff0208 	.word	0xffff0208

08002c28 <__ssputs_r>:
 8002c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c2c:	688e      	ldr	r6, [r1, #8]
 8002c2e:	429e      	cmp	r6, r3
 8002c30:	4682      	mov	sl, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	4690      	mov	r8, r2
 8002c36:	461f      	mov	r7, r3
 8002c38:	d838      	bhi.n	8002cac <__ssputs_r+0x84>
 8002c3a:	898a      	ldrh	r2, [r1, #12]
 8002c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c40:	d032      	beq.n	8002ca8 <__ssputs_r+0x80>
 8002c42:	6825      	ldr	r5, [r4, #0]
 8002c44:	6909      	ldr	r1, [r1, #16]
 8002c46:	eba5 0901 	sub.w	r9, r5, r1
 8002c4a:	6965      	ldr	r5, [r4, #20]
 8002c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c54:	3301      	adds	r3, #1
 8002c56:	444b      	add	r3, r9
 8002c58:	106d      	asrs	r5, r5, #1
 8002c5a:	429d      	cmp	r5, r3
 8002c5c:	bf38      	it	cc
 8002c5e:	461d      	movcc	r5, r3
 8002c60:	0553      	lsls	r3, r2, #21
 8002c62:	d531      	bpl.n	8002cc8 <__ssputs_r+0xa0>
 8002c64:	4629      	mov	r1, r5
 8002c66:	f000 fb47 	bl	80032f8 <_malloc_r>
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	b950      	cbnz	r0, 8002c84 <__ssputs_r+0x5c>
 8002c6e:	230c      	movs	r3, #12
 8002c70:	f8ca 3000 	str.w	r3, [sl]
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7a:	81a3      	strh	r3, [r4, #12]
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c84:	6921      	ldr	r1, [r4, #16]
 8002c86:	464a      	mov	r2, r9
 8002c88:	f000 fabe 	bl	8003208 <memcpy>
 8002c8c:	89a3      	ldrh	r3, [r4, #12]
 8002c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c96:	81a3      	strh	r3, [r4, #12]
 8002c98:	6126      	str	r6, [r4, #16]
 8002c9a:	6165      	str	r5, [r4, #20]
 8002c9c:	444e      	add	r6, r9
 8002c9e:	eba5 0509 	sub.w	r5, r5, r9
 8002ca2:	6026      	str	r6, [r4, #0]
 8002ca4:	60a5      	str	r5, [r4, #8]
 8002ca6:	463e      	mov	r6, r7
 8002ca8:	42be      	cmp	r6, r7
 8002caa:	d900      	bls.n	8002cae <__ssputs_r+0x86>
 8002cac:	463e      	mov	r6, r7
 8002cae:	4632      	mov	r2, r6
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	f000 fab6 	bl	8003224 <memmove>
 8002cb8:	68a3      	ldr	r3, [r4, #8]
 8002cba:	6822      	ldr	r2, [r4, #0]
 8002cbc:	1b9b      	subs	r3, r3, r6
 8002cbe:	4432      	add	r2, r6
 8002cc0:	60a3      	str	r3, [r4, #8]
 8002cc2:	6022      	str	r2, [r4, #0]
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e7db      	b.n	8002c80 <__ssputs_r+0x58>
 8002cc8:	462a      	mov	r2, r5
 8002cca:	f000 fb6f 	bl	80033ac <_realloc_r>
 8002cce:	4606      	mov	r6, r0
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d1e1      	bne.n	8002c98 <__ssputs_r+0x70>
 8002cd4:	6921      	ldr	r1, [r4, #16]
 8002cd6:	4650      	mov	r0, sl
 8002cd8:	f000 fabe 	bl	8003258 <_free_r>
 8002cdc:	e7c7      	b.n	8002c6e <__ssputs_r+0x46>
	...

08002ce0 <_svfiprintf_r>:
 8002ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce4:	4698      	mov	r8, r3
 8002ce6:	898b      	ldrh	r3, [r1, #12]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	b09d      	sub	sp, #116	; 0x74
 8002cec:	4607      	mov	r7, r0
 8002cee:	460d      	mov	r5, r1
 8002cf0:	4614      	mov	r4, r2
 8002cf2:	d50e      	bpl.n	8002d12 <_svfiprintf_r+0x32>
 8002cf4:	690b      	ldr	r3, [r1, #16]
 8002cf6:	b963      	cbnz	r3, 8002d12 <_svfiprintf_r+0x32>
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	f000 fafd 	bl	80032f8 <_malloc_r>
 8002cfe:	6028      	str	r0, [r5, #0]
 8002d00:	6128      	str	r0, [r5, #16]
 8002d02:	b920      	cbnz	r0, 8002d0e <_svfiprintf_r+0x2e>
 8002d04:	230c      	movs	r3, #12
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d0c:	e0d1      	b.n	8002eb2 <_svfiprintf_r+0x1d2>
 8002d0e:	2340      	movs	r3, #64	; 0x40
 8002d10:	616b      	str	r3, [r5, #20]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9309      	str	r3, [sp, #36]	; 0x24
 8002d16:	2320      	movs	r3, #32
 8002d18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d20:	2330      	movs	r3, #48	; 0x30
 8002d22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ecc <_svfiprintf_r+0x1ec>
 8002d26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d2a:	f04f 0901 	mov.w	r9, #1
 8002d2e:	4623      	mov	r3, r4
 8002d30:	469a      	mov	sl, r3
 8002d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d36:	b10a      	cbz	r2, 8002d3c <_svfiprintf_r+0x5c>
 8002d38:	2a25      	cmp	r2, #37	; 0x25
 8002d3a:	d1f9      	bne.n	8002d30 <_svfiprintf_r+0x50>
 8002d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d40:	d00b      	beq.n	8002d5a <_svfiprintf_r+0x7a>
 8002d42:	465b      	mov	r3, fp
 8002d44:	4622      	mov	r2, r4
 8002d46:	4629      	mov	r1, r5
 8002d48:	4638      	mov	r0, r7
 8002d4a:	f7ff ff6d 	bl	8002c28 <__ssputs_r>
 8002d4e:	3001      	adds	r0, #1
 8002d50:	f000 80aa 	beq.w	8002ea8 <_svfiprintf_r+0x1c8>
 8002d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d56:	445a      	add	r2, fp
 8002d58:	9209      	str	r2, [sp, #36]	; 0x24
 8002d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80a2 	beq.w	8002ea8 <_svfiprintf_r+0x1c8>
 8002d64:	2300      	movs	r3, #0
 8002d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d6e:	f10a 0a01 	add.w	sl, sl, #1
 8002d72:	9304      	str	r3, [sp, #16]
 8002d74:	9307      	str	r3, [sp, #28]
 8002d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8002d7c:	4654      	mov	r4, sl
 8002d7e:	2205      	movs	r2, #5
 8002d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d84:	4851      	ldr	r0, [pc, #324]	; (8002ecc <_svfiprintf_r+0x1ec>)
 8002d86:	f7fd fa33 	bl	80001f0 <memchr>
 8002d8a:	9a04      	ldr	r2, [sp, #16]
 8002d8c:	b9d8      	cbnz	r0, 8002dc6 <_svfiprintf_r+0xe6>
 8002d8e:	06d0      	lsls	r0, r2, #27
 8002d90:	bf44      	itt	mi
 8002d92:	2320      	movmi	r3, #32
 8002d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d98:	0711      	lsls	r1, r2, #28
 8002d9a:	bf44      	itt	mi
 8002d9c:	232b      	movmi	r3, #43	; 0x2b
 8002d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002da2:	f89a 3000 	ldrb.w	r3, [sl]
 8002da6:	2b2a      	cmp	r3, #42	; 0x2a
 8002da8:	d015      	beq.n	8002dd6 <_svfiprintf_r+0xf6>
 8002daa:	9a07      	ldr	r2, [sp, #28]
 8002dac:	4654      	mov	r4, sl
 8002dae:	2000      	movs	r0, #0
 8002db0:	f04f 0c0a 	mov.w	ip, #10
 8002db4:	4621      	mov	r1, r4
 8002db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dba:	3b30      	subs	r3, #48	; 0x30
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d94e      	bls.n	8002e5e <_svfiprintf_r+0x17e>
 8002dc0:	b1b0      	cbz	r0, 8002df0 <_svfiprintf_r+0x110>
 8002dc2:	9207      	str	r2, [sp, #28]
 8002dc4:	e014      	b.n	8002df0 <_svfiprintf_r+0x110>
 8002dc6:	eba0 0308 	sub.w	r3, r0, r8
 8002dca:	fa09 f303 	lsl.w	r3, r9, r3
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	9304      	str	r3, [sp, #16]
 8002dd2:	46a2      	mov	sl, r4
 8002dd4:	e7d2      	b.n	8002d7c <_svfiprintf_r+0x9c>
 8002dd6:	9b03      	ldr	r3, [sp, #12]
 8002dd8:	1d19      	adds	r1, r3, #4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	9103      	str	r1, [sp, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bfbb      	ittet	lt
 8002de2:	425b      	neglt	r3, r3
 8002de4:	f042 0202 	orrlt.w	r2, r2, #2
 8002de8:	9307      	strge	r3, [sp, #28]
 8002dea:	9307      	strlt	r3, [sp, #28]
 8002dec:	bfb8      	it	lt
 8002dee:	9204      	strlt	r2, [sp, #16]
 8002df0:	7823      	ldrb	r3, [r4, #0]
 8002df2:	2b2e      	cmp	r3, #46	; 0x2e
 8002df4:	d10c      	bne.n	8002e10 <_svfiprintf_r+0x130>
 8002df6:	7863      	ldrb	r3, [r4, #1]
 8002df8:	2b2a      	cmp	r3, #42	; 0x2a
 8002dfa:	d135      	bne.n	8002e68 <_svfiprintf_r+0x188>
 8002dfc:	9b03      	ldr	r3, [sp, #12]
 8002dfe:	1d1a      	adds	r2, r3, #4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	9203      	str	r2, [sp, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bfb8      	it	lt
 8002e08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e0c:	3402      	adds	r4, #2
 8002e0e:	9305      	str	r3, [sp, #20]
 8002e10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002edc <_svfiprintf_r+0x1fc>
 8002e14:	7821      	ldrb	r1, [r4, #0]
 8002e16:	2203      	movs	r2, #3
 8002e18:	4650      	mov	r0, sl
 8002e1a:	f7fd f9e9 	bl	80001f0 <memchr>
 8002e1e:	b140      	cbz	r0, 8002e32 <_svfiprintf_r+0x152>
 8002e20:	2340      	movs	r3, #64	; 0x40
 8002e22:	eba0 000a 	sub.w	r0, r0, sl
 8002e26:	fa03 f000 	lsl.w	r0, r3, r0
 8002e2a:	9b04      	ldr	r3, [sp, #16]
 8002e2c:	4303      	orrs	r3, r0
 8002e2e:	3401      	adds	r4, #1
 8002e30:	9304      	str	r3, [sp, #16]
 8002e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e36:	4826      	ldr	r0, [pc, #152]	; (8002ed0 <_svfiprintf_r+0x1f0>)
 8002e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e3c:	2206      	movs	r2, #6
 8002e3e:	f7fd f9d7 	bl	80001f0 <memchr>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d038      	beq.n	8002eb8 <_svfiprintf_r+0x1d8>
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <_svfiprintf_r+0x1f4>)
 8002e48:	bb1b      	cbnz	r3, 8002e92 <_svfiprintf_r+0x1b2>
 8002e4a:	9b03      	ldr	r3, [sp, #12]
 8002e4c:	3307      	adds	r3, #7
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	3308      	adds	r3, #8
 8002e54:	9303      	str	r3, [sp, #12]
 8002e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e58:	4433      	add	r3, r6
 8002e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e5c:	e767      	b.n	8002d2e <_svfiprintf_r+0x4e>
 8002e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e62:	460c      	mov	r4, r1
 8002e64:	2001      	movs	r0, #1
 8002e66:	e7a5      	b.n	8002db4 <_svfiprintf_r+0xd4>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	3401      	adds	r4, #1
 8002e6c:	9305      	str	r3, [sp, #20]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f04f 0c0a 	mov.w	ip, #10
 8002e74:	4620      	mov	r0, r4
 8002e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e7a:	3a30      	subs	r2, #48	; 0x30
 8002e7c:	2a09      	cmp	r2, #9
 8002e7e:	d903      	bls.n	8002e88 <_svfiprintf_r+0x1a8>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0c5      	beq.n	8002e10 <_svfiprintf_r+0x130>
 8002e84:	9105      	str	r1, [sp, #20]
 8002e86:	e7c3      	b.n	8002e10 <_svfiprintf_r+0x130>
 8002e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e7f0      	b.n	8002e74 <_svfiprintf_r+0x194>
 8002e92:	ab03      	add	r3, sp, #12
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	462a      	mov	r2, r5
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <_svfiprintf_r+0x1f8>)
 8002e9a:	a904      	add	r1, sp, #16
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	f3af 8000 	nop.w
 8002ea2:	1c42      	adds	r2, r0, #1
 8002ea4:	4606      	mov	r6, r0
 8002ea6:	d1d6      	bne.n	8002e56 <_svfiprintf_r+0x176>
 8002ea8:	89ab      	ldrh	r3, [r5, #12]
 8002eaa:	065b      	lsls	r3, r3, #25
 8002eac:	f53f af2c 	bmi.w	8002d08 <_svfiprintf_r+0x28>
 8002eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eb2:	b01d      	add	sp, #116	; 0x74
 8002eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb8:	ab03      	add	r3, sp, #12
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	462a      	mov	r2, r5
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <_svfiprintf_r+0x1f8>)
 8002ec0:	a904      	add	r1, sp, #16
 8002ec2:	4638      	mov	r0, r7
 8002ec4:	f000 f87a 	bl	8002fbc <_printf_i>
 8002ec8:	e7eb      	b.n	8002ea2 <_svfiprintf_r+0x1c2>
 8002eca:	bf00      	nop
 8002ecc:	080034d0 	.word	0x080034d0
 8002ed0:	080034da 	.word	0x080034da
 8002ed4:	00000000 	.word	0x00000000
 8002ed8:	08002c29 	.word	0x08002c29
 8002edc:	080034d6 	.word	0x080034d6

08002ee0 <_printf_common>:
 8002ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee4:	4616      	mov	r6, r2
 8002ee6:	4699      	mov	r9, r3
 8002ee8:	688a      	ldr	r2, [r1, #8]
 8002eea:	690b      	ldr	r3, [r1, #16]
 8002eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bfb8      	it	lt
 8002ef4:	4613      	movlt	r3, r2
 8002ef6:	6033      	str	r3, [r6, #0]
 8002ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002efc:	4607      	mov	r7, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	b10a      	cbz	r2, 8002f06 <_printf_common+0x26>
 8002f02:	3301      	adds	r3, #1
 8002f04:	6033      	str	r3, [r6, #0]
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	0699      	lsls	r1, r3, #26
 8002f0a:	bf42      	ittt	mi
 8002f0c:	6833      	ldrmi	r3, [r6, #0]
 8002f0e:	3302      	addmi	r3, #2
 8002f10:	6033      	strmi	r3, [r6, #0]
 8002f12:	6825      	ldr	r5, [r4, #0]
 8002f14:	f015 0506 	ands.w	r5, r5, #6
 8002f18:	d106      	bne.n	8002f28 <_printf_common+0x48>
 8002f1a:	f104 0a19 	add.w	sl, r4, #25
 8002f1e:	68e3      	ldr	r3, [r4, #12]
 8002f20:	6832      	ldr	r2, [r6, #0]
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	42ab      	cmp	r3, r5
 8002f26:	dc26      	bgt.n	8002f76 <_printf_common+0x96>
 8002f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f2c:	1e13      	subs	r3, r2, #0
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	bf18      	it	ne
 8002f32:	2301      	movne	r3, #1
 8002f34:	0692      	lsls	r2, r2, #26
 8002f36:	d42b      	bmi.n	8002f90 <_printf_common+0xb0>
 8002f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	4638      	mov	r0, r7
 8002f40:	47c0      	blx	r8
 8002f42:	3001      	adds	r0, #1
 8002f44:	d01e      	beq.n	8002f84 <_printf_common+0xa4>
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	68e5      	ldr	r5, [r4, #12]
 8002f4a:	6832      	ldr	r2, [r6, #0]
 8002f4c:	f003 0306 	and.w	r3, r3, #6
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	bf08      	it	eq
 8002f54:	1aad      	subeq	r5, r5, r2
 8002f56:	68a3      	ldr	r3, [r4, #8]
 8002f58:	6922      	ldr	r2, [r4, #16]
 8002f5a:	bf0c      	ite	eq
 8002f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f60:	2500      	movne	r5, #0
 8002f62:	4293      	cmp	r3, r2
 8002f64:	bfc4      	itt	gt
 8002f66:	1a9b      	subgt	r3, r3, r2
 8002f68:	18ed      	addgt	r5, r5, r3
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	341a      	adds	r4, #26
 8002f6e:	42b5      	cmp	r5, r6
 8002f70:	d11a      	bne.n	8002fa8 <_printf_common+0xc8>
 8002f72:	2000      	movs	r0, #0
 8002f74:	e008      	b.n	8002f88 <_printf_common+0xa8>
 8002f76:	2301      	movs	r3, #1
 8002f78:	4652      	mov	r2, sl
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	47c0      	blx	r8
 8002f80:	3001      	adds	r0, #1
 8002f82:	d103      	bne.n	8002f8c <_printf_common+0xac>
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8c:	3501      	adds	r5, #1
 8002f8e:	e7c6      	b.n	8002f1e <_printf_common+0x3e>
 8002f90:	18e1      	adds	r1, r4, r3
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	2030      	movs	r0, #48	; 0x30
 8002f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f9a:	4422      	add	r2, r4
 8002f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	e7c7      	b.n	8002f38 <_printf_common+0x58>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4622      	mov	r2, r4
 8002fac:	4649      	mov	r1, r9
 8002fae:	4638      	mov	r0, r7
 8002fb0:	47c0      	blx	r8
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d0e6      	beq.n	8002f84 <_printf_common+0xa4>
 8002fb6:	3601      	adds	r6, #1
 8002fb8:	e7d9      	b.n	8002f6e <_printf_common+0x8e>
	...

08002fbc <_printf_i>:
 8002fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	4691      	mov	r9, r2
 8002fc4:	7e27      	ldrb	r7, [r4, #24]
 8002fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fc8:	2f78      	cmp	r7, #120	; 0x78
 8002fca:	4680      	mov	r8, r0
 8002fcc:	469a      	mov	sl, r3
 8002fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fd2:	d807      	bhi.n	8002fe4 <_printf_i+0x28>
 8002fd4:	2f62      	cmp	r7, #98	; 0x62
 8002fd6:	d80a      	bhi.n	8002fee <_printf_i+0x32>
 8002fd8:	2f00      	cmp	r7, #0
 8002fda:	f000 80d8 	beq.w	800318e <_printf_i+0x1d2>
 8002fde:	2f58      	cmp	r7, #88	; 0x58
 8002fe0:	f000 80a3 	beq.w	800312a <_printf_i+0x16e>
 8002fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fec:	e03a      	b.n	8003064 <_printf_i+0xa8>
 8002fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ff2:	2b15      	cmp	r3, #21
 8002ff4:	d8f6      	bhi.n	8002fe4 <_printf_i+0x28>
 8002ff6:	a001      	add	r0, pc, #4	; (adr r0, 8002ffc <_printf_i+0x40>)
 8002ff8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ffc:	08003055 	.word	0x08003055
 8003000:	08003069 	.word	0x08003069
 8003004:	08002fe5 	.word	0x08002fe5
 8003008:	08002fe5 	.word	0x08002fe5
 800300c:	08002fe5 	.word	0x08002fe5
 8003010:	08002fe5 	.word	0x08002fe5
 8003014:	08003069 	.word	0x08003069
 8003018:	08002fe5 	.word	0x08002fe5
 800301c:	08002fe5 	.word	0x08002fe5
 8003020:	08002fe5 	.word	0x08002fe5
 8003024:	08002fe5 	.word	0x08002fe5
 8003028:	08003175 	.word	0x08003175
 800302c:	08003099 	.word	0x08003099
 8003030:	08003157 	.word	0x08003157
 8003034:	08002fe5 	.word	0x08002fe5
 8003038:	08002fe5 	.word	0x08002fe5
 800303c:	08003197 	.word	0x08003197
 8003040:	08002fe5 	.word	0x08002fe5
 8003044:	08003099 	.word	0x08003099
 8003048:	08002fe5 	.word	0x08002fe5
 800304c:	08002fe5 	.word	0x08002fe5
 8003050:	0800315f 	.word	0x0800315f
 8003054:	680b      	ldr	r3, [r1, #0]
 8003056:	1d1a      	adds	r2, r3, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	600a      	str	r2, [r1, #0]
 800305c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003064:	2301      	movs	r3, #1
 8003066:	e0a3      	b.n	80031b0 <_printf_i+0x1f4>
 8003068:	6825      	ldr	r5, [r4, #0]
 800306a:	6808      	ldr	r0, [r1, #0]
 800306c:	062e      	lsls	r6, r5, #24
 800306e:	f100 0304 	add.w	r3, r0, #4
 8003072:	d50a      	bpl.n	800308a <_printf_i+0xce>
 8003074:	6805      	ldr	r5, [r0, #0]
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	2d00      	cmp	r5, #0
 800307a:	da03      	bge.n	8003084 <_printf_i+0xc8>
 800307c:	232d      	movs	r3, #45	; 0x2d
 800307e:	426d      	negs	r5, r5
 8003080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003084:	485e      	ldr	r0, [pc, #376]	; (8003200 <_printf_i+0x244>)
 8003086:	230a      	movs	r3, #10
 8003088:	e019      	b.n	80030be <_printf_i+0x102>
 800308a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800308e:	6805      	ldr	r5, [r0, #0]
 8003090:	600b      	str	r3, [r1, #0]
 8003092:	bf18      	it	ne
 8003094:	b22d      	sxthne	r5, r5
 8003096:	e7ef      	b.n	8003078 <_printf_i+0xbc>
 8003098:	680b      	ldr	r3, [r1, #0]
 800309a:	6825      	ldr	r5, [r4, #0]
 800309c:	1d18      	adds	r0, r3, #4
 800309e:	6008      	str	r0, [r1, #0]
 80030a0:	0628      	lsls	r0, r5, #24
 80030a2:	d501      	bpl.n	80030a8 <_printf_i+0xec>
 80030a4:	681d      	ldr	r5, [r3, #0]
 80030a6:	e002      	b.n	80030ae <_printf_i+0xf2>
 80030a8:	0669      	lsls	r1, r5, #25
 80030aa:	d5fb      	bpl.n	80030a4 <_printf_i+0xe8>
 80030ac:	881d      	ldrh	r5, [r3, #0]
 80030ae:	4854      	ldr	r0, [pc, #336]	; (8003200 <_printf_i+0x244>)
 80030b0:	2f6f      	cmp	r7, #111	; 0x6f
 80030b2:	bf0c      	ite	eq
 80030b4:	2308      	moveq	r3, #8
 80030b6:	230a      	movne	r3, #10
 80030b8:	2100      	movs	r1, #0
 80030ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030be:	6866      	ldr	r6, [r4, #4]
 80030c0:	60a6      	str	r6, [r4, #8]
 80030c2:	2e00      	cmp	r6, #0
 80030c4:	bfa2      	ittt	ge
 80030c6:	6821      	ldrge	r1, [r4, #0]
 80030c8:	f021 0104 	bicge.w	r1, r1, #4
 80030cc:	6021      	strge	r1, [r4, #0]
 80030ce:	b90d      	cbnz	r5, 80030d4 <_printf_i+0x118>
 80030d0:	2e00      	cmp	r6, #0
 80030d2:	d04d      	beq.n	8003170 <_printf_i+0x1b4>
 80030d4:	4616      	mov	r6, r2
 80030d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80030da:	fb03 5711 	mls	r7, r3, r1, r5
 80030de:	5dc7      	ldrb	r7, [r0, r7]
 80030e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030e4:	462f      	mov	r7, r5
 80030e6:	42bb      	cmp	r3, r7
 80030e8:	460d      	mov	r5, r1
 80030ea:	d9f4      	bls.n	80030d6 <_printf_i+0x11a>
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d10b      	bne.n	8003108 <_printf_i+0x14c>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	07df      	lsls	r7, r3, #31
 80030f4:	d508      	bpl.n	8003108 <_printf_i+0x14c>
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	6861      	ldr	r1, [r4, #4]
 80030fa:	4299      	cmp	r1, r3
 80030fc:	bfde      	ittt	le
 80030fe:	2330      	movle	r3, #48	; 0x30
 8003100:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003104:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003108:	1b92      	subs	r2, r2, r6
 800310a:	6122      	str	r2, [r4, #16]
 800310c:	f8cd a000 	str.w	sl, [sp]
 8003110:	464b      	mov	r3, r9
 8003112:	aa03      	add	r2, sp, #12
 8003114:	4621      	mov	r1, r4
 8003116:	4640      	mov	r0, r8
 8003118:	f7ff fee2 	bl	8002ee0 <_printf_common>
 800311c:	3001      	adds	r0, #1
 800311e:	d14c      	bne.n	80031ba <_printf_i+0x1fe>
 8003120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003124:	b004      	add	sp, #16
 8003126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800312a:	4835      	ldr	r0, [pc, #212]	; (8003200 <_printf_i+0x244>)
 800312c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	680e      	ldr	r6, [r1, #0]
 8003134:	061f      	lsls	r7, r3, #24
 8003136:	f856 5b04 	ldr.w	r5, [r6], #4
 800313a:	600e      	str	r6, [r1, #0]
 800313c:	d514      	bpl.n	8003168 <_printf_i+0x1ac>
 800313e:	07d9      	lsls	r1, r3, #31
 8003140:	bf44      	itt	mi
 8003142:	f043 0320 	orrmi.w	r3, r3, #32
 8003146:	6023      	strmi	r3, [r4, #0]
 8003148:	b91d      	cbnz	r5, 8003152 <_printf_i+0x196>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	f023 0320 	bic.w	r3, r3, #32
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	2310      	movs	r3, #16
 8003154:	e7b0      	b.n	80030b8 <_printf_i+0xfc>
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	f043 0320 	orr.w	r3, r3, #32
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	2378      	movs	r3, #120	; 0x78
 8003160:	4828      	ldr	r0, [pc, #160]	; (8003204 <_printf_i+0x248>)
 8003162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003166:	e7e3      	b.n	8003130 <_printf_i+0x174>
 8003168:	065e      	lsls	r6, r3, #25
 800316a:	bf48      	it	mi
 800316c:	b2ad      	uxthmi	r5, r5
 800316e:	e7e6      	b.n	800313e <_printf_i+0x182>
 8003170:	4616      	mov	r6, r2
 8003172:	e7bb      	b.n	80030ec <_printf_i+0x130>
 8003174:	680b      	ldr	r3, [r1, #0]
 8003176:	6826      	ldr	r6, [r4, #0]
 8003178:	6960      	ldr	r0, [r4, #20]
 800317a:	1d1d      	adds	r5, r3, #4
 800317c:	600d      	str	r5, [r1, #0]
 800317e:	0635      	lsls	r5, r6, #24
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	d501      	bpl.n	8003188 <_printf_i+0x1cc>
 8003184:	6018      	str	r0, [r3, #0]
 8003186:	e002      	b.n	800318e <_printf_i+0x1d2>
 8003188:	0671      	lsls	r1, r6, #25
 800318a:	d5fb      	bpl.n	8003184 <_printf_i+0x1c8>
 800318c:	8018      	strh	r0, [r3, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	6123      	str	r3, [r4, #16]
 8003192:	4616      	mov	r6, r2
 8003194:	e7ba      	b.n	800310c <_printf_i+0x150>
 8003196:	680b      	ldr	r3, [r1, #0]
 8003198:	1d1a      	adds	r2, r3, #4
 800319a:	600a      	str	r2, [r1, #0]
 800319c:	681e      	ldr	r6, [r3, #0]
 800319e:	6862      	ldr	r2, [r4, #4]
 80031a0:	2100      	movs	r1, #0
 80031a2:	4630      	mov	r0, r6
 80031a4:	f7fd f824 	bl	80001f0 <memchr>
 80031a8:	b108      	cbz	r0, 80031ae <_printf_i+0x1f2>
 80031aa:	1b80      	subs	r0, r0, r6
 80031ac:	6060      	str	r0, [r4, #4]
 80031ae:	6863      	ldr	r3, [r4, #4]
 80031b0:	6123      	str	r3, [r4, #16]
 80031b2:	2300      	movs	r3, #0
 80031b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031b8:	e7a8      	b.n	800310c <_printf_i+0x150>
 80031ba:	6923      	ldr	r3, [r4, #16]
 80031bc:	4632      	mov	r2, r6
 80031be:	4649      	mov	r1, r9
 80031c0:	4640      	mov	r0, r8
 80031c2:	47d0      	blx	sl
 80031c4:	3001      	adds	r0, #1
 80031c6:	d0ab      	beq.n	8003120 <_printf_i+0x164>
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	079b      	lsls	r3, r3, #30
 80031cc:	d413      	bmi.n	80031f6 <_printf_i+0x23a>
 80031ce:	68e0      	ldr	r0, [r4, #12]
 80031d0:	9b03      	ldr	r3, [sp, #12]
 80031d2:	4298      	cmp	r0, r3
 80031d4:	bfb8      	it	lt
 80031d6:	4618      	movlt	r0, r3
 80031d8:	e7a4      	b.n	8003124 <_printf_i+0x168>
 80031da:	2301      	movs	r3, #1
 80031dc:	4632      	mov	r2, r6
 80031de:	4649      	mov	r1, r9
 80031e0:	4640      	mov	r0, r8
 80031e2:	47d0      	blx	sl
 80031e4:	3001      	adds	r0, #1
 80031e6:	d09b      	beq.n	8003120 <_printf_i+0x164>
 80031e8:	3501      	adds	r5, #1
 80031ea:	68e3      	ldr	r3, [r4, #12]
 80031ec:	9903      	ldr	r1, [sp, #12]
 80031ee:	1a5b      	subs	r3, r3, r1
 80031f0:	42ab      	cmp	r3, r5
 80031f2:	dcf2      	bgt.n	80031da <_printf_i+0x21e>
 80031f4:	e7eb      	b.n	80031ce <_printf_i+0x212>
 80031f6:	2500      	movs	r5, #0
 80031f8:	f104 0619 	add.w	r6, r4, #25
 80031fc:	e7f5      	b.n	80031ea <_printf_i+0x22e>
 80031fe:	bf00      	nop
 8003200:	080034e1 	.word	0x080034e1
 8003204:	080034f2 	.word	0x080034f2

08003208 <memcpy>:
 8003208:	440a      	add	r2, r1
 800320a:	4291      	cmp	r1, r2
 800320c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003210:	d100      	bne.n	8003214 <memcpy+0xc>
 8003212:	4770      	bx	lr
 8003214:	b510      	push	{r4, lr}
 8003216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800321a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800321e:	4291      	cmp	r1, r2
 8003220:	d1f9      	bne.n	8003216 <memcpy+0xe>
 8003222:	bd10      	pop	{r4, pc}

08003224 <memmove>:
 8003224:	4288      	cmp	r0, r1
 8003226:	b510      	push	{r4, lr}
 8003228:	eb01 0402 	add.w	r4, r1, r2
 800322c:	d902      	bls.n	8003234 <memmove+0x10>
 800322e:	4284      	cmp	r4, r0
 8003230:	4623      	mov	r3, r4
 8003232:	d807      	bhi.n	8003244 <memmove+0x20>
 8003234:	1e43      	subs	r3, r0, #1
 8003236:	42a1      	cmp	r1, r4
 8003238:	d008      	beq.n	800324c <memmove+0x28>
 800323a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800323e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003242:	e7f8      	b.n	8003236 <memmove+0x12>
 8003244:	4402      	add	r2, r0
 8003246:	4601      	mov	r1, r0
 8003248:	428a      	cmp	r2, r1
 800324a:	d100      	bne.n	800324e <memmove+0x2a>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003256:	e7f7      	b.n	8003248 <memmove+0x24>

08003258 <_free_r>:
 8003258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800325a:	2900      	cmp	r1, #0
 800325c:	d048      	beq.n	80032f0 <_free_r+0x98>
 800325e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003262:	9001      	str	r0, [sp, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f1a1 0404 	sub.w	r4, r1, #4
 800326a:	bfb8      	it	lt
 800326c:	18e4      	addlt	r4, r4, r3
 800326e:	f000 f8d3 	bl	8003418 <__malloc_lock>
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <_free_r+0x9c>)
 8003274:	9801      	ldr	r0, [sp, #4]
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	4615      	mov	r5, r2
 800327a:	b933      	cbnz	r3, 800328a <_free_r+0x32>
 800327c:	6063      	str	r3, [r4, #4]
 800327e:	6014      	str	r4, [r2, #0]
 8003280:	b003      	add	sp, #12
 8003282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003286:	f000 b8cd 	b.w	8003424 <__malloc_unlock>
 800328a:	42a3      	cmp	r3, r4
 800328c:	d90b      	bls.n	80032a6 <_free_r+0x4e>
 800328e:	6821      	ldr	r1, [r4, #0]
 8003290:	1862      	adds	r2, r4, r1
 8003292:	4293      	cmp	r3, r2
 8003294:	bf04      	itt	eq
 8003296:	681a      	ldreq	r2, [r3, #0]
 8003298:	685b      	ldreq	r3, [r3, #4]
 800329a:	6063      	str	r3, [r4, #4]
 800329c:	bf04      	itt	eq
 800329e:	1852      	addeq	r2, r2, r1
 80032a0:	6022      	streq	r2, [r4, #0]
 80032a2:	602c      	str	r4, [r5, #0]
 80032a4:	e7ec      	b.n	8003280 <_free_r+0x28>
 80032a6:	461a      	mov	r2, r3
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b10b      	cbz	r3, 80032b0 <_free_r+0x58>
 80032ac:	42a3      	cmp	r3, r4
 80032ae:	d9fa      	bls.n	80032a6 <_free_r+0x4e>
 80032b0:	6811      	ldr	r1, [r2, #0]
 80032b2:	1855      	adds	r5, r2, r1
 80032b4:	42a5      	cmp	r5, r4
 80032b6:	d10b      	bne.n	80032d0 <_free_r+0x78>
 80032b8:	6824      	ldr	r4, [r4, #0]
 80032ba:	4421      	add	r1, r4
 80032bc:	1854      	adds	r4, r2, r1
 80032be:	42a3      	cmp	r3, r4
 80032c0:	6011      	str	r1, [r2, #0]
 80032c2:	d1dd      	bne.n	8003280 <_free_r+0x28>
 80032c4:	681c      	ldr	r4, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	6053      	str	r3, [r2, #4]
 80032ca:	4421      	add	r1, r4
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	e7d7      	b.n	8003280 <_free_r+0x28>
 80032d0:	d902      	bls.n	80032d8 <_free_r+0x80>
 80032d2:	230c      	movs	r3, #12
 80032d4:	6003      	str	r3, [r0, #0]
 80032d6:	e7d3      	b.n	8003280 <_free_r+0x28>
 80032d8:	6825      	ldr	r5, [r4, #0]
 80032da:	1961      	adds	r1, r4, r5
 80032dc:	428b      	cmp	r3, r1
 80032de:	bf04      	itt	eq
 80032e0:	6819      	ldreq	r1, [r3, #0]
 80032e2:	685b      	ldreq	r3, [r3, #4]
 80032e4:	6063      	str	r3, [r4, #4]
 80032e6:	bf04      	itt	eq
 80032e8:	1949      	addeq	r1, r1, r5
 80032ea:	6021      	streq	r1, [r4, #0]
 80032ec:	6054      	str	r4, [r2, #4]
 80032ee:	e7c7      	b.n	8003280 <_free_r+0x28>
 80032f0:	b003      	add	sp, #12
 80032f2:	bd30      	pop	{r4, r5, pc}
 80032f4:	20000090 	.word	0x20000090

080032f8 <_malloc_r>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	1ccd      	adds	r5, r1, #3
 80032fc:	f025 0503 	bic.w	r5, r5, #3
 8003300:	3508      	adds	r5, #8
 8003302:	2d0c      	cmp	r5, #12
 8003304:	bf38      	it	cc
 8003306:	250c      	movcc	r5, #12
 8003308:	2d00      	cmp	r5, #0
 800330a:	4606      	mov	r6, r0
 800330c:	db01      	blt.n	8003312 <_malloc_r+0x1a>
 800330e:	42a9      	cmp	r1, r5
 8003310:	d903      	bls.n	800331a <_malloc_r+0x22>
 8003312:	230c      	movs	r3, #12
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	2000      	movs	r0, #0
 8003318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331a:	f000 f87d 	bl	8003418 <__malloc_lock>
 800331e:	4921      	ldr	r1, [pc, #132]	; (80033a4 <_malloc_r+0xac>)
 8003320:	680a      	ldr	r2, [r1, #0]
 8003322:	4614      	mov	r4, r2
 8003324:	b99c      	cbnz	r4, 800334e <_malloc_r+0x56>
 8003326:	4f20      	ldr	r7, [pc, #128]	; (80033a8 <_malloc_r+0xb0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b923      	cbnz	r3, 8003336 <_malloc_r+0x3e>
 800332c:	4621      	mov	r1, r4
 800332e:	4630      	mov	r0, r6
 8003330:	f000 f862 	bl	80033f8 <_sbrk_r>
 8003334:	6038      	str	r0, [r7, #0]
 8003336:	4629      	mov	r1, r5
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f85d 	bl	80033f8 <_sbrk_r>
 800333e:	1c43      	adds	r3, r0, #1
 8003340:	d123      	bne.n	800338a <_malloc_r+0x92>
 8003342:	230c      	movs	r3, #12
 8003344:	6033      	str	r3, [r6, #0]
 8003346:	4630      	mov	r0, r6
 8003348:	f000 f86c 	bl	8003424 <__malloc_unlock>
 800334c:	e7e3      	b.n	8003316 <_malloc_r+0x1e>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	1b5b      	subs	r3, r3, r5
 8003352:	d417      	bmi.n	8003384 <_malloc_r+0x8c>
 8003354:	2b0b      	cmp	r3, #11
 8003356:	d903      	bls.n	8003360 <_malloc_r+0x68>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	441c      	add	r4, r3
 800335c:	6025      	str	r5, [r4, #0]
 800335e:	e004      	b.n	800336a <_malloc_r+0x72>
 8003360:	6863      	ldr	r3, [r4, #4]
 8003362:	42a2      	cmp	r2, r4
 8003364:	bf0c      	ite	eq
 8003366:	600b      	streq	r3, [r1, #0]
 8003368:	6053      	strne	r3, [r2, #4]
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f85a 	bl	8003424 <__malloc_unlock>
 8003370:	f104 000b 	add.w	r0, r4, #11
 8003374:	1d23      	adds	r3, r4, #4
 8003376:	f020 0007 	bic.w	r0, r0, #7
 800337a:	1ac2      	subs	r2, r0, r3
 800337c:	d0cc      	beq.n	8003318 <_malloc_r+0x20>
 800337e:	1a1b      	subs	r3, r3, r0
 8003380:	50a3      	str	r3, [r4, r2]
 8003382:	e7c9      	b.n	8003318 <_malloc_r+0x20>
 8003384:	4622      	mov	r2, r4
 8003386:	6864      	ldr	r4, [r4, #4]
 8003388:	e7cc      	b.n	8003324 <_malloc_r+0x2c>
 800338a:	1cc4      	adds	r4, r0, #3
 800338c:	f024 0403 	bic.w	r4, r4, #3
 8003390:	42a0      	cmp	r0, r4
 8003392:	d0e3      	beq.n	800335c <_malloc_r+0x64>
 8003394:	1a21      	subs	r1, r4, r0
 8003396:	4630      	mov	r0, r6
 8003398:	f000 f82e 	bl	80033f8 <_sbrk_r>
 800339c:	3001      	adds	r0, #1
 800339e:	d1dd      	bne.n	800335c <_malloc_r+0x64>
 80033a0:	e7cf      	b.n	8003342 <_malloc_r+0x4a>
 80033a2:	bf00      	nop
 80033a4:	20000090 	.word	0x20000090
 80033a8:	20000094 	.word	0x20000094

080033ac <_realloc_r>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	4607      	mov	r7, r0
 80033b0:	4614      	mov	r4, r2
 80033b2:	460e      	mov	r6, r1
 80033b4:	b921      	cbnz	r1, 80033c0 <_realloc_r+0x14>
 80033b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033ba:	4611      	mov	r1, r2
 80033bc:	f7ff bf9c 	b.w	80032f8 <_malloc_r>
 80033c0:	b922      	cbnz	r2, 80033cc <_realloc_r+0x20>
 80033c2:	f7ff ff49 	bl	8003258 <_free_r>
 80033c6:	4625      	mov	r5, r4
 80033c8:	4628      	mov	r0, r5
 80033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033cc:	f000 f830 	bl	8003430 <_malloc_usable_size_r>
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d20f      	bcs.n	80033f4 <_realloc_r+0x48>
 80033d4:	4621      	mov	r1, r4
 80033d6:	4638      	mov	r0, r7
 80033d8:	f7ff ff8e 	bl	80032f8 <_malloc_r>
 80033dc:	4605      	mov	r5, r0
 80033de:	2800      	cmp	r0, #0
 80033e0:	d0f2      	beq.n	80033c8 <_realloc_r+0x1c>
 80033e2:	4631      	mov	r1, r6
 80033e4:	4622      	mov	r2, r4
 80033e6:	f7ff ff0f 	bl	8003208 <memcpy>
 80033ea:	4631      	mov	r1, r6
 80033ec:	4638      	mov	r0, r7
 80033ee:	f7ff ff33 	bl	8003258 <_free_r>
 80033f2:	e7e9      	b.n	80033c8 <_realloc_r+0x1c>
 80033f4:	4635      	mov	r5, r6
 80033f6:	e7e7      	b.n	80033c8 <_realloc_r+0x1c>

080033f8 <_sbrk_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4d06      	ldr	r5, [pc, #24]	; (8003414 <_sbrk_r+0x1c>)
 80033fc:	2300      	movs	r3, #0
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f7fd fbac 	bl	8000b60 <_sbrk>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_sbrk_r+0x1a>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_sbrk_r+0x1a>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	20000100 	.word	0x20000100

08003418 <__malloc_lock>:
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <__malloc_lock+0x8>)
 800341a:	f000 b811 	b.w	8003440 <__retarget_lock_acquire_recursive>
 800341e:	bf00      	nop
 8003420:	20000108 	.word	0x20000108

08003424 <__malloc_unlock>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__malloc_unlock+0x8>)
 8003426:	f000 b80c 	b.w	8003442 <__retarget_lock_release_recursive>
 800342a:	bf00      	nop
 800342c:	20000108 	.word	0x20000108

08003430 <_malloc_usable_size_r>:
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f18      	subs	r0, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfbc      	itt	lt
 800343a:	580b      	ldrlt	r3, [r1, r0]
 800343c:	18c0      	addlt	r0, r0, r3
 800343e:	4770      	bx	lr

08003440 <__retarget_lock_acquire_recursive>:
 8003440:	4770      	bx	lr

08003442 <__retarget_lock_release_recursive>:
 8003442:	4770      	bx	lr

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
