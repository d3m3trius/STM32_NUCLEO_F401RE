
Simple_Regression_ML_Model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08007d60  08007d60  00017d60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800837c  0800837c  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  0800837c  0800837c  0001837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008384  08008384  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008388  08008388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800838c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000404  08008790  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  200005c0  08008790  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f43b  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e4  00000000  00000000  0002f86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00032808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001851c  00000000  00000000  000333e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e03b  00000000  00000000  0004b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098044  00000000  00000000  00059937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  000f197b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047bc  00000000  00000000  000f1a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000f6208  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000f62d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000404 	.word	0x20000404
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d44 	.word	0x08007d44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000408 	.word	0x20000408
 80001dc:	08007d44 	.word	0x08007d44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 fae6 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f810 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f906 	bl	80010cc <MX_GPIO_Init>
  MX_CRC_Init();
 8000ec0:	f000 f878 	bl	8000fb4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000ec4:	f000 f8d8 	bl	8001078 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ec8:	f000 f888 	bl	8000fdc <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 8000ecc:	f002 fb68 	bl	80035a0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2); // Timer 2 start command
 8000ed0:	4801      	ldr	r0, [pc, #4]	; (8000ed8 <main+0x28>)
 8000ed2:	f001 fad9 	bl	8002488 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <main+0x26>
 8000ed8:	20000520 	.word	0x20000520

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 ffd4 	bl	8004e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <SystemClock_Config+0xd0>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a28      	ldr	r2, [pc, #160]	; (8000fac <SystemClock_Config+0xd0>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <SystemClock_Config+0xd0>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f28:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f50:	2310      	movs	r3, #16
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fdca 	bl	8001b00 <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f72:	f000 f91b 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 f82c 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f9e:	f000 f905 	bl	80011ac <Error_Handler>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3750      	adds	r7, #80	; 0x50
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_CRC_Init+0x20>)
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <MX_CRC_Init+0x24>)
 8000fbc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_CRC_Init+0x20>)
 8000fc0:	f000 fbe3 	bl	800178a <HAL_CRC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000fca:	f000 f8ef 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000518 	.word	0x20000518
 8000fd8:	40023000 	.word	0x40023000

08000fdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_TIM2_Init+0x98>)
 8000ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_TIM2_Init+0x98>)
 8001002:	f242 720f 	movw	r2, #9999	; 0x270f
 8001006:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_TIM2_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_TIM2_Init+0x98>)
 8001010:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001014:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_TIM2_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_TIM2_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001022:	4814      	ldr	r0, [pc, #80]	; (8001074 <MX_TIM2_Init+0x98>)
 8001024:	f001 f9e0 	bl	80023e8 <HAL_TIM_Base_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800102e:	f000 f8bd 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_TIM2_Init+0x98>)
 8001040:	f001 fbbb 	bl	80027ba <HAL_TIM_ConfigClockSource>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800104a:	f000 f8af 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <MX_TIM2_Init+0x98>)
 800105c:	f001 fdbe 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001066:	f000 f8a1 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000520 	.word	0x20000520

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_USART2_UART_Init+0x50>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010b0:	f001 fe16 	bl	8002ce0 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ba:	f000 f877 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000568 	.word	0x20000568
 80010c8:	40004400 	.word	0x40004400

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MX_GPIO_Init+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a2c      	ldr	r2, [pc, #176]	; (800119c <MX_GPIO_Init+0xd0>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <MX_GPIO_Init+0xd0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <MX_GPIO_Init+0xd0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a25      	ldr	r2, [pc, #148]	; (800119c <MX_GPIO_Init+0xd0>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MX_GPIO_Init+0xd0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_GPIO_Init+0xd0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_GPIO_Init+0xd0>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_GPIO_Init+0xd0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_GPIO_Init+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <MX_GPIO_Init+0xd0>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_GPIO_Init+0xd0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2120      	movs	r1, #32
 8001156:	4812      	ldr	r0, [pc, #72]	; (80011a0 <MX_GPIO_Init+0xd4>)
 8001158:	f000 fcb8 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_GPIO_Init+0xd8>)
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_GPIO_Init+0xdc>)
 8001172:	f000 fb27 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001176:	2320      	movs	r3, #32
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_GPIO_Init+0xd4>)
 800118e:	f000 fb19 	bl	80017c4 <HAL_GPIO_Init>

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	10210000 	.word	0x10210000
 80011a8:	40020800 	.word	0x40020800

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x4c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011f6:	2007      	movs	r0, #7
 80011f8:	f000 fa86 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <HAL_CRC_MspInit+0x3c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10d      	bne.n	8001236 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_CRC_MspInit+0x40>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_CRC_MspInit+0x40>)
 8001224:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_CRC_MspInit+0x40>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023000 	.word	0x40023000
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800125c:	d115      	bne.n	800128a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_TIM_Base_MspInit+0x48>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <HAL_TIM_Base_MspInit+0x48>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_TIM_Base_MspInit+0x48>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	201c      	movs	r0, #28
 8001280:	f000 fa4d 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001284:	201c      	movs	r0, #28
 8001286:	f000 fa66 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_UART_MspInit+0x84>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12b      	bne.n	8001312 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_UART_MspInit+0x88>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_UART_MspInit+0x88>)
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_UART_MspInit+0x88>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_UART_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <HAL_UART_MspInit+0x88>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_UART_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f2:	230c      	movs	r3, #12
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001302:	2307      	movs	r3, #7
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_UART_MspInit+0x8c>)
 800130e:	f000 fa59 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40004400 	.word	0x40004400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f8d8 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	HAL_TIM_Base_Stop_IT(&htim2); // Timer 2 stop command
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <TIM2_IRQHandler+0x20>)
 8001382:	f001 f8e3 	bl	800254c <HAL_TIM_Base_Stop_IT>
	MX_X_CUBE_AI_Process();
 8001386:	f002 f91d 	bl	80035c4 <MX_X_CUBE_AI_Process>
	HAL_TIM_Base_Start_IT(&htim2); // Timer 2 start command
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <TIM2_IRQHandler+0x20>)
 800138c:	f001 f87c 	bl	8002488 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <TIM2_IRQHandler+0x20>)
 8001392:	f001 f90a 	bl	80025aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000520 	.word	0x20000520

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f003 fd22 	bl	8004e18 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20018000 	.word	0x20018000
 8001400:	00001000 	.word	0x00001000
 8001404:	20000420 	.word	0x20000420
 8001408:	200005c0 	.word	0x200005c0

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001436:	490e      	ldr	r1, [pc, #56]	; (8001470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800144c:	4c0b      	ldr	r4, [pc, #44]	; (800147c <LoopFillZerobss+0x26>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145a:	f7ff ffd7 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f003 fce1 	bl	8004e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff fd25 	bl	8000eb0 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001468:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8001474:	0800838c 	.word	0x0800838c
  ldr r2, =_sbss
 8001478:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 800147c:	200005c0 	.word	0x200005c0

08001480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_Init+0x40>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_Init+0x40>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x40>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f92b 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fe7e 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f943 	bl	8001772 <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f000 f90b 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000000 	.word	0x20000000
 8001520:	20000008 	.word	0x20000008
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	200005ac 	.word	0x200005ac

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200005ac 	.word	0x200005ac

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff3e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff8e 	bl	800165c <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff31 	bl	80015cc <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e00e      	b.n	80017ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fd2b 	bl	8001208 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e159      	b.n	8001a94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8148 	bne.w	8001a8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d005      	beq.n	8001816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	2b02      	cmp	r3, #2
 8001814:	d130      	bne.n	8001878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 0201 	and.w	r2, r3, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b03      	cmp	r3, #3
 8001882:	d017      	beq.n	80018b4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	69b9      	ldr	r1, [r7, #24]
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a2 	beq.w	8001a8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a56      	ldr	r2, [pc, #344]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b54      	ldr	r3, [pc, #336]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001966:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_GPIO_Init+0x2ec>)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_GPIO_Init+0x202>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x1fe>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a47      	ldr	r2, [pc, #284]	; (8001abc <HAL_GPIO_Init+0x2f8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x1fa>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a46      	ldr	r2, [pc, #280]	; (8001ac0 <HAL_GPIO_Init+0x2fc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x1f6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a45      	ldr	r2, [pc, #276]	; (8001ac4 <HAL_GPIO_Init+0x300>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x1f2>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e008      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e004      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019be:	2302      	movs	r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c6:	2300      	movs	r3, #0
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f002 0203 	and.w	r2, r2, #3
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	4093      	lsls	r3, r2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d8:	4935      	ldr	r1, [pc, #212]	; (8001ab0 <HAL_GPIO_Init+0x2ec>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a34:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	f67f aea2 	bls.w	80017e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e264      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d075      	beq.n	8001c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	4ba3      	ldr	r3, [pc, #652]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d00c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2a:	4ba0      	ldr	r3, [pc, #640]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b36:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d10b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	4b99      	ldr	r3, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e23f      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x74>
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a90      	ldr	r2, [pc, #576]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a8a      	ldr	r2, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b88      	ldr	r3, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b98:	4b84      	ldr	r3, [pc, #528]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a83      	ldr	r2, [pc, #524]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a80      	ldr	r2, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fcca 	bl	8001550 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fcc6 	bl	8001550 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e204      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fcb6 	bl	8001550 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fcb2 	bl	8001550 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1f0      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b6c      	ldr	r3, [pc, #432]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2e:	4b5f      	ldr	r3, [pc, #380]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1c4      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4952      	ldr	r1, [pc, #328]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_RCC_OscConfig+0x2b0>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff fc6b 	bl	8001550 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fc67 	bl	8001550 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1a5      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4940      	ldr	r1, [pc, #256]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x2b0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc4a 	bl	8001550 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc46 	bl	8001550 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e184      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d030      	beq.n	8001d4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x2b4>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fc2a 	bl	8001550 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc26 	bl	8001550 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e164      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x200>
 8001d1e:	e015      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_OscConfig+0x2b4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fc13 	bl	8001550 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fc0f 	bl	8001550 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e14d      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a0 	beq.w	8001e9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x2b8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_RCC_OscConfig+0x2b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_RCC_OscConfig+0x2b8>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fbd5 	bl	8001550 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	e011      	b.n	8001dce <HAL_RCC_OscConfig+0x2ce>
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	42470000 	.word	0x42470000
 8001db4:	42470e80 	.word	0x42470e80
 8001db8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbc:	f7ff fbc8 	bl	8001550 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e106      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b85      	ldr	r3, [pc, #532]	; (8001fe4 <HAL_RCC_OscConfig+0x4e4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
 8001de2:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a80      	ldr	r2, [pc, #512]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	e01c      	b.n	8001e2a <HAL_RCC_OscConfig+0x32a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d10c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x312>
 8001df8:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a77      	ldr	r2, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	e00b      	b.n	8001e2a <HAL_RCC_OscConfig+0x32a>
 8001e12:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a74      	ldr	r2, [pc, #464]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a71      	ldr	r2, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff fb8d 	bl	8001550 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fb89 	bl	8001550 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0c5      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RCC_OscConfig+0x33a>
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fb77 	bl	8001550 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fb73 	bl	8001550 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0af      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ee      	bne.n	8001e66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a55      	ldr	r2, [pc, #340]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 809b 	beq.w	8001fda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea4:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d05c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d141      	bne.n	8001f3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <HAL_RCC_OscConfig+0x4ec>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fb47 	bl	8001550 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff fb43 	bl	8001550 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e081      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed8:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	019b      	lsls	r3, r3, #6
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	061b      	lsls	r3, r3, #24
 8001f08:	4937      	ldr	r1, [pc, #220]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_RCC_OscConfig+0x4ec>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fb1c 	bl	8001550 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fb18 	bl	8001550 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e056      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x41c>
 8001f3a:	e04e      	b.n	8001fda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_OscConfig+0x4ec>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff fb05 	bl	8001550 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff fb01 	bl	8001550 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e03f      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x44a>
 8001f68:	e037      	b.n	8001fda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e032      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d028      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d121      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d11a      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d111      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	42470060 	.word	0x42470060

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d90c      	bls.n	800202c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e067      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7ff fa36 	bl	8001550 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7ff fa32 	bl	8001550 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20c      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f996 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	08007f4c 	.word	0x08007f4c
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	2300      	movs	r3, #0
 80021ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d00d      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f200 80bd 	bhi.w	8002360 <HAL_RCC_GetSysClockFreq+0x1a4>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e0b7      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b61      	ldr	r3, [pc, #388]	; (8002378 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021f2:	60bb      	str	r3, [r7, #8]
       break;
 80021f4:	e0b7      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b61      	ldr	r3, [pc, #388]	; (800237c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021f8:	60bb      	str	r3, [r7, #8]
      break;
 80021fa:	e0b4      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d04d      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b58      	ldr	r3, [pc, #352]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	461a      	mov	r2, r3
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	ea02 0800 	and.w	r8, r2, r0
 800222a:	ea03 0901 	and.w	r9, r3, r1
 800222e:	4640      	mov	r0, r8
 8002230:	4649      	mov	r1, r9
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	014b      	lsls	r3, r1, #5
 800223c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002240:	0142      	lsls	r2, r0, #5
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	ebb0 0008 	subs.w	r0, r0, r8
 800224a:	eb61 0109 	sbc.w	r1, r1, r9
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	018b      	lsls	r3, r1, #6
 8002258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800225c:	0182      	lsls	r2, r0, #6
 800225e:	1a12      	subs	r2, r2, r0
 8002260:	eb63 0301 	sbc.w	r3, r3, r1
 8002264:	f04f 0000 	mov.w	r0, #0
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	00d9      	lsls	r1, r3, #3
 800226e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002272:	00d0      	lsls	r0, r2, #3
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	eb12 0208 	adds.w	r2, r2, r8
 800227c:	eb43 0309 	adc.w	r3, r3, r9
 8002280:	f04f 0000 	mov.w	r0, #0
 8002284:	f04f 0100 	mov.w	r1, #0
 8002288:	0259      	lsls	r1, r3, #9
 800228a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800228e:	0250      	lsls	r0, r2, #9
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	461a      	mov	r2, r3
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f7fe fc8a 	bl	8000bb8 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e04a      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	461a      	mov	r2, r3
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	ea02 0400 	and.w	r4, r2, r0
 80022c6:	ea03 0501 	and.w	r5, r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	014b      	lsls	r3, r1, #5
 80022d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022dc:	0142      	lsls	r2, r0, #5
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	1b00      	subs	r0, r0, r4
 80022e4:	eb61 0105 	sbc.w	r1, r1, r5
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	018b      	lsls	r3, r1, #6
 80022f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022f6:	0182      	lsls	r2, r0, #6
 80022f8:	1a12      	subs	r2, r2, r0
 80022fa:	eb63 0301 	sbc.w	r3, r3, r1
 80022fe:	f04f 0000 	mov.w	r0, #0
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	00d9      	lsls	r1, r3, #3
 8002308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800230c:	00d0      	lsls	r0, r2, #3
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	1912      	adds	r2, r2, r4
 8002314:	eb45 0303 	adc.w	r3, r5, r3
 8002318:	f04f 0000 	mov.w	r0, #0
 800231c:	f04f 0100 	mov.w	r1, #0
 8002320:	0299      	lsls	r1, r3, #10
 8002322:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002326:	0290      	lsls	r0, r2, #10
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	461a      	mov	r2, r3
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	f7fe fc3e 	bl	8000bb8 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4613      	mov	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	60bb      	str	r3, [r7, #8]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002362:	60bb      	str	r3, [r7, #8]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	68bb      	ldr	r3, [r7, #8]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	00f42400 	.word	0x00f42400
 800237c:	007a1200 	.word	0x007a1200

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800239c:	f7ff fff0 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08007f5c 	.word	0x08007f5c

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c4:	f7ff ffdc 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0b5b      	lsrs	r3, r3, #13
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4903      	ldr	r1, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	08007f5c 	.word	0x08007f5c

080023e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e041      	b.n	800247e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe ff1c 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3304      	adds	r3, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4610      	mov	r0, r2
 8002428:	f000 fabe 	bl	80029a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d001      	beq.n	80024a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e044      	b.n	800252a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_TIM_Base_Start_IT+0xb0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d018      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x6c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ca:	d013      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x6c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_TIM_Base_Start_IT+0xb4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00e      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x6c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_TIM_Base_Start_IT+0xb8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d009      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x6c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_TIM_Base_Start_IT+0xbc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x6c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_TIM_Base_Start_IT+0xc0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d111      	bne.n	8002518 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b06      	cmp	r3, #6
 8002504:	d010      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	e007      	b.n	8002528 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40010000 	.word	0x40010000
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800
 8002544:	40000c00 	.word	0x40000c00
 8002548:	40014000 	.word	0x40014000

0800254c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a1a      	ldr	r2, [r3, #32]
 800256a:	f241 1311 	movw	r3, #4369	; 0x1111
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_TIM_Base_Stop_IT+0x48>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a1a      	ldr	r2, [r3, #32]
 800257a:	f240 4344 	movw	r3, #1092	; 0x444
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_TIM_Base_Stop_IT+0x48>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d122      	bne.n	8002606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d11b      	bne.n	8002606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0202 	mvn.w	r2, #2
 80025d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f9bc 	bl	800296a <HAL_TIM_IC_CaptureCallback>
 80025f2:	e005      	b.n	8002600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f9ae 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f9bf 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d122      	bne.n	800265a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d11b      	bne.n	800265a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f06f 0204 	mvn.w	r2, #4
 800262a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f992 	bl	800296a <HAL_TIM_IC_CaptureCallback>
 8002646:	e005      	b.n	8002654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f984 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f995 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b08      	cmp	r3, #8
 8002666:	d122      	bne.n	80026ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d11b      	bne.n	80026ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0208 	mvn.w	r2, #8
 800267e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2204      	movs	r2, #4
 8002684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f968 	bl	800296a <HAL_TIM_IC_CaptureCallback>
 800269a:	e005      	b.n	80026a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f95a 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f96b 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d122      	bne.n	8002702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d11b      	bne.n	8002702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0210 	mvn.w	r2, #16
 80026d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2208      	movs	r2, #8
 80026d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f93e 	bl	800296a <HAL_TIM_IC_CaptureCallback>
 80026ee:	e005      	b.n	80026fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f930 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f941 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10e      	bne.n	800272e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f06f 0201 	mvn.w	r2, #1
 8002726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f90a 	bl	8002942 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	d10e      	bne.n	800275a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d107      	bne.n	800275a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fab9 	bl	8002ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d10e      	bne.n	8002786 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d107      	bne.n	8002786 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800277e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f906 	bl	8002992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d10e      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d107      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f06f 0220 	mvn.w	r2, #32
 80027aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa83 	bl	8002cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_ConfigClockSource+0x18>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0b3      	b.n	800293a <HAL_TIM_ConfigClockSource+0x180>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280a:	d03e      	beq.n	800288a <HAL_TIM_ConfigClockSource+0xd0>
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002810:	f200 8087 	bhi.w	8002922 <HAL_TIM_ConfigClockSource+0x168>
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002818:	f000 8085 	beq.w	8002926 <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d87f      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
 8002822:	2b70      	cmp	r3, #112	; 0x70
 8002824:	d01a      	beq.n	800285c <HAL_TIM_ConfigClockSource+0xa2>
 8002826:	2b70      	cmp	r3, #112	; 0x70
 8002828:	d87b      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
 800282a:	2b60      	cmp	r3, #96	; 0x60
 800282c:	d050      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0x116>
 800282e:	2b60      	cmp	r3, #96	; 0x60
 8002830:	d877      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
 8002832:	2b50      	cmp	r3, #80	; 0x50
 8002834:	d03c      	beq.n	80028b0 <HAL_TIM_ConfigClockSource+0xf6>
 8002836:	2b50      	cmp	r3, #80	; 0x50
 8002838:	d873      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d058      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0x136>
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d86f      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
 8002842:	2b30      	cmp	r3, #48	; 0x30
 8002844:	d064      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x156>
 8002846:	2b30      	cmp	r3, #48	; 0x30
 8002848:	d86b      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
 800284a:	2b20      	cmp	r3, #32
 800284c:	d060      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x156>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d867      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d05c      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x156>
 8002856:	2b10      	cmp	r3, #16
 8002858:	d05a      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800285a:	e062      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f000 f996 	bl	8002b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800287e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
      break;
 8002888:	e04e      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f000 f97f 	bl	8002b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ac:	609a      	str	r2, [r3, #8]
      break;
 80028ae:	e03b      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	461a      	mov	r2, r3
 80028be:	f000 f8f3 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2150      	movs	r1, #80	; 0x50
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f94c 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80028ce:	e02b      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	461a      	mov	r2, r3
 80028de:	f000 f912 	bl	8002b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2160      	movs	r1, #96	; 0x60
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f93c 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80028ee:	e01b      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f000 f8d3 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f92c 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 800290e:	e00b      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4619      	mov	r1, r3
 800291a:	4610      	mov	r0, r2
 800291c:	f000 f923 	bl	8002b66 <TIM_ITRx_SetConfig>
        break;
 8002920:	e002      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <TIM_Base_SetConfig+0xe4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00f      	beq.n	80029e0 <TIM_Base_SetConfig+0x38>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c6:	d00b      	beq.n	80029e0 <TIM_Base_SetConfig+0x38>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a31      	ldr	r2, [pc, #196]	; (8002a90 <TIM_Base_SetConfig+0xe8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <TIM_Base_SetConfig+0xec>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_Base_SetConfig+0x38>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a2f      	ldr	r2, [pc, #188]	; (8002a98 <TIM_Base_SetConfig+0xf0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d108      	bne.n	80029f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <TIM_Base_SetConfig+0xe4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01b      	beq.n	8002a32 <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d017      	beq.n	8002a32 <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <TIM_Base_SetConfig+0xe8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <TIM_Base_SetConfig+0xec>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00f      	beq.n	8002a32 <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <TIM_Base_SetConfig+0xf0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00b      	beq.n	8002a32 <TIM_Base_SetConfig+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <TIM_Base_SetConfig+0xf4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <TIM_Base_SetConfig+0x8a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <TIM_Base_SetConfig+0xf8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <TIM_Base_SetConfig+0xfc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d108      	bne.n	8002a44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <TIM_Base_SetConfig+0xe4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	615a      	str	r2, [r3, #20]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	40014800 	.word	0x40014800

08002aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 030a 	bic.w	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0210 	bic.w	r2, r3, #16
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	031b      	lsls	r3, r3, #12
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e050      	b.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d018      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d013      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a16      	ldr	r2, [pc, #88]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10c      	bne.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40014000 	.word	0x40014000

08002cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e03f      	b.n	8002d72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe fac6 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f905 	bl	8002f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b08a      	sub	sp, #40	; 0x28
 8002d7e:	af02      	add	r7, sp, #8
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d17c      	bne.n	8002e94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_UART_Transmit+0x2c>
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e075      	b.n	8002e96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Transmit+0x3e>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e06e      	b.n	8002e96 <HAL_UART_Transmit+0x11c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2221      	movs	r2, #33	; 0x21
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dce:	f7fe fbbf 	bl	8001550 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d108      	bne.n	8002dfc <HAL_UART_Transmit+0x82>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e0c:	e02a      	b.n	8002e64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f840 	bl	8002e9e <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e036      	b.n	8002e96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3302      	adds	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	e007      	b.n	8002e56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1cf      	bne.n	8002e0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2140      	movs	r1, #64	; 0x40
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f810 	bl	8002e9e <UART_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e006      	b.n	8002e96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eae:	e02c      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb6:	d028      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0x30>
 8002ebe:	f7fe fb47 	bl	8001550 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d21d      	bcs.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002edc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e00f      	b.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d0c3      	beq.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f38:	b09f      	sub	sp, #124	; 0x7c
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	ea40 0301 	orr.w	r3, r0, r1
 8002f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f78:	f021 010c 	bic.w	r1, r1, #12
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	6999      	ldr	r1, [r3, #24]
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	ea40 0301 	orr.w	r3, r0, r1
 8002f9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4bc5      	ldr	r3, [pc, #788]	; (80032b8 <UART_SetConfig+0x384>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d004      	beq.n	8002fb2 <UART_SetConfig+0x7e>
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4bc3      	ldr	r3, [pc, #780]	; (80032bc <UART_SetConfig+0x388>)
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d103      	bne.n	8002fba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb2:	f7ff fa05 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002fb6:	6778      	str	r0, [r7, #116]	; 0x74
 8002fb8:	e002      	b.n	8002fc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7ff f9ed 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8002fbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc8:	f040 80b6 	bne.w	8003138 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fce:	461c      	mov	r4, r3
 8002fd0:	f04f 0500 	mov.w	r5, #0
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	6439      	str	r1, [r7, #64]	; 0x40
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe4:	1912      	adds	r2, r2, r4
 8002fe6:	eb45 0303 	adc.w	r3, r5, r3
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	00d9      	lsls	r1, r3, #3
 8002ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ff8:	00d0      	lsls	r0, r2, #3
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	1911      	adds	r1, r2, r4
 8003000:	6639      	str	r1, [r7, #96]	; 0x60
 8003002:	416b      	adcs	r3, r5
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	1891      	adds	r1, r2, r2
 8003012:	63b9      	str	r1, [r7, #56]	; 0x38
 8003014:	415b      	adcs	r3, r3
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800301c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003020:	f7fd fdca 	bl	8000bb8 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <UART_SetConfig+0x38c>)
 800302a:	fba3 2302 	umull	r2, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	011e      	lsls	r6, r3, #4
 8003032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003034:	461c      	mov	r4, r3
 8003036:	f04f 0500 	mov.w	r5, #0
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	1891      	adds	r1, r2, r2
 8003040:	6339      	str	r1, [r7, #48]	; 0x30
 8003042:	415b      	adcs	r3, r3
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800304a:	1912      	adds	r2, r2, r4
 800304c:	eb45 0303 	adc.w	r3, r5, r3
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	00d9      	lsls	r1, r3, #3
 800305a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800305e:	00d0      	lsls	r0, r2, #3
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	1911      	adds	r1, r2, r4
 8003066:	65b9      	str	r1, [r7, #88]	; 0x58
 8003068:	416b      	adcs	r3, r5
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	461a      	mov	r2, r3
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	1891      	adds	r1, r2, r2
 8003078:	62b9      	str	r1, [r7, #40]	; 0x28
 800307a:	415b      	adcs	r3, r3
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003082:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003086:	f7fd fd97 	bl	8000bb8 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <UART_SetConfig+0x38c>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <UART_SetConfig+0x38c>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b0:	441e      	add	r6, r3
 80030b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b4:	4618      	mov	r0, r3
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	1894      	adds	r4, r2, r2
 80030c0:	623c      	str	r4, [r7, #32]
 80030c2:	415b      	adcs	r3, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ca:	1812      	adds	r2, r2, r0
 80030cc:	eb41 0303 	adc.w	r3, r1, r3
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	f04f 0500 	mov.w	r5, #0
 80030d8:	00dd      	lsls	r5, r3, #3
 80030da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030de:	00d4      	lsls	r4, r2, #3
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	1814      	adds	r4, r2, r0
 80030e6:	653c      	str	r4, [r7, #80]	; 0x50
 80030e8:	414b      	adcs	r3, r1
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	1891      	adds	r1, r2, r2
 80030f8:	61b9      	str	r1, [r7, #24]
 80030fa:	415b      	adcs	r3, r3
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003106:	f7fd fd57 	bl	8000bb8 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <UART_SetConfig+0x38c>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	3332      	adds	r3, #50	; 0x32
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <UART_SetConfig+0x38c>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4432      	add	r2, r6
 8003134:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003136:	e0b9      	b.n	80032ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313a:	461c      	mov	r4, r3
 800313c:	f04f 0500 	mov.w	r5, #0
 8003140:	4622      	mov	r2, r4
 8003142:	462b      	mov	r3, r5
 8003144:	1891      	adds	r1, r2, r2
 8003146:	6139      	str	r1, [r7, #16]
 8003148:	415b      	adcs	r3, r3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003150:	1912      	adds	r2, r2, r4
 8003152:	eb45 0303 	adc.w	r3, r5, r3
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	00d9      	lsls	r1, r3, #3
 8003160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003164:	00d0      	lsls	r0, r2, #3
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	eb12 0804 	adds.w	r8, r2, r4
 800316e:	eb43 0905 	adc.w	r9, r3, r5
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800318a:	0082      	lsls	r2, r0, #2
 800318c:	4640      	mov	r0, r8
 800318e:	4649      	mov	r1, r9
 8003190:	f7fd fd12 	bl	8000bb8 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <UART_SetConfig+0x38c>)
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	011e      	lsls	r6, r3, #4
 80031a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1894      	adds	r4, r2, r2
 80031b0:	60bc      	str	r4, [r7, #8]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ba:	1812      	adds	r2, r2, r0
 80031bc:	eb41 0303 	adc.w	r3, r1, r3
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	00dd      	lsls	r5, r3, #3
 80031ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ce:	00d4      	lsls	r4, r2, #3
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	1814      	adds	r4, r2, r0
 80031d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80031d8:	414b      	adcs	r3, r1
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031f4:	0082      	lsls	r2, r0, #2
 80031f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031fa:	f7fd fcdd 	bl	8000bb8 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <UART_SetConfig+0x38c>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	; 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <UART_SetConfig+0x38c>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003222:	441e      	add	r6, r3
 8003224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003226:	4618      	mov	r0, r3
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	1894      	adds	r4, r2, r2
 8003232:	603c      	str	r4, [r7, #0]
 8003234:	415b      	adcs	r3, r3
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323c:	1812      	adds	r2, r2, r0
 800323e:	eb41 0303 	adc.w	r3, r1, r3
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	f04f 0500 	mov.w	r5, #0
 800324a:	00dd      	lsls	r5, r3, #3
 800324c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003250:	00d4      	lsls	r4, r2, #3
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	eb12 0a00 	adds.w	sl, r2, r0
 800325a:	eb43 0b01 	adc.w	fp, r3, r1
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	008b      	lsls	r3, r1, #2
 8003272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003276:	0082      	lsls	r2, r0, #2
 8003278:	4650      	mov	r0, sl
 800327a:	4659      	mov	r1, fp
 800327c:	f7fd fc9c 	bl	8000bb8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <UART_SetConfig+0x38c>)
 8003286:	fba3 1302 	umull	r1, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2164      	movs	r1, #100	; 0x64
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <UART_SetConfig+0x38c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4432      	add	r2, r6
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	377c      	adds	r7, #124	; 0x7c
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f

080032c4 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80032d4:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80032d6:	461a      	mov	r2, r3
        err.type, err.code);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80032de:	6839      	ldr	r1, [r7, #0]
 80032e0:	4806      	ldr	r0, [pc, #24]	; (80032fc <ai_log_err+0x38>)
 80032e2:	f002 faf5 	bl	80058d0 <iprintf>
 80032e6:	e008      	b.n	80032fa <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80032e8:	793b      	ldrb	r3, [r7, #4]
 80032ea:	4619      	mov	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80032f2:	461a      	mov	r2, r3
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <ai_log_err+0x3c>)
 80032f6:	f002 faeb 	bl	80058d0 <iprintf>

  do {} while (1);
 80032fa:	e7fe      	b.n	80032fa <ai_log_err+0x36>
 80032fc:	08007d60 	.word	0x08007d60
 8003300:	08007d94 	.word	0x08007d94

08003304 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b090      	sub	sp, #64	; 0x40
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800330e:	2100      	movs	r1, #0
 8003310:	4837      	ldr	r0, [pc, #220]	; (80033f0 <ai_boostrap+0xec>)
 8003312:	f000 fa4b 	bl	80037ac <ai_network_create>
 8003316:	4603      	mov	r3, r0
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 800331a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 8003322:	4934      	ldr	r1, [pc, #208]	; (80033f4 <ai_boostrap+0xf0>)
 8003324:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003326:	f7ff ffcd 	bl	80032c4 <ai_log_err>
    return -1;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800332e:	e05a      	b.n	80033e6 <ai_boostrap+0xe2>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <ai_boostrap+0xf4>)
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	2301      	movs	r3, #1
 8003336:	823b      	strh	r3, [r7, #16]
 8003338:	2301      	movs	r3, #1
 800333a:	827b      	strh	r3, [r7, #18]
 800333c:	2301      	movs	r3, #1
 800333e:	82bb      	strh	r3, [r7, #20]
 8003340:	2310      	movs	r3, #16
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <ai_boostrap+0xf8>)
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	2301      	movs	r3, #1
 8003352:	853b      	strh	r3, [r7, #40]	; 0x28
 8003354:	2301      	movs	r3, #1
 8003356:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003358:	2301      	movs	r3, #1
 800335a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800335c:	2300      	movs	r3, #0
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
 8003364:	2300      	movs	r3, #0
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <ai_boostrap+0xec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f107 020c 	add.w	r2, r7, #12
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fa3c 	bl	80037f0 <ai_network_init>
 8003378:	4603      	mov	r3, r0
 800337a:	f083 0301 	eor.w	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00d      	beq.n	80033a0 <ai_boostrap+0x9c>
      err = ai_network_get_error(network);
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <ai_boostrap+0xec>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fa03 	bl	8003794 <ai_network_get_error>
 800338e:	4603      	mov	r3, r0
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8003392:	491b      	ldr	r1, [pc, #108]	; (8003400 <ai_boostrap+0xfc>)
 8003394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003396:	f7ff ff95 	bl	80032c4 <ai_log_err>
      return -1;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800339e:	e022      	b.n	80033e6 <ai_boostrap+0xe2>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <ai_boostrap+0xec>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4917      	ldr	r1, [pc, #92]	; (8003404 <ai_boostrap+0x100>)
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f998 	bl	80036dc <ai_network_get_info>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f083 0301 	eor.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d015      	beq.n	80033e4 <ai_boostrap+0xe0>
    err = ai_network_get_error(network);
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <ai_boostrap+0xec>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f9e9 	bl	8003794 <ai_network_get_error>
 80033c2:	4603      	mov	r3, r0
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 80033c6:	4910      	ldr	r1, [pc, #64]	; (8003408 <ai_boostrap+0x104>)
 80033c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033ca:	f7ff ff7b 	bl	80032c4 <ai_log_err>
    ai_network_destroy(network);
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <ai_boostrap+0xec>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa00 	bl	80037d8 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <ai_boostrap+0xec>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    return -3;
 80033de:	f06f 0302 	mvn.w	r3, #2
 80033e2:	e000      	b.n	80033e6 <ai_boostrap+0xe2>
  }

  return 0;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3740      	adds	r7, #64	; 0x40
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000424 	.word	0x20000424
 80033f4:	08007dc4 	.word	0x08007dc4
 80033f8:	40040440 	.word	0x40040440
 80033fc:	00040440 	.word	0x00040440
 8003400:	08007dd8 	.word	0x08007dd8
 8003404:	20000428 	.word	0x20000428
 8003408:	08007de8 	.word	0x08007de8

0800340c <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <ai_run+0x5c>)
 8003418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341a:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <ai_run+0x5c>)
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <ai_run+0x60>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	6979      	ldr	r1, [r7, #20]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fa0a 	bl	8003850 <ai_network_run>
 800343c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d00c      	beq.n	800345e <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <ai_run+0x60>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f9a3 	bl	8003794 <ai_network_get_error>
 800344e:	4603      	mov	r3, r0
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <ai_run+0x64>)
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff36 	bl	80032c4 <ai_log_err>
        "ai_network_run");
    return -1;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800345c:	e000      	b.n	8003460 <ai_run+0x54>
  }

  return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000428 	.word	0x20000428
 800346c:	20000424 	.word	0x20000424
 8003470:	08007e00 	.word	0x08007e00

08003474 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(void * data)
{
 8003474:	b480      	push	{r7}
 8003476:	b08b      	sub	sp, #44	; 0x2c
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
////	HAL_UART_Transmit(&huart2, "Inserisci il terzo valore:\n\r", 30, 1000);
////	HAL_UART_Receive(&huart2, buffer_rx, 1, 10000);
////	HAL_UART_Transmit(&huart2, buffer_rx,10, 1000);
////
//	((ai_float *)data)[2]= atof(buffer_rx)-MEAN_Y)/DEV_Y;
	float MEAN_X=0.1581481218178836;
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <acquire_and_process_data+0xa4>)
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
	float MEAN_Z=-0.18027871018076946;
 8003480:	4b26      	ldr	r3, [pc, #152]	; (800351c <acquire_and_process_data+0xa8>)
 8003482:	623b      	str	r3, [r7, #32]
	float MEAN_Y=0.2571446168580747;
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <acquire_and_process_data+0xac>)
 8003486:	61fb      	str	r3, [r7, #28]
	float DEV_X=0.8001959164042964;
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <acquire_and_process_data+0xb0>)
 800348a:	61bb      	str	r3, [r7, #24]
	float DEV_Z=0.3543268202160663;
 800348c:	4b26      	ldr	r3, [pc, #152]	; (8003528 <acquire_and_process_data+0xb4>)
 800348e:	617b      	str	r3, [r7, #20]
	float DEV_Y=0.2586219035470888;
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <acquire_and_process_data+0xb8>)
 8003492:	613b      	str	r3, [r7, #16]

	uint8_t val[3]={2, 1, 3};
 8003494:	4a26      	ldr	r2, [pc, #152]	; (8003530 <acquire_and_process_data+0xbc>)
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	4611      	mov	r1, r2
 800349e:	8019      	strh	r1, [r3, #0]
 80034a0:	3302      	adds	r3, #2
 80034a2:	0c12      	lsrs	r2, r2, #16
 80034a4:	701a      	strb	r2, [r3, #0]

	((ai_float *)data)[0]= (val[0]-MEAN_X)/DEV_X;
 80034a6:	7b3b      	ldrb	r3, [r7, #12]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80034b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80034bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edc3 7a00 	vstr	s15, [r3]
	((ai_float *)data)[1]= (val[1]-MEAN_Z)/DEV_Z;
 80034c6:	7b7b      	ldrb	r3, [r7, #13]
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80034d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80034e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e4:	edc3 7a00 	vstr	s15, [r3]
	((ai_float *)data)[2]= (val[2]-MEAN_Y)/DEV_Y;
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80034f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3308      	adds	r3, #8
 80034fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003506:	edc3 7a00 	vstr	s15, [r3]
  return 0;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	372c      	adds	r7, #44	; 0x2c
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	3e21f195 	.word	0x3e21f195
 800351c:	be389afb 	.word	0xbe389afb
 8003520:	3e83a876 	.word	0x3e83a876
 8003524:	3f4cd9a4 	.word	0x3f4cd9a4
 8003528:	3eb56a53 	.word	0x3eb56a53
 800352c:	3e846a17 	.word	0x3e846a17
 8003530:	08007e10 	.word	0x08007e10

08003534 <post_process>:

int post_process(void * data)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	float f;
	char b[] = {((char *)data)[0], ((char *)data)[1], ((char *)data)[2], ((char *)data)[3]};
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	753b      	strb	r3, [r7, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	757b      	strb	r3, [r7, #21]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	789b      	ldrb	r3, [r3, #2]
 800354c:	75bb      	strb	r3, [r7, #22]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	78db      	ldrb	r3, [r3, #3]
 8003552:	75fb      	strb	r3, [r7, #23]
 8003554:	697b      	ldr	r3, [r7, #20]
	memcpy(&f, &b, sizeof(f));
 8003556:	61bb      	str	r3, [r7, #24]
	char msg[12];
	int n;
	//f=10;
	n=sprintf(msg,"%.2f\r\n",f);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fc fffc 	bl	8000558 <__aeabi_f2d>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	f107 0008 	add.w	r0, r7, #8
 8003568:	490a      	ldr	r1, [pc, #40]	; (8003594 <post_process+0x60>)
 800356a:	f002 fa4f 	bl	8005a0c <siprintf>
 800356e:	61f8      	str	r0, [r7, #28]
	HAL_UART_Transmit(&huart2, "Il valore dell'inferenza è: ", 28, 100);
 8003570:	2364      	movs	r3, #100	; 0x64
 8003572:	221c      	movs	r2, #28
 8003574:	4908      	ldr	r1, [pc, #32]	; (8003598 <post_process+0x64>)
 8003576:	4809      	ldr	r0, [pc, #36]	; (800359c <post_process+0x68>)
 8003578:	f7ff fbff 	bl	8002d7a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, msg, 10, 100);
 800357c:	f107 0108 	add.w	r1, r7, #8
 8003580:	2364      	movs	r3, #100	; 0x64
 8003582:	220a      	movs	r2, #10
 8003584:	4805      	ldr	r0, [pc, #20]	; (800359c <post_process+0x68>)
 8003586:	f7ff fbf8 	bl	8002d7a <HAL_UART_Transmit>
	return 0;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	08007e14 	.word	0x08007e14
 8003598:	08007e1c 	.word	0x08007e1c
 800359c:	20000568 	.word	0x20000568

080035a0 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80035a4:	4805      	ldr	r0, [pc, #20]	; (80035bc <MX_X_CUBE_AI_Init+0x1c>)
 80035a6:	f002 fa19 	bl	80059dc <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 80035aa:	f000 f961 	bl	8003870 <ai_network_data_weights_get>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <MX_X_CUBE_AI_Init+0x20>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fea6 	bl	8003304 <ai_boostrap>
    /* USER CODE END 5 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	08007e3c 	.word	0x08007e3c
 80035c0:	2000049c 	.word	0x2000049c

080035c4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */


  int res = -1;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ce:	617b      	str	r3, [r7, #20]
  float *in_data = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
  uint8_t *out_data = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  printf("TEMPLATE - run - main loop\r\n");
 80035d8:	4822      	ldr	r0, [pc, #136]	; (8003664 <MX_X_CUBE_AI_Process+0xa0>)
 80035da:	f002 f9ff 	bl	80059dc <puts>

  if (network) {
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <MX_X_CUBE_AI_Process+0xa4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d03a      	beq.n	800365c <MX_X_CUBE_AI_Process+0x98>

    if ((network_info.n_inputs != 1) || (network_info.n_outputs != 1)) {
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <MX_X_CUBE_AI_Process+0xa8>)
 80035e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d103      	bne.n	80035f6 <MX_X_CUBE_AI_Process+0x32>
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <MX_X_CUBE_AI_Process+0xa8>)
 80035f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00b      	beq.n	800360e <MX_X_CUBE_AI_Process+0x4a>
      ai_error err = {AI_ERROR_INVALID_PARAM, AI_ERROR_CODE_OUT_OF_RANGE};
 80035f6:	2314      	movs	r3, #20
 80035f8:	723b      	strb	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f362 231f 	bfi	r3, r2, #8, #24
 8003602:	60bb      	str	r3, [r7, #8]
      ai_log_err(err, "template code should be updated\r\n to support a model with multiple IO");
 8003604:	491a      	ldr	r1, [pc, #104]	; (8003670 <MX_X_CUBE_AI_Process+0xac>)
 8003606:	68b8      	ldr	r0, [r7, #8]
 8003608:	f7ff fe5c 	bl	80032c4 <ai_log_err>
 800360c:	e027      	b.n	800365e <MX_X_CUBE_AI_Process+0x9a>
    /* 1 - Set the I/O data buffer */

#if AI_NETWORK_INPUTS_IN_ACTIVATIONS
    in_data = network_info.inputs[0].data;
#else
    in_data = in_data_s;
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <MX_X_CUBE_AI_Process+0xb0>)
 8003610:	613b      	str	r3, [r7, #16]
#endif

#if AI_NETWORK_OUTPUTS_IN_ACTIVATIONS
    out_data = network_info.outputs[0].data;
#else
    out_data = out_data_s;
 8003612:	4b19      	ldr	r3, [pc, #100]	; (8003678 <MX_X_CUBE_AI_Process+0xb4>)
 8003614:	60fb      	str	r3, [r7, #12]
#endif

    if ((!in_data) || (!out_data)) {
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <MX_X_CUBE_AI_Process+0x5e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <MX_X_CUBE_AI_Process+0x66>
      printf("TEMPLATE - I/O buffers are invalid\r\n");
 8003622:	4816      	ldr	r0, [pc, #88]	; (800367c <MX_X_CUBE_AI_Process+0xb8>)
 8003624:	f002 f9da 	bl	80059dc <puts>
      return;
 8003628:	e019      	b.n	800365e <MX_X_CUBE_AI_Process+0x9a>
    /* 2 - main loop */
    do {

      /* 1 - acquire and pre-process input data */

      res = acquire_and_process_data(in_data);
 800362a:	6938      	ldr	r0, [r7, #16]
 800362c:	f7ff ff22 	bl	8003474 <acquire_and_process_data>
 8003630:	6178      	str	r0, [r7, #20]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <MX_X_CUBE_AI_Process+0x7e>
        res = ai_run(in_data, out_data);
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	6938      	ldr	r0, [r7, #16]
 800363c:	f7ff fee6 	bl	800340c <ai_run>
 8003640:	6178      	str	r0, [r7, #20]
      /* 3- post-process the predictions */

      if (res == 0)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <MX_X_CUBE_AI_Process+0x8c>
        res = post_process(out_data);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff ff73 	bl	8003534 <post_process>
 800364e:	6178      	str	r0, [r7, #20]

      res=-1;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003654:	617b      	str	r3, [r7, #20]

    } while (res==0);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0e6      	beq.n	800362a <MX_X_CUBE_AI_Process+0x66>

  }


  return;
 800365c:	bf00      	nop
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
    ai_log_err(err, "Process has FAILED");
  }

    /* USER CODE END 6 */
}
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	08007e5c 	.word	0x08007e5c
 8003668:	20000424 	.word	0x20000424
 800366c:	20000428 	.word	0x20000428
 8003670:	08007e78 	.word	0x08007e78
 8003674:	2000049c 	.word	0x2000049c
 8003678:	200004a8 	.word	0x200004a8
 800367c:	08007ec0 	.word	0x08007ec0

08003680 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <network_configure_weights+0x54>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003698:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <network_configure_weights+0x54>)
 800369a:	6013      	str	r3, [r2, #0]
    dense_7_weights_array.data = AI_PTR(weights + 0);
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <network_configure_weights+0x54>)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6093      	str	r3, [r2, #8]
    dense_7_weights_array.data_start = AI_PTR(weights + 0);
 80036a2:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <network_configure_weights+0x54>)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60d3      	str	r3, [r2, #12]
    dense_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <network_configure_weights+0x58>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036b0:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <network_configure_weights+0x58>)
 80036b2:	6013      	str	r3, [r2, #0]
    dense_7_bias_array.data = AI_PTR(weights + 12);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	330c      	adds	r3, #12
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <network_configure_weights+0x58>)
 80036ba:	6093      	str	r3, [r2, #8]
    dense_7_bias_array.data_start = AI_PTR(weights + 12);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	330c      	adds	r3, #12
 80036c0:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <network_configure_weights+0x58>)
 80036c2:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80036c4:	2301      	movs	r3, #1
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000090 	.word	0x20000090
 80036d8:	200000a0 	.word	0x200000a0

080036dc <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b0a0      	sub	sp, #128	; 0x80
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f9e6 	bl	8003ab8 <ai_platform_context_acquire>
 80036ec:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d040      	beq.n	8003776 <ai_network_get_info+0x9a>
 80036f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03d      	beq.n	8003776 <ai_network_get_info+0x9a>
  {
    ai_network_report r = {
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	2274      	movs	r2, #116	; 0x74
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fbc8 	bl	8004e98 <memset>
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <ai_network_get_info+0xa4>)
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <ai_network_get_info+0xa8>)
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <ai_network_get_info+0xac>)
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <ai_network_get_info+0xb0>)
 8003716:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8003718:	f000 f922 	bl	8003960 <ai_platform_runtime_get_revision>
 800371c:	4603      	mov	r3, r0
    ai_network_report r = {
 800371e:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003720:	f000 f940 	bl	80039a4 <ai_platform_runtime_get_version>
 8003724:	4603      	mov	r3, r0
 8003726:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <ai_network_get_info+0xb4>)
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	2306      	movs	r3, #6
 800372e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8003732:	f000 f959 	bl	80039e8 <ai_platform_api_get_version>
 8003736:	4603      	mov	r3, r0
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800373a:	f000 f989 	bl	8003a50 <ai_platform_interface_api_get_version>
 800373e:	4603      	mov	r3, r0
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8003742:	2304      	movs	r3, #4
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003746:	f107 0308 	add.w	r3, r7, #8
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fa0f 	bl	8003b70 <ai_platform_api_get_network_report>
 8003752:	4603      	mov	r3, r0
 8003754:	f083 0301 	eor.w	r3, r3, #1
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <ai_network_get_info+0x86>
 800375e:	2300      	movs	r3, #0
 8003760:	e00a      	b.n	8003778 <ai_network_get_info+0x9c>

    *report = r;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f107 0308 	add.w	r3, r7, #8
 800376a:	2274      	movs	r2, #116	; 0x74
 800376c:	4619      	mov	r1, r3
 800376e:	f001 fb85 	bl	8004e7c <memcpy>
    return true;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <ai_network_get_info+0x9c>
  }

  return false;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3780      	adds	r7, #128	; 0x80
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	08007ee4 	.word	0x08007ee4
 8003784:	08007eec 	.word	0x08007eec
 8003788:	08007f10 	.word	0x08007f10
 800378c:	08007f2c 	.word	0x08007f2c
 8003790:	08007f44 	.word	0x08007f44

08003794 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f9b5 	bl	8003b0c <ai_platform_network_get_error>
 80037a2:	4603      	mov	r3, r0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80037b6:	2300      	movs	r3, #0
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	2304      	movs	r3, #4
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2301      	movs	r3, #1
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <ai_network_create+0x28>)
 80037c2:	6839      	ldr	r1, [r7, #0]
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fac9 	bl	8003d5c <ai_platform_network_create>
 80037ca:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb2d 	bl	8003e40 <ai_platform_network_destroy>
 80037e6:	4603      	mov	r3, r0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80037fa:	6839      	ldr	r1, [r7, #0]
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb51 	bl	8003ea4 <ai_platform_network_init>
 8003802:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <ai_network_init+0x1e>
 800380a:	2300      	movs	r3, #0
 800380c:	e01c      	b.n	8003848 <ai_network_init+0x58>

  ai_bool ok = true;
 800380e:	2301      	movs	r3, #1
 8003810:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff32 	bl	8003680 <network_configure_weights>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fbaa 	bl	8003f88 <ai_platform_network_post_init>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003846:	7afb      	ldrb	r3, [r7, #11]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fbdd 	bl	8004020 <ai_platform_network_process>
 8003866:	4603      	mov	r3, r0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  AI_ALIGNED(32)
  static const ai_u8 s_network_weights[16] = {
    0x4f, 0xdc, 0x38, 0x41, 0xc9, 0x1f, 0xe8, 0x41,
    0x9f, 0x16, 0x2d, 0xc3, 0x46, 0x47, 0x12, 0x41  };
  return AI_HANDLE_PTR(s_network_weights);
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <ai_network_data_weights_get+0x10>)
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	08007f80 	.word	0x08007f80

08003884 <_ai_platform_get_io_buffers_info>:
 8003884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003888:	2400      	movs	r4, #0
 800388a:	b083      	sub	sp, #12
 800388c:	4606      	mov	r6, r0
 800388e:	4688      	mov	r8, r1
 8003890:	46a3      	mov	fp, r4
 8003892:	f04f 0a18 	mov.w	sl, #24
 8003896:	f04f 0901 	mov.w	r9, #1
 800389a:	b2a0      	uxth	r0, r4
 800389c:	b936      	cbnz	r6, 80038ac <_ai_platform_get_io_buffers_info+0x28>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d03b      	beq.n	800391a <_ai_platform_get_io_buffers_info+0x96>
 80038a2:	68b3      	ldr	r3, [r6, #8]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f8c8 3000 	str.w	r3, [r8]
 80038aa:	e036      	b.n	800391a <_ai_platform_get_io_buffers_info+0x96>
 80038ac:	8833      	ldrh	r3, [r6, #0]
 80038ae:	429c      	cmp	r4, r3
 80038b0:	d2f5      	bcs.n	800389e <_ai_platform_get_io_buffers_info+0x1a>
 80038b2:	6873      	ldr	r3, [r6, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f2      	beq.n	800389e <_ai_platform_get_io_buffers_info+0x1a>
 80038b8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80038bc:	2d00      	cmp	r5, #0
 80038be:	d0ee      	beq.n	800389e <_ai_platform_get_io_buffers_info+0x1a>
 80038c0:	68b3      	ldr	r3, [r6, #8]
 80038c2:	69aa      	ldr	r2, [r5, #24]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	6810      	ldr	r0, [r2, #0]
 80038c8:	689f      	ldr	r7, [r3, #8]
 80038ca:	9101      	str	r1, [sp, #4]
 80038cc:	f001 fa36 	bl	8004d3c <ai_array_to_buffer_fmt>
 80038d0:	9901      	ldr	r1, [sp, #4]
 80038d2:	fb0a f304 	mul.w	r3, sl, r4
 80038d6:	18ca      	adds	r2, r1, r3
 80038d8:	50c8      	str	r0, [r1, r3]
 80038da:	f8a2 9004 	strh.w	r9, [r2, #4]
 80038de:	68eb      	ldr	r3, [r5, #12]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	80d3      	strh	r3, [r2, #6]
 80038e4:	68eb      	ldr	r3, [r5, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	8113      	strh	r3, [r2, #8]
 80038ea:	68eb      	ldr	r3, [r5, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60d3      	str	r3, [r2, #12]
 80038f0:	69ab      	ldr	r3, [r5, #24]
 80038f2:	00e1      	lsls	r1, r4, #3
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	6113      	str	r3, [r2, #16]
 80038f8:	1878      	adds	r0, r7, r1
 80038fa:	b150      	cbz	r0, 8003912 <_ai_platform_get_io_buffers_info+0x8e>
 80038fc:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	6043      	str	r3, [r0, #4]
 8003904:	b11b      	cbz	r3, 800390e <_ai_platform_get_io_buffers_info+0x8a>
 8003906:	885b      	ldrh	r3, [r3, #2]
 8003908:	3300      	adds	r3, #0
 800390a:	bf18      	it	ne
 800390c:	2301      	movne	r3, #1
 800390e:	507b      	str	r3, [r7, r1]
 8003910:	b903      	cbnz	r3, 8003914 <_ai_platform_get_io_buffers_info+0x90>
 8003912:	2000      	movs	r0, #0
 8003914:	6150      	str	r0, [r2, #20]
 8003916:	3401      	adds	r4, #1
 8003918:	e7bf      	b.n	800389a <_ai_platform_get_io_buffers_info+0x16>
 800391a:	b003      	add	sp, #12
 800391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003920 <_platform_network_state_setup.isra.1>:
 8003920:	b430      	push	{r4, r5}
 8003922:	68dd      	ldr	r5, [r3, #12]
 8003924:	695c      	ldr	r4, [r3, #20]
 8003926:	68ed      	ldr	r5, [r5, #12]
 8003928:	68e4      	ldr	r4, [r4, #12]
 800392a:	fb04 f405 	mul.w	r4, r4, r5
 800392e:	6084      	str	r4, [r0, #8]
 8003930:	8809      	ldrh	r1, [r1, #0]
 8003932:	fb04 f401 	mul.w	r4, r4, r1
 8003936:	60c4      	str	r4, [r0, #12]
 8003938:	6811      	ldr	r1, [r2, #0]
 800393a:	6041      	str	r1, [r0, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	4414      	add	r4, r2
 8003940:	6004      	str	r4, [r0, #0]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	6814      	ldr	r4, [r2, #0]
 8003946:	00a4      	lsls	r4, r4, #2
 8003948:	d407      	bmi.n	800395a <_platform_network_state_setup.isra.1+0x3a>
 800394a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800394e:	1b64      	subs	r4, r4, r5
 8003950:	4421      	add	r1, r4
 8003952:	6091      	str	r1, [r2, #8]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	6842      	ldr	r2, [r0, #4]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	bc30      	pop	{r4, r5}
 800395c:	4770      	bx	lr
	...

08003960 <ai_platform_runtime_get_revision>:
 8003960:	490a      	ldr	r1, [pc, #40]	; (800398c <ai_platform_runtime_get_revision+0x2c>)
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <ai_platform_runtime_get_revision+0x30>)
 8003964:	680b      	ldr	r3, [r1, #0]
 8003966:	2001      	movs	r0, #1
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	600b      	str	r3, [r1, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	6010      	str	r0, [r2, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2a00      	cmp	r2, #0
 8003976:	d1fc      	bne.n	8003972 <ai_platform_runtime_get_revision+0x12>
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <ai_platform_runtime_get_revision+0x34>)
 800397a:	4a07      	ldr	r2, [pc, #28]	; (8003998 <ai_platform_runtime_get_revision+0x38>)
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <ai_platform_runtime_get_revision+0x3c>)
 8003982:	429a      	cmp	r2, r3
 8003984:	d000      	beq.n	8003988 <ai_platform_runtime_get_revision+0x28>
 8003986:	e7fe      	b.n	8003986 <ai_platform_runtime_get_revision+0x26>
 8003988:	4805      	ldr	r0, [pc, #20]	; (80039a0 <ai_platform_runtime_get_revision+0x40>)
 800398a:	4770      	bx	lr
 800398c:	e0002000 	.word	0xe0002000
 8003990:	40023008 	.word	0x40023008
 8003994:	40023000 	.word	0x40023000
 8003998:	f407a5c2 	.word	0xf407a5c2
 800399c:	b5e8b5cd 	.word	0xb5e8b5cd
 80039a0:	08007f90 	.word	0x08007f90

080039a4 <ai_platform_runtime_get_version>:
 80039a4:	490b      	ldr	r1, [pc, #44]	; (80039d4 <ai_platform_runtime_get_version+0x30>)
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <ai_platform_runtime_get_version+0x34>)
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	2001      	movs	r0, #1
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	600b      	str	r3, [r1, #0]
 80039b2:	b082      	sub	sp, #8
 80039b4:	4613      	mov	r3, r2
 80039b6:	6010      	str	r0, [r2, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	d1fc      	bne.n	80039b8 <ai_platform_runtime_get_version+0x14>
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <ai_platform_runtime_get_version+0x38>)
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <ai_platform_runtime_get_version+0x3c>)
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <ai_platform_runtime_get_version+0x40>)
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d000      	beq.n	80039ce <ai_platform_runtime_get_version+0x2a>
 80039cc:	e7fe      	b.n	80039cc <ai_platform_runtime_get_version+0x28>
 80039ce:	2006      	movs	r0, #6
 80039d0:	b002      	add	sp, #8
 80039d2:	4770      	bx	lr
 80039d4:	e0002000 	.word	0xe0002000
 80039d8:	40023008 	.word	0x40023008
 80039dc:	40023000 	.word	0x40023000
 80039e0:	f407a5c2 	.word	0xf407a5c2
 80039e4:	b5e8b5cd 	.word	0xb5e8b5cd

080039e8 <ai_platform_api_get_version>:
 80039e8:	4913      	ldr	r1, [pc, #76]	; (8003a38 <ai_platform_api_get_version+0x50>)
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <ai_platform_api_get_version+0x54>)
 80039ec:	680b      	ldr	r3, [r1, #0]
 80039ee:	2001      	movs	r0, #1
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	600b      	str	r3, [r1, #0]
 80039f6:	b082      	sub	sp, #8
 80039f8:	4613      	mov	r3, r2
 80039fa:	6010      	str	r0, [r2, #0]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d1fc      	bne.n	80039fc <ai_platform_api_get_version+0x14>
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <ai_platform_api_get_version+0x58>)
 8003a04:	4a0f      	ldr	r2, [pc, #60]	; (8003a44 <ai_platform_api_get_version+0x5c>)
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <ai_platform_api_get_version+0x60>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d000      	beq.n	8003a12 <ai_platform_api_get_version+0x2a>
 8003a10:	e7fe      	b.n	8003a10 <ai_platform_api_get_version+0x28>
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <ai_platform_api_get_version+0x64>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	f362 0007 	bfi	r0, r2, #0, #8
 8003a1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003a20:	f362 200f 	bfi	r0, r2, #8, #8
 8003a24:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003a28:	f362 4017 	bfi	r0, r2, #16, #8
 8003a2c:	0e1b      	lsrs	r3, r3, #24
 8003a2e:	f363 601f 	bfi	r0, r3, #24, #8
 8003a32:	b002      	add	sp, #8
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e0002000 	.word	0xe0002000
 8003a3c:	40023008 	.word	0x40023008
 8003a40:	40023000 	.word	0x40023000
 8003a44:	f407a5c2 	.word	0xf407a5c2
 8003a48:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a4c:	08007f94 	.word	0x08007f94

08003a50 <ai_platform_interface_api_get_version>:
 8003a50:	4913      	ldr	r1, [pc, #76]	; (8003aa0 <ai_platform_interface_api_get_version+0x50>)
 8003a52:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <ai_platform_interface_api_get_version+0x54>)
 8003a54:	680b      	ldr	r3, [r1, #0]
 8003a56:	2001      	movs	r0, #1
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	600b      	str	r3, [r1, #0]
 8003a5e:	b082      	sub	sp, #8
 8003a60:	4613      	mov	r3, r2
 8003a62:	6010      	str	r0, [r2, #0]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d1fc      	bne.n	8003a64 <ai_platform_interface_api_get_version+0x14>
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <ai_platform_interface_api_get_version+0x58>)
 8003a6c:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <ai_platform_interface_api_get_version+0x5c>)
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <ai_platform_interface_api_get_version+0x60>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d000      	beq.n	8003a7a <ai_platform_interface_api_get_version+0x2a>
 8003a78:	e7fe      	b.n	8003a78 <ai_platform_interface_api_get_version+0x28>
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <ai_platform_interface_api_get_version+0x64>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	f362 0007 	bfi	r0, r2, #0, #8
 8003a84:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003a88:	f362 200f 	bfi	r0, r2, #8, #8
 8003a8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003a90:	f362 4017 	bfi	r0, r2, #16, #8
 8003a94:	0e1b      	lsrs	r3, r3, #24
 8003a96:	f363 601f 	bfi	r0, r3, #24, #8
 8003a9a:	b002      	add	sp, #8
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e0002000 	.word	0xe0002000
 8003aa4:	40023008 	.word	0x40023008
 8003aa8:	40023000 	.word	0x40023000
 8003aac:	f407a5c2 	.word	0xf407a5c2
 8003ab0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ab4:	08007f98 	.word	0x08007f98

08003ab8 <ai_platform_context_acquire>:
 8003ab8:	b410      	push	{r4}
 8003aba:	b120      	cbz	r0, 8003ac6 <ai_platform_context_acquire+0xe>
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <ai_platform_context_acquire+0x3c>)
 8003abe:	6802      	ldr	r2, [r0, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	bf18      	it	ne
 8003ac4:	2000      	movne	r0, #0
 8003ac6:	490c      	ldr	r1, [pc, #48]	; (8003af8 <ai_platform_context_acquire+0x40>)
 8003ac8:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <ai_platform_context_acquire+0x44>)
 8003aca:	680b      	ldr	r3, [r1, #0]
 8003acc:	2401      	movs	r4, #1
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	6014      	str	r4, [r2, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	2a00      	cmp	r2, #0
 8003adc:	d1fc      	bne.n	8003ad8 <ai_platform_context_acquire+0x20>
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <ai_platform_context_acquire+0x48>)
 8003ae0:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <ai_platform_context_acquire+0x4c>)
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <ai_platform_context_acquire+0x50>)
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d000      	beq.n	8003aee <ai_platform_context_acquire+0x36>
 8003aec:	e7fe      	b.n	8003aec <ai_platform_context_acquire+0x34>
 8003aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	a1c00100 	.word	0xa1c00100
 8003af8:	e0002000 	.word	0xe0002000
 8003afc:	40023008 	.word	0x40023008
 8003b00:	40023000 	.word	0x40023000
 8003b04:	f407a5c2 	.word	0xf407a5c2
 8003b08:	b5e8b5cd 	.word	0xb5e8b5cd

08003b0c <ai_platform_network_get_error>:
 8003b0c:	b410      	push	{r4}
 8003b0e:	b120      	cbz	r0, 8003b1a <ai_platform_network_get_error+0xe>
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <ai_platform_network_get_error+0x4c>)
 8003b12:	6802      	ldr	r2, [r0, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf18      	it	ne
 8003b18:	2000      	movne	r0, #0
 8003b1a:	4910      	ldr	r1, [pc, #64]	; (8003b5c <ai_platform_network_get_error+0x50>)
 8003b1c:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <ai_platform_network_get_error+0x54>)
 8003b1e:	680b      	ldr	r3, [r1, #0]
 8003b20:	2401      	movs	r4, #1
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	6014      	str	r4, [r2, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	2a00      	cmp	r2, #0
 8003b30:	d1fc      	bne.n	8003b2c <ai_platform_network_get_error+0x20>
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <ai_platform_network_get_error+0x58>)
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <ai_platform_network_get_error+0x5c>)
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <ai_platform_network_get_error+0x60>)
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d000      	beq.n	8003b42 <ai_platform_network_get_error+0x36>
 8003b40:	e7fe      	b.n	8003b40 <ai_platform_network_get_error+0x34>
 8003b42:	b120      	cbz	r0, 8003b4e <ai_platform_network_get_error+0x42>
 8003b44:	3010      	adds	r0, #16
 8003b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b4a:	f000 bc75 	b.w	8004438 <core_get_error>
 8003b4e:	f241 0010 	movw	r0, #4112	; 0x1010
 8003b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	a1c00100 	.word	0xa1c00100
 8003b5c:	e0002000 	.word	0xe0002000
 8003b60:	40023008 	.word	0x40023008
 8003b64:	40023000 	.word	0x40023000
 8003b68:	f407a5c2 	.word	0xf407a5c2
 8003b6c:	b5e8b5cd 	.word	0xb5e8b5cd

08003b70 <ai_platform_api_get_network_report>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	460c      	mov	r4, r1
 8003b74:	4605      	mov	r5, r0
 8003b76:	b120      	cbz	r0, 8003b82 <ai_platform_api_get_network_report+0x12>
 8003b78:	4b71      	ldr	r3, [pc, #452]	; (8003d40 <ai_platform_api_get_network_report+0x1d0>)
 8003b7a:	6802      	ldr	r2, [r0, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	bf18      	it	ne
 8003b80:	2500      	movne	r5, #0
 8003b82:	4970      	ldr	r1, [pc, #448]	; (8003d44 <ai_platform_api_get_network_report+0x1d4>)
 8003b84:	4a70      	ldr	r2, [pc, #448]	; (8003d48 <ai_platform_api_get_network_report+0x1d8>)
 8003b86:	680b      	ldr	r3, [r1, #0]
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	4611      	mov	r1, r2
 8003b92:	6010      	str	r0, [r2, #0]
 8003b94:	680b      	ldr	r3, [r1, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1fc      	bne.n	8003b94 <ai_platform_api_get_network_report+0x24>
 8003b9a:	4a6c      	ldr	r2, [pc, #432]	; (8003d4c <ai_platform_api_get_network_report+0x1dc>)
 8003b9c:	496c      	ldr	r1, [pc, #432]	; (8003d50 <ai_platform_api_get_network_report+0x1e0>)
 8003b9e:	6011      	str	r1, [r2, #0]
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	4a6c      	ldr	r2, [pc, #432]	; (8003d54 <ai_platform_api_get_network_report+0x1e4>)
 8003ba4:	4291      	cmp	r1, r2
 8003ba6:	d000      	beq.n	8003baa <ai_platform_api_get_network_report+0x3a>
 8003ba8:	e7fe      	b.n	8003ba8 <ai_platform_api_get_network_report+0x38>
 8003baa:	2d00      	cmp	r5, #0
 8003bac:	d062      	beq.n	8003c74 <ai_platform_api_get_network_report+0x104>
 8003bae:	2c00      	cmp	r4, #0
 8003bb0:	d062      	beq.n	8003c78 <ai_platform_api_get_network_report+0x108>
 8003bb2:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003bb4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	d056      	beq.n	8003c68 <ai_platform_api_get_network_report+0xf8>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003bbe:	6913      	ldr	r3, [r2, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d00c      	beq.n	8003bde <ai_platform_api_get_network_report+0x6e>
 8003bc4:	b15b      	cbz	r3, 8003bde <ai_platform_api_get_network_report+0x6e>
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	e003      	b.n	8003bd2 <ai_platform_api_get_network_report+0x62>
 8003bca:	1c50      	adds	r0, r2, #1
 8003bcc:	460b      	mov	r3, r1
 8003bce:	b121      	cbz	r1, 8003bda <ai_platform_api_get_network_report+0x6a>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	66e2      	str	r2, [r4, #108]	; 0x6c
 8003bd4:	6919      	ldr	r1, [r3, #16]
 8003bd6:	4299      	cmp	r1, r3
 8003bd8:	d1f7      	bne.n	8003bca <ai_platform_api_get_network_report+0x5a>
 8003bda:	2a00      	cmp	r2, #0
 8003bdc:	d044      	beq.n	8003c68 <ai_platform_api_get_network_report+0xf8>
 8003bde:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8003be2:	b100      	cbz	r0, 8003be6 <ai_platform_api_get_network_report+0x76>
 8003be4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8003be6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003bea:	f7ff fe4b 	bl	8003884 <_ai_platform_get_io_buffers_info>
 8003bee:	4606      	mov	r6, r0
 8003bf0:	8620      	strh	r0, [r4, #48]	; 0x30
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d05f      	beq.n	8003cb6 <ai_platform_api_get_network_report+0x146>
 8003bf6:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	bf8a      	itet	hi
 8003bfe:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 8003c00:	2000      	movls	r0, #0
 8003c02:	300c      	addhi	r0, #12
 8003c04:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8003c08:	f7ff fe3c 	bl	8003884 <_ai_platform_get_io_buffers_info>
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	8660      	strh	r0, [r4, #50]	; 0x32
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d048      	beq.n	8003ca6 <ai_platform_api_get_network_report+0x136>
 8003c14:	686b      	ldr	r3, [r5, #4]
 8003c16:	6723      	str	r3, [r4, #112]	; 0x70
 8003c18:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8003c1c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003c1e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8003c22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003c24:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003c28:	e886 0003 	stmia.w	r6, {r0, r1}
 8003c2c:	f105 0718 	add.w	r7, r5, #24
 8003c30:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003c32:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8003c36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003c38:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003c3c:	e886 0003 	stmia.w	r6, {r0, r1}
 8003c40:	4a40      	ldr	r2, [pc, #256]	; (8003d44 <ai_platform_api_get_network_report+0x1d4>)
 8003c42:	4941      	ldr	r1, [pc, #260]	; (8003d48 <ai_platform_api_get_network_report+0x1d8>)
 8003c44:	6813      	ldr	r3, [r2, #0]
 8003c46:	2001      	movs	r0, #1
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	460a      	mov	r2, r1
 8003c50:	6008      	str	r0, [r1, #0]
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1fc      	bne.n	8003c52 <ai_platform_api_get_network_report+0xe2>
 8003c58:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <ai_platform_api_get_network_report+0x1dc>)
 8003c5a:	493d      	ldr	r1, [pc, #244]	; (8003d50 <ai_platform_api_get_network_report+0x1e0>)
 8003c5c:	6019      	str	r1, [r3, #0]
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <ai_platform_api_get_network_report+0x1e4>)
 8003c62:	4299      	cmp	r1, r3
 8003c64:	d00a      	beq.n	8003c7c <ai_platform_api_get_network_report+0x10c>
 8003c66:	e7fe      	b.n	8003c66 <ai_platform_api_get_network_report+0xf6>
 8003c68:	f105 0010 	add.w	r0, r5, #16
 8003c6c:	2218      	movs	r2, #24
 8003c6e:	2111      	movs	r1, #17
 8003c70:	f000 fbe8 	bl	8004444 <core_set_error>
 8003c74:	2000      	movs	r0, #0
 8003c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c78:	4620      	mov	r0, r4
 8003c7a:	e7fc      	b.n	8003c76 <ai_platform_api_get_network_report+0x106>
 8003c7c:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <ai_platform_api_get_network_report+0x1e8>)
 8003c7e:	4831      	ldr	r0, [pc, #196]	; (8003d44 <ai_platform_api_get_network_report+0x1d4>)
 8003c80:	6123      	str	r3, [r4, #16]
 8003c82:	6803      	ldr	r3, [r0, #0]
 8003c84:	4930      	ldr	r1, [pc, #192]	; (8003d48 <ai_platform_api_get_network_report+0x1d8>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	6003      	str	r3, [r0, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	680b      	ldr	r3, [r1, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1fc      	bne.n	8003c90 <ai_platform_api_get_network_report+0x120>
 8003c96:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <ai_platform_api_get_network_report+0x1dc>)
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <ai_platform_api_get_network_report+0x1e0>)
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <ai_platform_api_get_network_report+0x1e4>)
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d010      	beq.n	8003cc6 <ai_platform_api_get_network_report+0x156>
 8003ca4:	e7fe      	b.n	8003ca4 <ai_platform_api_get_network_report+0x134>
 8003ca6:	f105 0010 	add.w	r0, r5, #16
 8003caa:	2218      	movs	r2, #24
 8003cac:	2113      	movs	r1, #19
 8003cae:	f000 fbc9 	bl	8004444 <core_set_error>
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	e7df      	b.n	8003c76 <ai_platform_api_get_network_report+0x106>
 8003cb6:	f105 0010 	add.w	r0, r5, #16
 8003cba:	2218      	movs	r2, #24
 8003cbc:	2112      	movs	r1, #18
 8003cbe:	f000 fbc1 	bl	8004444 <core_set_error>
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	e7d7      	b.n	8003c76 <ai_platform_api_get_network_report+0x106>
 8003cc6:	2306      	movs	r3, #6
 8003cc8:	481e      	ldr	r0, [pc, #120]	; (8003d44 <ai_platform_api_get_network_report+0x1d4>)
 8003cca:	6163      	str	r3, [r4, #20]
 8003ccc:	6803      	ldr	r3, [r0, #0]
 8003cce:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <ai_platform_api_get_network_report+0x1d8>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	6003      	str	r3, [r0, #0]
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	600b      	str	r3, [r1, #0]
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1fc      	bne.n	8003cda <ai_platform_api_get_network_report+0x16a>
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <ai_platform_api_get_network_report+0x1dc>)
 8003ce2:	491b      	ldr	r1, [pc, #108]	; (8003d50 <ai_platform_api_get_network_report+0x1e0>)
 8003ce4:	6019      	str	r1, [r3, #0]
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <ai_platform_api_get_network_report+0x1e4>)
 8003cea:	4299      	cmp	r1, r3
 8003cec:	d000      	beq.n	8003cf0 <ai_platform_api_get_network_report+0x180>
 8003cee:	e7fe      	b.n	8003cee <ai_platform_api_get_network_report+0x17e>
 8003cf0:	f240 1301 	movw	r3, #257	; 0x101
 8003cf4:	4913      	ldr	r1, [pc, #76]	; (8003d44 <ai_platform_api_get_network_report+0x1d4>)
 8003cf6:	6263      	str	r3, [r4, #36]	; 0x24
 8003cf8:	680b      	ldr	r3, [r1, #0]
 8003cfa:	4813      	ldr	r0, [pc, #76]	; (8003d48 <ai_platform_api_get_network_report+0x1d8>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	600b      	str	r3, [r1, #0]
 8003d02:	2301      	movs	r3, #1
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	6802      	ldr	r2, [r0, #0]
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	d1fc      	bne.n	8003d06 <ai_platform_api_get_network_report+0x196>
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <ai_platform_api_get_network_report+0x1dc>)
 8003d0e:	4910      	ldr	r1, [pc, #64]	; (8003d50 <ai_platform_api_get_network_report+0x1e0>)
 8003d10:	6019      	str	r1, [r3, #0]
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <ai_platform_api_get_network_report+0x1e4>)
 8003d16:	4299      	cmp	r1, r3
 8003d18:	d000      	beq.n	8003d1c <ai_platform_api_get_network_report+0x1ac>
 8003d1a:	e7fe      	b.n	8003d1a <ai_platform_api_get_network_report+0x1aa>
 8003d1c:	f240 4301 	movw	r3, #1025	; 0x401
 8003d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d22:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003d24:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8003d28:	0e19      	lsrs	r1, r3, #24
 8003d2a:	0c1a      	lsrs	r2, r3, #16
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f884 1020 	strb.w	r1, [r4, #32]
 8003d32:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8003d36:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	e79b      	b.n	8003c76 <ai_platform_api_get_network_report+0x106>
 8003d3e:	bf00      	nop
 8003d40:	a1c00100 	.word	0xa1c00100
 8003d44:	e0002000 	.word	0xe0002000
 8003d48:	40023008 	.word	0x40023008
 8003d4c:	40023000 	.word	0x40023000
 8003d50:	f407a5c2 	.word	0xf407a5c2
 8003d54:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d58:	08007f90 	.word	0x08007f90

08003d5c <ai_platform_network_create>:
 8003d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d60:	4f30      	ldr	r7, [pc, #192]	; (8003e24 <ai_platform_network_create+0xc8>)
 8003d62:	4e31      	ldr	r6, [pc, #196]	; (8003e28 <ai_platform_network_create+0xcc>)
 8003d64:	6839      	ldr	r1, [r7, #0]
 8003d66:	b083      	sub	sp, #12
 8003d68:	f021 0101 	bic.w	r1, r1, #1
 8003d6c:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8003d70:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	2101      	movs	r1, #1
 8003d78:	6031      	str	r1, [r6, #0]
 8003d7a:	6831      	ldr	r1, [r6, #0]
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d1fc      	bne.n	8003d7a <ai_platform_network_create+0x1e>
 8003d80:	492a      	ldr	r1, [pc, #168]	; (8003e2c <ai_platform_network_create+0xd0>)
 8003d82:	4d2b      	ldr	r5, [pc, #172]	; (8003e30 <ai_platform_network_create+0xd4>)
 8003d84:	600d      	str	r5, [r1, #0]
 8003d86:	680d      	ldr	r5, [r1, #0]
 8003d88:	492a      	ldr	r1, [pc, #168]	; (8003e34 <ai_platform_network_create+0xd8>)
 8003d8a:	428d      	cmp	r5, r1
 8003d8c:	d000      	beq.n	8003d90 <ai_platform_network_create+0x34>
 8003d8e:	e7fe      	b.n	8003d8e <ai_platform_network_create+0x32>
 8003d90:	b1e0      	cbz	r0, 8003dcc <ai_platform_network_create+0x70>
 8003d92:	4680      	mov	r8, r0
 8003d94:	461d      	mov	r5, r3
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <ai_platform_network_create+0xdc>)
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	f8c8 2000 	str.w	r2, [r8]
 8003d9e:	4617      	mov	r7, r2
 8003da0:	f000 fb48 	bl	8004434 <core_init>
 8003da4:	b1b8      	cbz	r0, 8003dd6 <ai_platform_network_create+0x7a>
 8003da6:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <ai_platform_network_create+0xc8>)
 8003da8:	491f      	ldr	r1, [pc, #124]	; (8003e28 <ai_platform_network_create+0xcc>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	2301      	movs	r3, #1
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	680e      	ldr	r6, [r1, #0]
 8003db8:	2e00      	cmp	r6, #0
 8003dba:	d1fc      	bne.n	8003db6 <ai_platform_network_create+0x5a>
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <ai_platform_network_create+0xd0>)
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <ai_platform_network_create+0xd4>)
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <ai_platform_network_create+0xd8>)
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d016      	beq.n	8003df8 <ai_platform_network_create+0x9c>
 8003dca:	e7fe      	b.n	8003dca <ai_platform_network_create+0x6e>
 8003dcc:	f241 0010 	movw	r0, #4112	; 0x1010
 8003dd0:	b003      	add	sp, #12
 8003dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dd6:	062d      	lsls	r5, r5, #24
 8003dd8:	0424      	lsls	r4, r4, #16
 8003dda:	2130      	movs	r1, #48	; 0x30
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c8 3000 	str.w	r3, [r8]
 8003de2:	2210      	movs	r2, #16
 8003de4:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8003de8:	2000      	movs	r0, #0
 8003dea:	432b      	orrs	r3, r5
 8003dec:	f361 0007 	bfi	r0, r1, #0, #8
 8003df0:	663b      	str	r3, [r7, #96]	; 0x60
 8003df2:	f362 201f 	bfi	r0, r2, #8, #24
 8003df6:	e7eb      	b.n	8003dd0 <ai_platform_network_create+0x74>
 8003df8:	062d      	lsls	r5, r5, #24
 8003dfa:	0424      	lsls	r4, r4, #16
 8003dfc:	ea45 0304 	orr.w	r3, r5, r4
 8003e00:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8003e04:	d001      	beq.n	8003e0a <ai_platform_network_create+0xae>
 8003e06:	2101      	movs	r1, #1
 8003e08:	e7e8      	b.n	8003ddc <ai_platform_network_create+0x80>
 8003e0a:	a802      	add	r0, sp, #8
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <ai_platform_network_create+0xe0>)
 8003e0e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8003e12:	f000 fed7 	bl	8004bc4 <ai_check_custom_types>
 8003e16:	b110      	cbz	r0, 8003e1e <ai_platform_network_create+0xc2>
 8003e18:	4632      	mov	r2, r6
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	e7e2      	b.n	8003de4 <ai_platform_network_create+0x88>
 8003e1e:	2102      	movs	r1, #2
 8003e20:	e7dc      	b.n	8003ddc <ai_platform_network_create+0x80>
 8003e22:	bf00      	nop
 8003e24:	e0002000 	.word	0xe0002000
 8003e28:	40023008 	.word	0x40023008
 8003e2c:	40023000 	.word	0x40023000
 8003e30:	f407a5c2 	.word	0xf407a5c2
 8003e34:	b5e8b5cd 	.word	0xb5e8b5cd
 8003e38:	a1c00100 	.word	0xa1c00100
 8003e3c:	84048403 	.word	0x84048403

08003e40 <ai_platform_network_destroy>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	b1d8      	cbz	r0, 8003e7c <ai_platform_network_destroy+0x3c>
 8003e44:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <ai_platform_network_destroy+0x4c>)
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bf0c      	ite	eq
 8003e4c:	4603      	moveq	r3, r0
 8003e4e:	2300      	movne	r3, #0
 8003e50:	4c0f      	ldr	r4, [pc, #60]	; (8003e90 <ai_platform_network_destroy+0x50>)
 8003e52:	4910      	ldr	r1, [pc, #64]	; (8003e94 <ai_platform_network_destroy+0x54>)
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	2501      	movs	r5, #1
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	460a      	mov	r2, r1
 8003e60:	600d      	str	r5, [r1, #0]
 8003e62:	6814      	ldr	r4, [r2, #0]
 8003e64:	2c00      	cmp	r4, #0
 8003e66:	d1fc      	bne.n	8003e62 <ai_platform_network_destroy+0x22>
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <ai_platform_network_destroy+0x58>)
 8003e6a:	490c      	ldr	r1, [pc, #48]	; (8003e9c <ai_platform_network_destroy+0x5c>)
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	6811      	ldr	r1, [r2, #0]
 8003e70:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <ai_platform_network_destroy+0x60>)
 8003e72:	4291      	cmp	r1, r2
 8003e74:	d000      	beq.n	8003e78 <ai_platform_network_destroy+0x38>
 8003e76:	e7fe      	b.n	8003e76 <ai_platform_network_destroy+0x36>
 8003e78:	b913      	cbnz	r3, 8003e80 <ai_platform_network_destroy+0x40>
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	e7e7      	b.n	8003e50 <ai_platform_network_destroy+0x10>
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 ff43 	bl	8004d0c <ai_layers_destroy_all>
 8003e86:	4620      	mov	r0, r4
 8003e88:	bd38      	pop	{r3, r4, r5, pc}
 8003e8a:	bf00      	nop
 8003e8c:	a1c00100 	.word	0xa1c00100
 8003e90:	e0002000 	.word	0xe0002000
 8003e94:	40023008 	.word	0x40023008
 8003e98:	40023000 	.word	0x40023000
 8003e9c:	f407a5c2 	.word	0xf407a5c2
 8003ea0:	b5e8b5cd 	.word	0xb5e8b5cd

08003ea4 <ai_platform_network_init>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	b120      	cbz	r0, 8003eb6 <ai_platform_network_init+0x12>
 8003eac:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <ai_platform_network_init+0xcc>)
 8003eae:	6802      	ldr	r2, [r0, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	bf18      	it	ne
 8003eb4:	2500      	movne	r5, #0
 8003eb6:	492f      	ldr	r1, [pc, #188]	; (8003f74 <ai_platform_network_init+0xd0>)
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <ai_platform_network_init+0xd4>)
 8003eba:	680b      	ldr	r3, [r1, #0]
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	600b      	str	r3, [r1, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	6010      	str	r0, [r2, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	d1fc      	bne.n	8003ec8 <ai_platform_network_init+0x24>
 8003ece:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <ai_platform_network_init+0xd8>)
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <ai_platform_network_init+0xdc>)
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <ai_platform_network_init+0xe0>)
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d000      	beq.n	8003ede <ai_platform_network_init+0x3a>
 8003edc:	e7fe      	b.n	8003edc <ai_platform_network_init+0x38>
 8003ede:	b1dd      	cbz	r5, 8003f18 <ai_platform_network_init+0x74>
 8003ee0:	b1e4      	cbz	r4, 8003f1c <ai_platform_network_init+0x78>
 8003ee2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003ee4:	6926      	ldr	r6, [r4, #16]
 8003ee6:	b30f      	cbz	r7, 8003f2c <ai_platform_network_init+0x88>
 8003ee8:	b38e      	cbz	r6, 8003f4e <ai_platform_network_init+0xaa>
 8003eea:	4627      	mov	r7, r4
 8003eec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003eee:	f105 0618 	add.w	r6, r5, #24
 8003ef2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ef4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003ef8:	e886 0003 	stmia.w	r6, {r0, r1}
 8003efc:	3418      	adds	r4, #24
 8003efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f00:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8003f04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e886 0003 	stmia.w	r6, {r0, r1}
 8003f10:	60eb      	str	r3, [r5, #12]
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 fe80 	bl	8004c18 <ai_layers_init_all>
 8003f18:	4628      	mov	r0, r5
 8003f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f1c:	f105 0010 	add.w	r0, r5, #16
 8003f20:	2211      	movs	r2, #17
 8003f22:	2110      	movs	r1, #16
 8003f24:	4625      	mov	r5, r4
 8003f26:	f000 fa8d 	bl	8004444 <core_set_error>
 8003f2a:	e7f5      	b.n	8003f18 <ai_platform_network_init+0x74>
 8003f2c:	8c21      	ldrh	r1, [r4, #32]
 8003f2e:	8be2      	ldrh	r2, [r4, #30]
 8003f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f32:	fb02 f201 	mul.w	r2, r2, r1
 8003f36:	fb03 f302 	mul.w	r3, r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0d4      	beq.n	8003ee8 <ai_platform_network_init+0x44>
 8003f3e:	f105 0010 	add.w	r0, r5, #16
 8003f42:	2213      	movs	r2, #19
 8003f44:	2110      	movs	r1, #16
 8003f46:	463d      	mov	r5, r7
 8003f48:	f000 fa7c 	bl	8004444 <core_set_error>
 8003f4c:	e7e4      	b.n	8003f18 <ai_platform_network_init+0x74>
 8003f4e:	8921      	ldrh	r1, [r4, #8]
 8003f50:	88e2      	ldrh	r2, [r4, #6]
 8003f52:	68e3      	ldr	r3, [r4, #12]
 8003f54:	fb02 f201 	mul.w	r2, r2, r1
 8003f58:	fb03 f302 	mul.w	r3, r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0c4      	beq.n	8003eea <ai_platform_network_init+0x46>
 8003f60:	f105 0010 	add.w	r0, r5, #16
 8003f64:	2212      	movs	r2, #18
 8003f66:	2110      	movs	r1, #16
 8003f68:	4635      	mov	r5, r6
 8003f6a:	f000 fa6b 	bl	8004444 <core_set_error>
 8003f6e:	e7d3      	b.n	8003f18 <ai_platform_network_init+0x74>
 8003f70:	a1c00100 	.word	0xa1c00100
 8003f74:	e0002000 	.word	0xe0002000
 8003f78:	40023008 	.word	0x40023008
 8003f7c:	40023000 	.word	0x40023000
 8003f80:	f407a5c2 	.word	0xf407a5c2
 8003f84:	b5e8b5cd 	.word	0xb5e8b5cd

08003f88 <ai_platform_network_post_init>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	b120      	cbz	r0, 8003f98 <ai_platform_network_post_init+0x10>
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <ai_platform_network_post_init+0x80>)
 8003f90:	6802      	ldr	r2, [r0, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	bf18      	it	ne
 8003f96:	2400      	movne	r4, #0
 8003f98:	491c      	ldr	r1, [pc, #112]	; (800400c <ai_platform_network_post_init+0x84>)
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <ai_platform_network_post_init+0x88>)
 8003f9c:	680b      	ldr	r3, [r1, #0]
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	600b      	str	r3, [r1, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	6010      	str	r0, [r2, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2a00      	cmp	r2, #0
 8003fae:	d1fc      	bne.n	8003faa <ai_platform_network_post_init+0x22>
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <ai_platform_network_post_init+0x8c>)
 8003fb2:	4a19      	ldr	r2, [pc, #100]	; (8004018 <ai_platform_network_post_init+0x90>)
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b18      	ldr	r3, [pc, #96]	; (800401c <ai_platform_network_post_init+0x94>)
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d000      	beq.n	8003fc0 <ai_platform_network_post_init+0x38>
 8003fbe:	e7fe      	b.n	8003fbe <ai_platform_network_post_init+0x36>
 8003fc0:	b1bc      	cbz	r4, 8003ff2 <ai_platform_network_post_init+0x6a>
 8003fc2:	68e3      	ldr	r3, [r4, #12]
 8003fc4:	f013 0502 	ands.w	r5, r3, #2
 8003fc8:	d015      	beq.n	8003ff6 <ai_platform_network_post_init+0x6e>
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f000 fe38 	bl	8004c40 <ai_layers_post_init_all>
 8003fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fd2:	b163      	cbz	r3, 8003fee <ai_platform_network_post_init+0x66>
 8003fd4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003fd6:	b91d      	cbnz	r5, 8003fe0 <ai_platform_network_post_init+0x58>
 8003fd8:	e009      	b.n	8003fee <ai_platform_network_post_init+0x66>
 8003fda:	461d      	mov	r5, r3
 8003fdc:	b13b      	cbz	r3, 8003fee <ai_platform_network_post_init+0x66>
 8003fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	4798      	blx	r3
 8003fe8:	692b      	ldr	r3, [r5, #16]
 8003fea:	42ab      	cmp	r3, r5
 8003fec:	d1f5      	bne.n	8003fda <ai_platform_network_post_init+0x52>
 8003fee:	2001      	movs	r0, #1
 8003ff0:	bd38      	pop	{r3, r4, r5, pc}
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	bd38      	pop	{r3, r4, r5, pc}
 8003ff6:	f104 0010 	add.w	r0, r4, #16
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	2111      	movs	r1, #17
 8003ffe:	f000 fa21 	bl	8004444 <core_set_error>
 8004002:	4628      	mov	r0, r5
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	bf00      	nop
 8004008:	a1c00100 	.word	0xa1c00100
 800400c:	e0002000 	.word	0xe0002000
 8004010:	40023008 	.word	0x40023008
 8004014:	40023000 	.word	0x40023000
 8004018:	f407a5c2 	.word	0xf407a5c2
 800401c:	b5e8b5cd 	.word	0xb5e8b5cd

08004020 <ai_platform_network_process>:
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	b083      	sub	sp, #12
 8004026:	4604      	mov	r4, r0
 8004028:	9201      	str	r2, [sp, #4]
 800402a:	b120      	cbz	r0, 8004036 <ai_platform_network_process+0x16>
 800402c:	4ba5      	ldr	r3, [pc, #660]	; (80042c4 <ai_platform_network_process+0x2a4>)
 800402e:	6802      	ldr	r2, [r0, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	bf18      	it	ne
 8004034:	2400      	movne	r4, #0
 8004036:	48a4      	ldr	r0, [pc, #656]	; (80042c8 <ai_platform_network_process+0x2a8>)
 8004038:	4ba4      	ldr	r3, [pc, #656]	; (80042cc <ai_platform_network_process+0x2ac>)
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	6002      	str	r2, [r0, #0]
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2a00      	cmp	r2, #0
 800404a:	d1fc      	bne.n	8004046 <ai_platform_network_process+0x26>
 800404c:	4ba0      	ldr	r3, [pc, #640]	; (80042d0 <ai_platform_network_process+0x2b0>)
 800404e:	4aa1      	ldr	r2, [pc, #644]	; (80042d4 <ai_platform_network_process+0x2b4>)
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <ai_platform_network_process+0x2b8>)
 8004056:	429a      	cmp	r2, r3
 8004058:	d000      	beq.n	800405c <ai_platform_network_process+0x3c>
 800405a:	e7fe      	b.n	800405a <ai_platform_network_process+0x3a>
 800405c:	2c00      	cmp	r4, #0
 800405e:	d066      	beq.n	800412e <ai_platform_network_process+0x10e>
 8004060:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8004064:	b107      	cbz	r7, 8004068 <ai_platform_network_process+0x48>
 8004066:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8004068:	68e3      	ldr	r3, [r4, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2600      	movs	r6, #0
 8004070:	2b03      	cmp	r3, #3
 8004072:	6166      	str	r6, [r4, #20]
 8004074:	f040 80fe 	bne.w	8004274 <ai_platform_network_process+0x254>
 8004078:	2900      	cmp	r1, #0
 800407a:	d07f      	beq.n	800417c <ai_platform_network_process+0x15c>
 800407c:	2f00      	cmp	r7, #0
 800407e:	d07d      	beq.n	800417c <ai_platform_network_process+0x15c>
 8004080:	883b      	ldrh	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d07a      	beq.n	800417c <ai_platform_network_process+0x15c>
 8004086:	460d      	mov	r5, r1
 8004088:	46a0      	mov	r8, r4
 800408a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800408e:	429e      	cmp	r6, r3
 8004090:	d27d      	bcs.n	800418e <ai_platform_network_process+0x16e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d07a      	beq.n	800418e <ai_platform_network_process+0x16e>
 8004098:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800409c:	2c00      	cmp	r4, #0
 800409e:	d076      	beq.n	800418e <ai_platform_network_process+0x16e>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 80040a8:	d067      	beq.n	800417a <ai_platform_network_process+0x15a>
 80040aa:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80040ae:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80040b2:	69a0      	ldr	r0, [r4, #24]
 80040b4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80040b8:	6841      	ldr	r1, [r0, #4]
 80040ba:	fb0b f30e 	mul.w	r3, fp, lr
 80040be:	fb0c f303 	mul.w	r3, ip, r3
 80040c2:	4299      	cmp	r1, r3
 80040c4:	d350      	bcc.n	8004168 <ai_platform_network_process+0x148>
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	455a      	cmp	r2, fp
 80040cc:	d14c      	bne.n	8004168 <ai_platform_network_process+0x148>
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	4572      	cmp	r2, lr
 80040d2:	d149      	bne.n	8004168 <ai_platform_network_process+0x148>
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	459c      	cmp	ip, r3
 80040d8:	d146      	bne.n	8004168 <ai_platform_network_process+0x148>
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	f000 fe7a 	bl	8004dd4 <ai_array_get_byte_size>
 80040e0:	68e2      	ldr	r2, [r4, #12]
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	68d2      	ldr	r2, [r2, #12]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	fb03 f302 	mul.w	r3, r3, r2
 80040ec:	4298      	cmp	r0, r3
 80040ee:	d33b      	bcc.n	8004168 <ai_platform_network_process+0x148>
 80040f0:	69a3      	ldr	r3, [r4, #24]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	f000 fe22 	bl	8004d3c <ai_array_to_buffer_fmt>
 80040f8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80040fc:	4043      	eors	r3, r0
 80040fe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004102:	d128      	bne.n	8004156 <ai_platform_network_process+0x136>
 8004104:	68eb      	ldr	r3, [r5, #12]
 8004106:	b1f3      	cbz	r3, 8004146 <ai_platform_network_process+0x126>
 8004108:	f8b5 b000 	ldrh.w	fp, [r5]
 800410c:	f1bb 0f00 	cmp.w	fp, #0
 8004110:	d012      	beq.n	8004138 <ai_platform_network_process+0x118>
 8004112:	4623      	mov	r3, r4
 8004114:	f105 020c 	add.w	r2, r5, #12
 8004118:	4629      	mov	r1, r5
 800411a:	4650      	mov	r0, sl
 800411c:	f7ff fc00 	bl	8003920 <_platform_network_state_setup.isra.1>
 8004120:	45d9      	cmp	r9, fp
 8004122:	883b      	ldrh	r3, [r7, #0]
 8004124:	bf38      	it	cc
 8004126:	46d9      	movcc	r9, fp
 8004128:	3601      	adds	r6, #1
 800412a:	3518      	adds	r5, #24
 800412c:	e7af      	b.n	800408e <ai_platform_network_process+0x6e>
 800412e:	46a3      	mov	fp, r4
 8004130:	4658      	mov	r0, fp
 8004132:	b003      	add	sp, #12
 8004134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004138:	f108 0010 	add.w	r0, r8, #16
 800413c:	2221      	movs	r2, #33	; 0x21
 800413e:	2112      	movs	r1, #18
 8004140:	f000 f980 	bl	8004444 <core_set_error>
 8004144:	e7f4      	b.n	8004130 <ai_platform_network_process+0x110>
 8004146:	f108 0010 	add.w	r0, r8, #16
 800414a:	2217      	movs	r2, #23
 800414c:	2112      	movs	r1, #18
 800414e:	469b      	mov	fp, r3
 8004150:	f000 f978 	bl	8004444 <core_set_error>
 8004154:	e7ec      	b.n	8004130 <ai_platform_network_process+0x110>
 8004156:	f108 0010 	add.w	r0, r8, #16
 800415a:	2219      	movs	r2, #25
 800415c:	2112      	movs	r1, #18
 800415e:	f000 f971 	bl	8004444 <core_set_error>
 8004162:	f04f 0b00 	mov.w	fp, #0
 8004166:	e7e3      	b.n	8004130 <ai_platform_network_process+0x110>
 8004168:	f108 0010 	add.w	r0, r8, #16
 800416c:	2218      	movs	r2, #24
 800416e:	2112      	movs	r1, #18
 8004170:	f000 f968 	bl	8004444 <core_set_error>
 8004174:	f04f 0b00 	mov.w	fp, #0
 8004178:	e7da      	b.n	8004130 <ai_platform_network_process+0x110>
 800417a:	4644      	mov	r4, r8
 800417c:	f104 0010 	add.w	r0, r4, #16
 8004180:	2217      	movs	r2, #23
 8004182:	2112      	movs	r1, #18
 8004184:	f000 f95e 	bl	8004444 <core_set_error>
 8004188:	f04f 0b00 	mov.w	fp, #0
 800418c:	e7d0      	b.n	8004130 <ai_platform_network_process+0x110>
 800418e:	9a01      	ldr	r2, [sp, #4]
 8004190:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8004194:	4644      	mov	r4, r8
 8004196:	2a00      	cmp	r2, #0
 8004198:	f000 80a2 	beq.w	80042e0 <ai_platform_network_process+0x2c0>
 800419c:	2b01      	cmp	r3, #1
 800419e:	f240 8140 	bls.w	8004422 <ai_platform_network_process+0x402>
 80041a2:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80041a6:	f118 0f0c 	cmn.w	r8, #12
 80041aa:	f000 813a 	beq.w	8004422 <ai_platform_network_process+0x402>
 80041ae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8135 	beq.w	8004422 <ai_platform_network_process+0x402>
 80041b8:	9d01      	ldr	r5, [sp, #4]
 80041ba:	2700      	movs	r7, #0
 80041bc:	3504      	adds	r5, #4
 80041be:	429f      	cmp	r7, r3
 80041c0:	f080 808c 	bcs.w	80042dc <ai_platform_network_process+0x2bc>
 80041c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8087 	beq.w	80042dc <ai_platform_network_process+0x2bc>
 80041ce:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	f000 8082 	beq.w	80042dc <ai_platform_network_process+0x2bc>
 80041d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80041e2:	d067      	beq.n	80042b4 <ai_platform_network_process+0x294>
 80041e4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80041e8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80041ec:	69b0      	ldr	r0, [r6, #24]
 80041ee:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80041f2:	6841      	ldr	r1, [r0, #4]
 80041f4:	fb0b f30e 	mul.w	r3, fp, lr
 80041f8:	fb0c f303 	mul.w	r3, ip, r3
 80041fc:	4299      	cmp	r1, r3
 80041fe:	f0c0 8110 	bcc.w	8004422 <ai_platform_network_process+0x402>
 8004202:	68f3      	ldr	r3, [r6, #12]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	455a      	cmp	r2, fp
 8004208:	f040 810b 	bne.w	8004422 <ai_platform_network_process+0x402>
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	4572      	cmp	r2, lr
 8004210:	f040 8107 	bne.w	8004422 <ai_platform_network_process+0x402>
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	459c      	cmp	ip, r3
 8004218:	f040 8103 	bne.w	8004422 <ai_platform_network_process+0x402>
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f000 fdd9 	bl	8004dd4 <ai_array_get_byte_size>
 8004222:	68f2      	ldr	r2, [r6, #12]
 8004224:	6973      	ldr	r3, [r6, #20]
 8004226:	68d2      	ldr	r2, [r2, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	fb03 f302 	mul.w	r3, r3, r2
 800422e:	4298      	cmp	r0, r3
 8004230:	f0c0 80f7 	bcc.w	8004422 <ai_platform_network_process+0x402>
 8004234:	69b3      	ldr	r3, [r6, #24]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	f000 fd80 	bl	8004d3c <ai_array_to_buffer_fmt>
 800423c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004240:	4043      	eors	r3, r0
 8004242:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004246:	d12c      	bne.n	80042a2 <ai_platform_network_process+0x282>
 8004248:	68eb      	ldr	r3, [r5, #12]
 800424a:	b313      	cbz	r3, 8004292 <ai_platform_network_process+0x272>
 800424c:	f8b5 b000 	ldrh.w	fp, [r5]
 8004250:	f1bb 0f00 	cmp.w	fp, #0
 8004254:	d016      	beq.n	8004284 <ai_platform_network_process+0x264>
 8004256:	4633      	mov	r3, r6
 8004258:	f105 020c 	add.w	r2, r5, #12
 800425c:	4629      	mov	r1, r5
 800425e:	4650      	mov	r0, sl
 8004260:	f7ff fb5e 	bl	8003920 <_platform_network_state_setup.isra.1>
 8004264:	45d9      	cmp	r9, fp
 8004266:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800426a:	bf38      	it	cc
 800426c:	46d9      	movcc	r9, fp
 800426e:	3701      	adds	r7, #1
 8004270:	3518      	adds	r5, #24
 8004272:	e7a4      	b.n	80041be <ai_platform_network_process+0x19e>
 8004274:	f104 0010 	add.w	r0, r4, #16
 8004278:	2230      	movs	r2, #48	; 0x30
 800427a:	2111      	movs	r1, #17
 800427c:	f000 f8e2 	bl	8004444 <core_set_error>
 8004280:	46b3      	mov	fp, r6
 8004282:	e755      	b.n	8004130 <ai_platform_network_process+0x110>
 8004284:	f104 0010 	add.w	r0, r4, #16
 8004288:	2221      	movs	r2, #33	; 0x21
 800428a:	2113      	movs	r1, #19
 800428c:	f000 f8da 	bl	8004444 <core_set_error>
 8004290:	e74e      	b.n	8004130 <ai_platform_network_process+0x110>
 8004292:	f104 0010 	add.w	r0, r4, #16
 8004296:	2217      	movs	r2, #23
 8004298:	2113      	movs	r1, #19
 800429a:	469b      	mov	fp, r3
 800429c:	f000 f8d2 	bl	8004444 <core_set_error>
 80042a0:	e746      	b.n	8004130 <ai_platform_network_process+0x110>
 80042a2:	f104 0010 	add.w	r0, r4, #16
 80042a6:	2219      	movs	r2, #25
 80042a8:	2113      	movs	r1, #19
 80042aa:	f000 f8cb 	bl	8004444 <core_set_error>
 80042ae:	f04f 0b00 	mov.w	fp, #0
 80042b2:	e73d      	b.n	8004130 <ai_platform_network_process+0x110>
 80042b4:	f104 0010 	add.w	r0, r4, #16
 80042b8:	2217      	movs	r2, #23
 80042ba:	2113      	movs	r1, #19
 80042bc:	f000 f8c2 	bl	8004444 <core_set_error>
 80042c0:	46d3      	mov	fp, sl
 80042c2:	e735      	b.n	8004130 <ai_platform_network_process+0x110>
 80042c4:	a1c00100 	.word	0xa1c00100
 80042c8:	e0002000 	.word	0xe0002000
 80042cc:	40023008 	.word	0x40023008
 80042d0:	40023000 	.word	0x40023000
 80042d4:	f407a5c2 	.word	0xf407a5c2
 80042d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80042dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80042e0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8099 	beq.w	800441c <ai_platform_network_process+0x3fc>
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80042ee:	f240 8093 	bls.w	8004418 <ai_platform_network_process+0x3f8>
 80042f2:	f105 070c 	add.w	r7, r5, #12
 80042f6:	8ae0      	ldrh	r0, [r4, #22]
 80042f8:	8aa3      	ldrh	r3, [r4, #20]
 80042fa:	4283      	cmp	r3, r0
 80042fc:	d977      	bls.n	80043ee <ai_platform_network_process+0x3ce>
 80042fe:	46a3      	mov	fp, r4
 8004300:	2d00      	cmp	r5, #0
 8004302:	d032      	beq.n	800436a <ai_platform_network_process+0x34a>
 8004304:	882b      	ldrh	r3, [r5, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02f      	beq.n	800436a <ai_platform_network_process+0x34a>
 800430a:	686b      	ldr	r3, [r5, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02c      	beq.n	800436a <ai_platform_network_process+0x34a>
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f04f 0800 	mov.w	r8, #0
 8004316:	b343      	cbz	r3, 800436a <ai_platform_network_process+0x34a>
 8004318:	68a9      	ldr	r1, [r5, #8]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	f8d1 a000 	ldr.w	sl, [r1]
 8004320:	6814      	ldr	r4, [r2, #0]
 8004322:	6890      	ldr	r0, [r2, #8]
 8004324:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004328:	eb0a 0609 	add.w	r6, sl, r9
 800432c:	00a4      	lsls	r4, r4, #2
 800432e:	6871      	ldr	r1, [r6, #4]
 8004330:	d45f      	bmi.n	80043f2 <ai_platform_network_process+0x3d2>
 8004332:	68d4      	ldr	r4, [r2, #12]
 8004334:	1b00      	subs	r0, r0, r4
 8004336:	4401      	add	r1, r0
 8004338:	6091      	str	r1, [r2, #8]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	6872      	ldr	r2, [r6, #4]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004344:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004348:	440b      	add	r3, r1
 800434a:	4293      	cmp	r3, r2
 800434c:	bf24      	itt	cs
 800434e:	68f3      	ldrcs	r3, [r6, #12]
 8004350:	1ad3      	subcs	r3, r2, r3
 8004352:	6073      	str	r3, [r6, #4]
 8004354:	882b      	ldrh	r3, [r5, #0]
 8004356:	f108 0801 	add.w	r8, r8, #1
 800435a:	4598      	cmp	r8, r3
 800435c:	d205      	bcs.n	800436a <ai_platform_network_process+0x34a>
 800435e:	686b      	ldr	r3, [r5, #4]
 8004360:	b11b      	cbz	r3, 800436a <ai_platform_network_process+0x34a>
 8004362:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1d6      	bne.n	8004318 <ai_platform_network_process+0x2f8>
 800436a:	4658      	mov	r0, fp
 800436c:	f000 fc80 	bl	8004c70 <ai_layers_forward_all>
 8004370:	2f00      	cmp	r7, #0
 8004372:	d032      	beq.n	80043da <ai_platform_network_process+0x3ba>
 8004374:	883b      	ldrh	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d02f      	beq.n	80043da <ai_platform_network_process+0x3ba>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	b36b      	cbz	r3, 80043da <ai_platform_network_process+0x3ba>
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	b358      	cbz	r0, 80043da <ai_platform_network_process+0x3ba>
 8004382:	f04f 0800 	mov.w	r8, #0
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6981      	ldr	r1, [r0, #24]
 800438a:	f8d3 a000 	ldr.w	sl, [r3]
 800438e:	680c      	ldr	r4, [r1, #0]
 8004390:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004394:	eb0a 0609 	add.w	r6, sl, r9
 8004398:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800439c:	00a4      	lsls	r4, r4, #2
 800439e:	eb0c 0302 	add.w	r3, ip, r2
 80043a2:	d42a      	bmi.n	80043fa <ai_platform_network_process+0x3da>
 80043a4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bf24      	itt	cs
 80043ac:	68f3      	ldrcs	r3, [r6, #12]
 80043ae:	1ad3      	subcs	r3, r2, r3
 80043b0:	6073      	str	r3, [r6, #4]
 80043b2:	6981      	ldr	r1, [r0, #24]
 80043b4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80043b8:	1b12      	subs	r2, r2, r4
 80043ba:	4413      	add	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
 80043be:	6983      	ldr	r3, [r0, #24]
 80043c0:	6872      	ldr	r2, [r6, #4]
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	883b      	ldrh	r3, [r7, #0]
 80043c6:	f108 0801 	add.w	r8, r8, #1
 80043ca:	4598      	cmp	r8, r3
 80043cc:	d205      	bcs.n	80043da <ai_platform_network_process+0x3ba>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	b11b      	cbz	r3, 80043da <ai_platform_network_process+0x3ba>
 80043d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d1d5      	bne.n	8004386 <ai_platform_network_process+0x366>
 80043da:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80043de:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80043e2:	3001      	adds	r0, #1
 80043e4:	b280      	uxth	r0, r0
 80043e6:	4283      	cmp	r3, r0
 80043e8:	f8ab 0016 	strh.w	r0, [fp, #22]
 80043ec:	d888      	bhi.n	8004300 <ai_platform_network_process+0x2e0>
 80043ee:	4683      	mov	fp, r0
 80043f0:	e69e      	b.n	8004130 <ai_platform_network_process+0x110>
 80043f2:	68b2      	ldr	r2, [r6, #8]
 80043f4:	f000 fd42 	bl	8004e7c <memcpy>
 80043f8:	e7a2      	b.n	8004340 <ai_platform_network_process+0x320>
 80043fa:	6889      	ldr	r1, [r1, #8]
 80043fc:	4660      	mov	r0, ip
 80043fe:	f000 fd3d 	bl	8004e7c <memcpy>
 8004402:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004406:	f85a 2009 	ldr.w	r2, [sl, r9]
 800440a:	440b      	add	r3, r1
 800440c:	4293      	cmp	r3, r2
 800440e:	bf24      	itt	cs
 8004410:	68f3      	ldrcs	r3, [r6, #12]
 8004412:	1ad3      	subcs	r3, r2, r3
 8004414:	6073      	str	r3, [r6, #4]
 8004416:	e7d5      	b.n	80043c4 <ai_platform_network_process+0x3a4>
 8004418:	2700      	movs	r7, #0
 800441a:	e76c      	b.n	80042f6 <ai_platform_network_process+0x2d6>
 800441c:	461d      	mov	r5, r3
 800441e:	461f      	mov	r7, r3
 8004420:	e769      	b.n	80042f6 <ai_platform_network_process+0x2d6>
 8004422:	f104 0010 	add.w	r0, r4, #16
 8004426:	2218      	movs	r2, #24
 8004428:	2113      	movs	r1, #19
 800442a:	f000 f80b 	bl	8004444 <core_set_error>
 800442e:	f04f 0b00 	mov.w	fp, #0
 8004432:	e67d      	b.n	8004130 <ai_platform_network_process+0x110>

08004434 <core_init>:
 8004434:	2001      	movs	r0, #1
 8004436:	4770      	bx	lr

08004438 <core_get_error>:
 8004438:	4603      	mov	r3, r0
 800443a:	2200      	movs	r2, #0
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop

08004444 <core_set_error>:
 8004444:	7803      	ldrb	r3, [r0, #0]
 8004446:	b933      	cbnz	r3, 8004456 <core_set_error+0x12>
 8004448:	7001      	strb	r1, [r0, #0]
 800444a:	6803      	ldr	r3, [r0, #0]
 800444c:	f362 231f 	bfi	r3, r2, #8, #24
 8004450:	6003      	str	r3, [r0, #0]
 8004452:	2001      	movs	r0, #1
 8004454:	4770      	bx	lr
 8004456:	2000      	movs	r0, #0
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop

0800445c <ai_dict8_dot_array_f32>:
 800445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004460:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004464:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8004468:	f000 80c0 	beq.w	80045ec <ai_dict8_dot_array_f32+0x190>
 800446c:	f101 0408 	add.w	r4, r1, #8
 8004470:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004474:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80045f4 <ai_dict8_dot_array_f32+0x198>
 8004478:	eb04 0e09 	add.w	lr, r4, r9
 800447c:	f103 0520 	add.w	r5, r3, #32
 8004480:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8004484:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8004488:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800448c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8004490:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8004494:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8004498:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800449c:	ed55 3a04 	vldr	s7, [r5, #-16]
 80044a0:	ed55 4a03 	vldr	s9, [r5, #-12]
 80044a4:	ed55 5a02 	vldr	s11, [r5, #-8]
 80044a8:	ed55 6a01 	vldr	s13, [r5, #-4]
 80044ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80044b0:	edd6 7a00 	vldr	s15, [r6]
 80044b4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80044b8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80044bc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80044c0:	ed9a 3a00 	vldr	s6, [sl]
 80044c4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80044c8:	eee3 7a05 	vfma.f32	s15, s6, s10
 80044cc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80044d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80044d4:	ed97 3a00 	vldr	s6, [r7]
 80044d8:	ed96 5a00 	vldr	s10, [r6]
 80044dc:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80044e0:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80044e4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80044e8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80044ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80044f0:	ed9a 3a00 	vldr	s6, [sl]
 80044f4:	ed96 4a00 	vldr	s8, [r6]
 80044f8:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80044fc:	eee5 7a06 	vfma.f32	s15, s10, s12
 8004500:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004504:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004508:	ed97 5a00 	vldr	s10, [r7]
 800450c:	ed96 6a00 	vldr	s12, [r6]
 8004510:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004514:	3408      	adds	r4, #8
 8004516:	45a6      	cmp	lr, r4
 8004518:	f105 0520 	add.w	r5, r5, #32
 800451c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004520:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004524:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800452c:	d1a8      	bne.n	8004480 <ai_dict8_dot_array_f32+0x24>
 800452e:	4449      	add	r1, r9
 8004530:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004534:	f01c 0c07 	ands.w	ip, ip, #7
 8004538:	d050      	beq.n	80045dc <ai_dict8_dot_array_f32+0x180>
 800453a:	780c      	ldrb	r4, [r1, #0]
 800453c:	edd3 6a00 	vldr	s13, [r3]
 8004540:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004544:	edd4 7a00 	vldr	s15, [r4]
 8004548:	f1bc 0f01 	cmp.w	ip, #1
 800454c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004550:	d044      	beq.n	80045dc <ai_dict8_dot_array_f32+0x180>
 8004552:	784c      	ldrb	r4, [r1, #1]
 8004554:	edd3 6a01 	vldr	s13, [r3, #4]
 8004558:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800455c:	edd4 7a00 	vldr	s15, [r4]
 8004560:	f1bc 0f02 	cmp.w	ip, #2
 8004564:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004568:	d038      	beq.n	80045dc <ai_dict8_dot_array_f32+0x180>
 800456a:	788c      	ldrb	r4, [r1, #2]
 800456c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004570:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004574:	edd4 7a00 	vldr	s15, [r4]
 8004578:	f1bc 0f03 	cmp.w	ip, #3
 800457c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004580:	d02c      	beq.n	80045dc <ai_dict8_dot_array_f32+0x180>
 8004582:	78cc      	ldrb	r4, [r1, #3]
 8004584:	edd3 6a03 	vldr	s13, [r3, #12]
 8004588:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800458c:	edd4 7a00 	vldr	s15, [r4]
 8004590:	f1bc 0f04 	cmp.w	ip, #4
 8004594:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004598:	d020      	beq.n	80045dc <ai_dict8_dot_array_f32+0x180>
 800459a:	790c      	ldrb	r4, [r1, #4]
 800459c:	edd3 6a04 	vldr	s13, [r3, #16]
 80045a0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80045a4:	edd4 7a00 	vldr	s15, [r4]
 80045a8:	f1bc 0f05 	cmp.w	ip, #5
 80045ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80045b0:	d014      	beq.n	80045dc <ai_dict8_dot_array_f32+0x180>
 80045b2:	794c      	ldrb	r4, [r1, #5]
 80045b4:	edd3 6a05 	vldr	s13, [r3, #20]
 80045b8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80045bc:	edd4 7a00 	vldr	s15, [r4]
 80045c0:	f1bc 0f06 	cmp.w	ip, #6
 80045c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80045c8:	d008      	beq.n	80045dc <ai_dict8_dot_array_f32+0x180>
 80045ca:	7989      	ldrb	r1, [r1, #6]
 80045cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80045d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80045d4:	edd2 6a00 	vldr	s13, [r2]
 80045d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80045dc:	edd0 7a00 	vldr	s15, [r0]
 80045e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045e4:	ed80 7a00 	vstr	s14, [r0]
 80045e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ec:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80045f4 <ai_dict8_dot_array_f32+0x198>
 80045f0:	e7a0      	b.n	8004534 <ai_dict8_dot_array_f32+0xd8>
 80045f2:	bf00      	nop
 80045f4:	00000000 	.word	0x00000000

080045f8 <ai_dict4_dot_array_f32>:
 80045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80045fe:	f027 0c01 	bic.w	ip, r7, #1
 8004602:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8004606:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800460a:	f000 80ae 	beq.w	800476a <ai_dict4_dot_array_f32+0x172>
 800460e:	1d0d      	adds	r5, r1, #4
 8004610:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8004614:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004770 <ai_dict4_dot_array_f32+0x178>
 8004618:	eb05 0e09 	add.w	lr, r5, r9
 800461c:	f103 0420 	add.w	r4, r3, #32
 8004620:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8004624:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8004628:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800462c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8004630:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8004634:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8004638:	ed14 5a04 	vldr	s10, [r4, #-16]
 800463c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8004640:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004644:	ed54 6a01 	vldr	s13, [r4, #-4]
 8004648:	f006 0a0f 	and.w	sl, r6, #15
 800464c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004650:	edda 7a00 	vldr	s15, [sl]
 8004654:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8004658:	0936      	lsrs	r6, r6, #4
 800465a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800465e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004662:	ed96 3a00 	vldr	s6, [r6]
 8004666:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800466a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800466e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004672:	f00b 0b0f 	and.w	fp, fp, #15
 8004676:	edd6 3a00 	vldr	s7, [r6]
 800467a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800467e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004682:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004686:	3504      	adds	r5, #4
 8004688:	ed9b 4a00 	vldr	s8, [fp]
 800468c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8004690:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004694:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004698:	f00a 0a0f 	and.w	sl, sl, #15
 800469c:	eddb 4a00 	vldr	s9, [fp]
 80046a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80046a4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80046a8:	45ae      	cmp	lr, r5
 80046aa:	ed9a 5a00 	vldr	s10, [sl]
 80046ae:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80046b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80046b6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80046ba:	f006 060f 	and.w	r6, r6, #15
 80046be:	edda 5a00 	vldr	s11, [sl]
 80046c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80046c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80046ca:	f104 0420 	add.w	r4, r4, #32
 80046ce:	ed96 6a00 	vldr	s12, [r6]
 80046d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80046d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046da:	d1a1      	bne.n	8004620 <ai_dict4_dot_array_f32+0x28>
 80046dc:	4449      	add	r1, r9
 80046de:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80046e2:	459c      	cmp	ip, r3
 80046e4:	d92d      	bls.n	8004742 <ai_dict4_dot_array_f32+0x14a>
 80046e6:	f10c 0c07 	add.w	ip, ip, #7
 80046ea:	f103 0508 	add.w	r5, r3, #8
 80046ee:	ebac 0c05 	sub.w	ip, ip, r5
 80046f2:	f02c 0407 	bic.w	r4, ip, #7
 80046f6:	f103 0810 	add.w	r8, r3, #16
 80046fa:	44a0      	add	r8, r4
 80046fc:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8004700:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8004704:	ed15 6a01 	vldr	s12, [r5, #-4]
 8004708:	ed55 6a02 	vldr	s13, [r5, #-8]
 800470c:	f004 060f 	and.w	r6, r4, #15
 8004710:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004714:	0924      	lsrs	r4, r4, #4
 8004716:	edd6 7a00 	vldr	s15, [r6]
 800471a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800471e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004722:	ed94 6a00 	vldr	s12, [r4]
 8004726:	eee6 7a26 	vfma.f32	s15, s12, s13
 800472a:	3508      	adds	r5, #8
 800472c:	45a8      	cmp	r8, r5
 800472e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004732:	d1e5      	bne.n	8004700 <ai_dict4_dot_array_f32+0x108>
 8004734:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004738:	f10c 0c01 	add.w	ip, ip, #1
 800473c:	4461      	add	r1, ip
 800473e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004742:	07fc      	lsls	r4, r7, #31
 8004744:	d509      	bpl.n	800475a <ai_dict4_dot_array_f32+0x162>
 8004746:	7809      	ldrb	r1, [r1, #0]
 8004748:	edd3 7a00 	vldr	s15, [r3]
 800474c:	090b      	lsrs	r3, r1, #4
 800474e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004752:	edd2 6a00 	vldr	s13, [r2]
 8004756:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800475a:	edd0 7a00 	vldr	s15, [r0]
 800475e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004762:	ed80 7a00 	vstr	s14, [r0]
 8004766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004770 <ai_dict4_dot_array_f32+0x178>
 800476e:	e7b8      	b.n	80046e2 <ai_dict4_dot_array_f32+0xea>
 8004770:	00000000 	.word	0x00000000

08004774 <forward_dense>:
 8004774:	6982      	ldr	r2, [r0, #24]
 8004776:	8813      	ldrh	r3, [r2, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 81ca 	beq.w	8004b12 <forward_dense+0x39e>
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	6850      	ldr	r0, [r2, #4]
 8004782:	b100      	cbz	r0, 8004786 <forward_dense+0x12>
 8004784:	6800      	ldr	r0, [r0, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	f240 81c0 	bls.w	8004b0c <forward_dense+0x398>
 800478c:	6911      	ldr	r1, [r2, #16]
 800478e:	b101      	cbz	r1, 8004792 <forward_dense+0x1e>
 8004790:	6809      	ldr	r1, [r1, #0]
 8004792:	2b02      	cmp	r3, #2
 8004794:	f000 81bf 	beq.w	8004b16 <forward_dense+0x3a2>
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	ed2d 8b10 	vpush	{d8-d15}
 80047a0:	69d3      	ldr	r3, [r2, #28]
 80047a2:	b091      	sub	sp, #68	; 0x44
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 820b 	beq.w	8004bc0 <forward_dense+0x44c>
 80047aa:	681c      	ldr	r4, [r3, #0]
 80047ac:	9408      	str	r4, [sp, #32]
 80047ae:	f112 0418 	adds.w	r4, r2, #24
 80047b2:	f000 81df 	beq.w	8004b74 <forward_dense+0x400>
 80047b6:	8b12      	ldrh	r2, [r2, #24]
 80047b8:	2a01      	cmp	r2, #1
 80047ba:	f240 81fe 	bls.w	8004bba <forward_dense+0x446>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 81da 	beq.w	8004b78 <forward_dense+0x404>
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	9306      	str	r3, [sp, #24]
 80047c8:	9b08      	ldr	r3, [sp, #32]
 80047ca:	68cc      	ldr	r4, [r1, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	68c5      	ldr	r5, [r0, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80047d6:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80047da:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80047de:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80047e2:	fa4c f505 	asr.w	r5, ip, r5
 80047e6:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80047ea:	950b      	str	r5, [sp, #44]	; 0x2c
 80047ec:	2a04      	cmp	r2, #4
 80047ee:	fb07 f506 	mul.w	r5, r7, r6
 80047f2:	6864      	ldr	r4, [r4, #4]
 80047f4:	9507      	str	r5, [sp, #28]
 80047f6:	f000 81dd 	beq.w	8004bb4 <forward_dense+0x440>
 80047fa:	2a08      	cmp	r2, #8
 80047fc:	f000 81da 	beq.w	8004bb4 <forward_dense+0x440>
 8004800:	f04f 0a00 	mov.w	sl, #0
 8004804:	698a      	ldr	r2, [r1, #24]
 8004806:	6981      	ldr	r1, [r0, #24]
 8004808:	6890      	ldr	r0, [r2, #8]
 800480a:	9a08      	ldr	r2, [sp, #32]
 800480c:	9004      	str	r0, [sp, #16]
 800480e:	6952      	ldr	r2, [r2, #20]
 8004810:	688f      	ldr	r7, [r1, #8]
 8004812:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004816:	00a2      	lsls	r2, r4, #2
 8004818:	9209      	str	r2, [sp, #36]	; 0x24
 800481a:	1886      	adds	r6, r0, r2
 800481c:	9a07      	ldr	r2, [sp, #28]
 800481e:	2a00      	cmp	r2, #0
 8004820:	f000 81c3 	beq.w	8004baa <forward_dense+0x436>
 8004824:	f1a8 0210 	sub.w	r2, r8, #16
 8004828:	0912      	lsrs	r2, r2, #4
 800482a:	3201      	adds	r2, #1
 800482c:	0192      	lsls	r2, r2, #6
 800482e:	920c      	str	r2, [sp, #48]	; 0x30
 8004830:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004834:	920a      	str	r2, [sp, #40]	; 0x28
 8004836:	689d      	ldr	r5, [r3, #8]
 8004838:	9b06      	ldr	r3, [sp, #24]
 800483a:	eddf aad0 	vldr	s21, [pc, #832]	; 8004b7c <forward_dense+0x408>
 800483e:	2200      	movs	r2, #0
 8004840:	9205      	str	r2, [sp, #20]
 8004842:	f008 020f 	and.w	r2, r8, #15
 8004846:	920d      	str	r2, [sp, #52]	; 0x34
 8004848:	2b00      	cmp	r3, #0
 800484a:	d043      	beq.n	80048d4 <forward_dense+0x160>
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	689c      	ldr	r4, [r3, #8]
 8004850:	9b04      	ldr	r3, [sp, #16]
 8004852:	f1ba 0f00 	cmp.w	sl, #0
 8004856:	d042      	beq.n	80048de <forward_dense+0x16a>
 8004858:	42b3      	cmp	r3, r6
 800485a:	d22a      	bcs.n	80048b2 <forward_dense+0x13e>
 800485c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800485e:	469b      	mov	fp, r3
 8004860:	ab0f      	add	r3, sp, #60	; 0x3c
 8004862:	9303      	str	r3, [sp, #12]
 8004864:	2a04      	cmp	r2, #4
 8004866:	4633      	mov	r3, r6
 8004868:	4646      	mov	r6, r8
 800486a:	4698      	mov	r8, r3
 800486c:	f000 8156 	beq.w	8004b1c <forward_dense+0x3a8>
 8004870:	2c00      	cmp	r4, #0
 8004872:	f000 8185 	beq.w	8004b80 <forward_dense+0x40c>
 8004876:	f8d4 c000 	ldr.w	ip, [r4]
 800487a:	9803      	ldr	r0, [sp, #12]
 800487c:	9600      	str	r6, [sp, #0]
 800487e:	463b      	mov	r3, r7
 8004880:	4629      	mov	r1, r5
 8004882:	4652      	mov	r2, sl
 8004884:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004888:	f7ff fde8 	bl	800445c <ai_dict8_dot_array_f32>
 800488c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800488e:	f84b 3b04 	str.w	r3, [fp], #4
 8004892:	45c3      	cmp	fp, r8
 8004894:	f104 0404 	add.w	r4, r4, #4
 8004898:	444d      	add	r5, r9
 800489a:	d3e9      	bcc.n	8004870 <forward_dense+0xfc>
 800489c:	4643      	mov	r3, r8
 800489e:	46b0      	mov	r8, r6
 80048a0:	461e      	mov	r6, r3
 80048a2:	9a04      	ldr	r2, [sp, #16]
 80048a4:	43d3      	mvns	r3, r2
 80048a6:	4433      	add	r3, r6
 80048a8:	f023 0303 	bic.w	r3, r3, #3
 80048ac:	3304      	adds	r3, #4
 80048ae:	18d3      	adds	r3, r2, r3
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048b4:	9b05      	ldr	r3, [sp, #20]
 80048b6:	4417      	add	r7, r2
 80048b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ba:	4416      	add	r6, r2
 80048bc:	9a07      	ldr	r2, [sp, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	4293      	cmp	r3, r2
 80048c2:	9305      	str	r3, [sp, #20]
 80048c4:	f000 8171 	beq.w	8004baa <forward_dense+0x436>
 80048c8:	9b08      	ldr	r3, [sp, #32]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	689d      	ldr	r5, [r3, #8]
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1bb      	bne.n	800484c <forward_dense+0xd8>
 80048d4:	461c      	mov	r4, r3
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	f1ba 0f00 	cmp.w	sl, #0
 80048dc:	d1bc      	bne.n	8004858 <forward_dense+0xe4>
 80048de:	42b3      	cmp	r3, r6
 80048e0:	d2e7      	bcs.n	80048b2 <forward_dense+0x13e>
 80048e2:	4618      	mov	r0, r3
 80048e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048e6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80048ea:	eb07 0c03 	add.w	ip, r7, r3
 80048ee:	469e      	mov	lr, r3
 80048f0:	2c00      	cmp	r4, #0
 80048f2:	f000 80ff 	beq.w	8004af4 <forward_dense+0x380>
 80048f6:	f1b8 0f0f 	cmp.w	r8, #15
 80048fa:	edd4 fa00 	vldr	s31, [r4]
 80048fe:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8004b7c <forward_dense+0x408>
 8004902:	f104 0404 	add.w	r4, r4, #4
 8004906:	f240 80fd 	bls.w	8004b04 <forward_dense+0x390>
 800490a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800490e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004912:	4641      	mov	r1, r8
 8004914:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8004918:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800491c:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004920:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004924:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004928:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800492c:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004930:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004934:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004938:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800493c:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004940:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004944:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004948:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800494c:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004950:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004954:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004958:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800495c:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004960:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004964:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004968:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800496c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004970:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004974:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004978:	ed12 5a03 	vldr	s10, [r2, #-12]
 800497c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004980:	ed12 6a02 	vldr	s12, [r2, #-8]
 8004984:	ed13 7a02 	vldr	s14, [r3, #-8]
 8004988:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800498c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8004990:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004994:	3910      	subs	r1, #16
 8004996:	290f      	cmp	r1, #15
 8004998:	ed53 ea01 	vldr	s29, [r3, #-4]
 800499c:	ed12 ea01 	vldr	s28, [r2, #-4]
 80049a0:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80049a4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80049a8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80049ac:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80049b0:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80049b4:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80049b8:	eee9 7a89 	vfma.f32	s15, s19, s18
 80049bc:	eee8 7a88 	vfma.f32	s15, s17, s16
 80049c0:	eee0 7a20 	vfma.f32	s15, s0, s1
 80049c4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80049c8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80049cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80049d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80049d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80049d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80049dc:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80049e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80049e4:	d896      	bhi.n	8004914 <forward_dense+0x1a0>
 80049e6:	eb05 010e 	add.w	r1, r5, lr
 80049ea:	465b      	mov	r3, fp
 80049ec:	4662      	mov	r2, ip
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d075      	beq.n	8004ade <forward_dense+0x36a>
 80049f2:	ed91 7a00 	vldr	s14, [r1]
 80049f6:	edd2 7a00 	vldr	s15, [r2]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a00:	d06d      	beq.n	8004ade <forward_dense+0x36a>
 8004a02:	ed91 7a01 	vldr	s14, [r1, #4]
 8004a06:	edd2 7a01 	vldr	s15, [r2, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a10:	d065      	beq.n	8004ade <forward_dense+0x36a>
 8004a12:	ed91 7a02 	vldr	s14, [r1, #8]
 8004a16:	edd2 7a02 	vldr	s15, [r2, #8]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a20:	d05d      	beq.n	8004ade <forward_dense+0x36a>
 8004a22:	ed91 7a03 	vldr	s14, [r1, #12]
 8004a26:	edd2 7a03 	vldr	s15, [r2, #12]
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a30:	d055      	beq.n	8004ade <forward_dense+0x36a>
 8004a32:	ed91 7a04 	vldr	s14, [r1, #16]
 8004a36:	edd2 7a04 	vldr	s15, [r2, #16]
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a40:	d04d      	beq.n	8004ade <forward_dense+0x36a>
 8004a42:	ed91 7a05 	vldr	s14, [r1, #20]
 8004a46:	edd2 7a05 	vldr	s15, [r2, #20]
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a50:	d045      	beq.n	8004ade <forward_dense+0x36a>
 8004a52:	ed91 7a06 	vldr	s14, [r1, #24]
 8004a56:	edd2 7a06 	vldr	s15, [r2, #24]
 8004a5a:	2b07      	cmp	r3, #7
 8004a5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a60:	d03d      	beq.n	8004ade <forward_dense+0x36a>
 8004a62:	ed91 7a07 	vldr	s14, [r1, #28]
 8004a66:	edd2 7a07 	vldr	s15, [r2, #28]
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a70:	d035      	beq.n	8004ade <forward_dense+0x36a>
 8004a72:	ed91 7a08 	vldr	s14, [r1, #32]
 8004a76:	edd2 7a08 	vldr	s15, [r2, #32]
 8004a7a:	2b09      	cmp	r3, #9
 8004a7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a80:	d02d      	beq.n	8004ade <forward_dense+0x36a>
 8004a82:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004a86:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004a8a:	2b0a      	cmp	r3, #10
 8004a8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a90:	d025      	beq.n	8004ade <forward_dense+0x36a>
 8004a92:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8004a96:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004a9a:	2b0b      	cmp	r3, #11
 8004a9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004aa0:	d01d      	beq.n	8004ade <forward_dense+0x36a>
 8004aa2:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8004aa6:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ab0:	d015      	beq.n	8004ade <forward_dense+0x36a>
 8004ab2:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8004ab6:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004aba:	2b0d      	cmp	r3, #13
 8004abc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ac0:	d00d      	beq.n	8004ade <forward_dense+0x36a>
 8004ac2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8004ac6:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8004aca:	2b0e      	cmp	r3, #14
 8004acc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ad0:	d005      	beq.n	8004ade <forward_dense+0x36a>
 8004ad2:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8004ad6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004ada:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ade:	444d      	add	r5, r9
 8004ae0:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8004ae4:	ece0 6a01 	vstmia	r0!, {s13}
 8004ae8:	42b0      	cmp	r0, r6
 8004aea:	f4bf aeda 	bcs.w	80048a2 <forward_dense+0x12e>
 8004aee:	2c00      	cmp	r4, #0
 8004af0:	f47f af01 	bne.w	80048f6 <forward_dense+0x182>
 8004af4:	f1b8 0f0f 	cmp.w	r8, #15
 8004af8:	eef0 fa6a 	vmov.f32	s31, s21
 8004afc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004b7c <forward_dense+0x408>
 8004b00:	f63f af03 	bhi.w	800490a <forward_dense+0x196>
 8004b04:	4643      	mov	r3, r8
 8004b06:	4629      	mov	r1, r5
 8004b08:	463a      	mov	r2, r7
 8004b0a:	e770      	b.n	80049ee <forward_dense+0x27a>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	deff      	udf	#255	; 0xff
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	deff      	udf	#255	; 0xff
 8004b16:	2300      	movs	r3, #0
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	deff      	udf	#255	; 0xff
 8004b1c:	b1ac      	cbz	r4, 8004b4a <forward_dense+0x3d6>
 8004b1e:	f8d4 c000 	ldr.w	ip, [r4]
 8004b22:	9803      	ldr	r0, [sp, #12]
 8004b24:	9600      	str	r6, [sp, #0]
 8004b26:	463b      	mov	r3, r7
 8004b28:	4629      	mov	r1, r5
 8004b2a:	4652      	mov	r2, sl
 8004b2c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004b30:	f7ff fd62 	bl	80045f8 <ai_dict4_dot_array_f32>
 8004b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b36:	f84b 3b04 	str.w	r3, [fp], #4
 8004b3a:	45c3      	cmp	fp, r8
 8004b3c:	f104 0404 	add.w	r4, r4, #4
 8004b40:	444d      	add	r5, r9
 8004b42:	f4bf aeab 	bcs.w	800489c <forward_dense+0x128>
 8004b46:	2c00      	cmp	r4, #0
 8004b48:	d1e9      	bne.n	8004b1e <forward_dense+0x3aa>
 8004b4a:	4634      	mov	r4, r6
 8004b4c:	4646      	mov	r6, r8
 8004b4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b52:	9400      	str	r4, [sp, #0]
 8004b54:	463b      	mov	r3, r7
 8004b56:	4629      	mov	r1, r5
 8004b58:	4652      	mov	r2, sl
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004b60:	f7ff fd4a 	bl	80045f8 <ai_dict4_dot_array_f32>
 8004b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b66:	f84b 3b04 	str.w	r3, [fp], #4
 8004b6a:	45b3      	cmp	fp, r6
 8004b6c:	444d      	add	r5, r9
 8004b6e:	d3f0      	bcc.n	8004b52 <forward_dense+0x3de>
 8004b70:	46a0      	mov	r8, r4
 8004b72:	e696      	b.n	80048a2 <forward_dense+0x12e>
 8004b74:	9406      	str	r4, [sp, #24]
 8004b76:	e627      	b.n	80047c8 <forward_dense+0x54>
 8004b78:	9306      	str	r3, [sp, #24]
 8004b7a:	e625      	b.n	80047c8 <forward_dense+0x54>
 8004b7c:	00000000 	.word	0x00000000
 8004b80:	4634      	mov	r4, r6
 8004b82:	4646      	mov	r6, r8
 8004b84:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b88:	9400      	str	r4, [sp, #0]
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4652      	mov	r2, sl
 8004b90:	4640      	mov	r0, r8
 8004b92:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004b96:	f7ff fc61 	bl	800445c <ai_dict8_dot_array_f32>
 8004b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b9c:	f84b 3b04 	str.w	r3, [fp], #4
 8004ba0:	45b3      	cmp	fp, r6
 8004ba2:	444d      	add	r5, r9
 8004ba4:	d3f0      	bcc.n	8004b88 <forward_dense+0x414>
 8004ba6:	46a0      	mov	r8, r4
 8004ba8:	e67b      	b.n	80048a2 <forward_dense+0x12e>
 8004baa:	b011      	add	sp, #68	; 0x44
 8004bac:	ecbd 8b10 	vpop	{d8-d15}
 8004bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8004bb8:	e624      	b.n	8004804 <forward_dense+0x90>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9306      	str	r3, [sp, #24]
 8004bbe:	e603      	b.n	80047c8 <forward_dense+0x54>
 8004bc0:	9308      	str	r3, [sp, #32]
 8004bc2:	e5f4      	b.n	80047ae <forward_dense+0x3a>

08004bc4 <ai_check_custom_types>:
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <ai_check_custom_types+0x50>)
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	b118      	cbz	r0, 8004bd6 <ai_check_custom_types+0x12>
 8004bce:	7803      	ldrb	r3, [r0, #0]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d002      	beq.n	8004bda <ai_check_custom_types+0x16>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	b002      	add	sp, #8
 8004bd8:	4770      	bx	lr
 8004bda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <ai_check_custom_types+0x28>
 8004be2:	2001      	movs	r0, #1
 8004be4:	f080 0001 	eor.w	r0, r0, #1
 8004be8:	b002      	add	sp, #8
 8004bea:	4770      	bx	lr
 8004bec:	7842      	ldrb	r2, [r0, #1]
 8004bee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	f100 0001 	add.w	r0, r0, #1
 8004bf8:	d1f3      	bne.n	8004be2 <ai_check_custom_types+0x1e>
 8004bfa:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004bfe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d1ed      	bne.n	8004be2 <ai_check_custom_types+0x1e>
 8004c06:	7842      	ldrb	r2, [r0, #1]
 8004c08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1e8      	bne.n	8004be2 <ai_check_custom_types+0x1e>
 8004c10:	2000      	movs	r0, #0
 8004c12:	e7e7      	b.n	8004be4 <ai_check_custom_types+0x20>
 8004c14:	08007f48 	.word	0x08007f48

08004c18 <ai_layers_init_all>:
 8004c18:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004c1a:	b17a      	cbz	r2, 8004c3c <ai_layers_init_all+0x24>
 8004c1c:	6913      	ldr	r3, [r2, #16]
 8004c1e:	60d0      	str	r0, [r2, #12]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	f04f 0201 	mov.w	r2, #1
 8004c26:	d009      	beq.n	8004c3c <ai_layers_init_all+0x24>
 8004c28:	b143      	cbz	r3, 8004c3c <ai_layers_init_all+0x24>
 8004c2a:	6919      	ldr	r1, [r3, #16]
 8004c2c:	60d8      	str	r0, [r3, #12]
 8004c2e:	4299      	cmp	r1, r3
 8004c30:	f102 0201 	add.w	r2, r2, #1
 8004c34:	d002      	beq.n	8004c3c <ai_layers_init_all+0x24>
 8004c36:	460b      	mov	r3, r1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f6      	bne.n	8004c2a <ai_layers_init_all+0x12>
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4770      	bx	lr

08004c40 <ai_layers_post_init_all>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004c44:	b18c      	cbz	r4, 8004c6a <ai_layers_post_init_all+0x2a>
 8004c46:	2500      	movs	r5, #0
 8004c48:	6863      	ldr	r3, [r4, #4]
 8004c4a:	f013 0f01 	tst.w	r3, #1
 8004c4e:	4620      	mov	r0, r4
 8004c50:	d003      	beq.n	8004c5a <ai_layers_post_init_all+0x1a>
 8004c52:	6a23      	ldr	r3, [r4, #32]
 8004c54:	b10b      	cbz	r3, 8004c5a <ai_layers_post_init_all+0x1a>
 8004c56:	4798      	blx	r3
 8004c58:	3501      	adds	r5, #1
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	d002      	beq.n	8004c66 <ai_layers_post_init_all+0x26>
 8004c60:	461c      	mov	r4, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <ai_layers_post_init_all+0x8>
 8004c66:	4628      	mov	r0, r5
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	4625      	mov	r5, r4
 8004c6c:	e7fb      	b.n	8004c66 <ai_layers_post_init_all+0x26>
 8004c6e:	bf00      	nop

08004c70 <ai_layers_forward_all>:
 8004c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c74:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8004c76:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004c78:	4604      	mov	r4, r0
 8004c7a:	2f00      	cmp	r7, #0
 8004c7c:	d02c      	beq.n	8004cd8 <ai_layers_forward_all+0x68>
 8004c7e:	2d00      	cmp	r5, #0
 8004c80:	d03f      	beq.n	8004d02 <ai_layers_forward_all+0x92>
 8004c82:	6545      	str	r5, [r0, #84]	; 0x54
 8004c84:	4629      	mov	r1, r5
 8004c86:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004c88:	2001      	movs	r0, #1
 8004c8a:	47b8      	blx	r7
 8004c8c:	2600      	movs	r6, #0
 8004c8e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004c90:	46b0      	mov	r8, r6
 8004c92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c94:	2002      	movs	r0, #2
 8004c96:	47b8      	blx	r7
 8004c98:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004c9a:	696b      	ldr	r3, [r5, #20]
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	4798      	blx	r3
 8004ca0:	692b      	ldr	r3, [r5, #16]
 8004ca2:	429d      	cmp	r5, r3
 8004ca4:	f04f 0003 	mov.w	r0, #3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	d009      	beq.n	8004cc0 <ai_layers_forward_all+0x50>
 8004cac:	6563      	str	r3, [r4, #84]	; 0x54
 8004cae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004cb0:	47b8      	blx	r7
 8004cb2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d1eb      	bne.n	8004c92 <ai_layers_forward_all+0x22>
 8004cba:	4630      	mov	r0, r6
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8004cc6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004cc8:	47b8      	blx	r7
 8004cca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004ccc:	3601      	adds	r6, #1
 8004cce:	2900      	cmp	r1, #0
 8004cd0:	d1df      	bne.n	8004c92 <ai_layers_forward_all+0x22>
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	b19d      	cbz	r5, 8004d02 <ai_layers_forward_all+0x92>
 8004cda:	6545      	str	r5, [r0, #84]	; 0x54
 8004cdc:	463e      	mov	r6, r7
 8004cde:	696b      	ldr	r3, [r5, #20]
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	4798      	blx	r3
 8004ce4:	692b      	ldr	r3, [r5, #16]
 8004ce6:	42ab      	cmp	r3, r5
 8004ce8:	f106 0601 	add.w	r6, r6, #1
 8004cec:	d004      	beq.n	8004cf8 <ai_layers_forward_all+0x88>
 8004cee:	6563      	str	r3, [r4, #84]	; 0x54
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f3      	bne.n	8004cde <ai_layers_forward_all+0x6e>
 8004cf6:	e7e0      	b.n	8004cba <ai_layers_forward_all+0x4a>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6563      	str	r3, [r4, #84]	; 0x54
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d02:	462e      	mov	r6, r5
 8004d04:	4630      	mov	r0, r6
 8004d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d0a:	bf00      	nop

08004d0c <ai_layers_destroy_all>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004d10:	b18c      	cbz	r4, 8004d36 <ai_layers_destroy_all+0x2a>
 8004d12:	2500      	movs	r5, #0
 8004d14:	6863      	ldr	r3, [r4, #4]
 8004d16:	f013 0f04 	tst.w	r3, #4
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	d003      	beq.n	8004d26 <ai_layers_destroy_all+0x1a>
 8004d1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d20:	b10b      	cbz	r3, 8004d26 <ai_layers_destroy_all+0x1a>
 8004d22:	4798      	blx	r3
 8004d24:	3501      	adds	r5, #1
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d002      	beq.n	8004d32 <ai_layers_destroy_all+0x26>
 8004d2c:	461c      	mov	r4, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <ai_layers_destroy_all+0x8>
 8004d32:	4628      	mov	r0, r5
 8004d34:	bd38      	pop	{r3, r4, r5, pc}
 8004d36:	4625      	mov	r5, r4
 8004d38:	e7fb      	b.n	8004d32 <ai_layers_destroy_all+0x26>
 8004d3a:	bf00      	nop

08004d3c <ai_array_to_buffer_fmt>:
 8004d3c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d02e      	beq.n	8004da2 <ai_array_to_buffer_fmt+0x66>
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <ai_array_to_buffer_fmt+0x78>)
 8004d46:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00e      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d4e:	dd11      	ble.n	8004d74 <ai_array_to_buffer_fmt+0x38>
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <ai_array_to_buffer_fmt+0x7c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00a      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d56:	dd18      	ble.n	8004d8a <ai_array_to_buffer_fmt+0x4e>
 8004d58:	4a18      	ldr	r2, [pc, #96]	; (8004dbc <ai_array_to_buffer_fmt+0x80>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d006      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d5e:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <ai_array_to_buffer_fmt+0x84>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <ai_array_to_buffer_fmt+0x88>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d000      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d6a:	2340      	movs	r3, #64	; 0x40
 8004d6c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004d70:	4318      	orrs	r0, r3
 8004d72:	4770      	bx	lr
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <ai_array_to_buffer_fmt+0x8c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d0f8      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d7a:	dd06      	ble.n	8004d8a <ai_array_to_buffer_fmt+0x4e>
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <ai_array_to_buffer_fmt+0x90>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d0f4      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d82:	320f      	adds	r2, #15
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d0f1      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d88:	e7ef      	b.n	8004d6a <ai_array_to_buffer_fmt+0x2e>
 8004d8a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d0ec      	beq.n	8004d6c <ai_array_to_buffer_fmt+0x30>
 8004d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d1e7      	bne.n	8004d6a <ai_array_to_buffer_fmt+0x2e>
 8004d9a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004d9e:	4318      	orrs	r0, r3
 8004da0:	4770      	bx	lr
 8004da2:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <ai_array_to_buffer_fmt+0x94>)
 8004da4:	4003      	ands	r3, r0
 8004da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004daa:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004dae:	4318      	orrs	r0, r3
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	00060440 	.word	0x00060440
 8004db8:	00840447 	.word	0x00840447
 8004dbc:	0084084f 	.word	0x0084084f
 8004dc0:	01821040 	.word	0x01821040
 8004dc4:	00840840 	.word	0x00840840
 8004dc8:	00040447 	.word	0x00040447
 8004dcc:	00040840 	.word	0x00040840
 8004dd0:	00803fff 	.word	0x00803fff

08004dd4 <ai_array_get_byte_size>:
 8004dd4:	b1c1      	cbz	r1, 8004e08 <ai_array_get_byte_size+0x34>
 8004dd6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8004dda:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004dde:	4413      	add	r3, r2
 8004de0:	fb01 f103 	mul.w	r1, r1, r3
 8004de4:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004de8:	3107      	adds	r1, #7
 8004dea:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8004dee:	f021 0107 	bic.w	r1, r1, #7
 8004df2:	2804      	cmp	r0, #4
 8004df4:	fa21 f102 	lsr.w	r1, r1, r2
 8004df8:	d008      	beq.n	8004e0c <ai_array_get_byte_size+0x38>
 8004dfa:	2808      	cmp	r0, #8
 8004dfc:	d101      	bne.n	8004e02 <ai_array_get_byte_size+0x2e>
 8004dfe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8004e02:	3107      	adds	r1, #7
 8004e04:	08c8      	lsrs	r0, r1, #3
 8004e06:	4770      	bx	lr
 8004e08:	4608      	mov	r0, r1
 8004e0a:	4770      	bx	lr
 8004e0c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8004e10:	3107      	adds	r1, #7
 8004e12:	08c8      	lsrs	r0, r1, #3
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <__errno>:
 8004e18:	4b01      	ldr	r3, [pc, #4]	; (8004e20 <__errno+0x8>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000234 	.word	0x20000234

08004e24 <__libc_init_array>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	4d0d      	ldr	r5, [pc, #52]	; (8004e5c <__libc_init_array+0x38>)
 8004e28:	4c0d      	ldr	r4, [pc, #52]	; (8004e60 <__libc_init_array+0x3c>)
 8004e2a:	1b64      	subs	r4, r4, r5
 8004e2c:	10a4      	asrs	r4, r4, #2
 8004e2e:	2600      	movs	r6, #0
 8004e30:	42a6      	cmp	r6, r4
 8004e32:	d109      	bne.n	8004e48 <__libc_init_array+0x24>
 8004e34:	4d0b      	ldr	r5, [pc, #44]	; (8004e64 <__libc_init_array+0x40>)
 8004e36:	4c0c      	ldr	r4, [pc, #48]	; (8004e68 <__libc_init_array+0x44>)
 8004e38:	f002 ff84 	bl	8007d44 <_init>
 8004e3c:	1b64      	subs	r4, r4, r5
 8004e3e:	10a4      	asrs	r4, r4, #2
 8004e40:	2600      	movs	r6, #0
 8004e42:	42a6      	cmp	r6, r4
 8004e44:	d105      	bne.n	8004e52 <__libc_init_array+0x2e>
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4c:	4798      	blx	r3
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7ee      	b.n	8004e30 <__libc_init_array+0xc>
 8004e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e56:	4798      	blx	r3
 8004e58:	3601      	adds	r6, #1
 8004e5a:	e7f2      	b.n	8004e42 <__libc_init_array+0x1e>
 8004e5c:	08008384 	.word	0x08008384
 8004e60:	08008384 	.word	0x08008384
 8004e64:	08008384 	.word	0x08008384
 8004e68:	08008388 	.word	0x08008388

08004e6c <malloc>:
 8004e6c:	4b02      	ldr	r3, [pc, #8]	; (8004e78 <malloc+0xc>)
 8004e6e:	4601      	mov	r1, r0
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	f000 b869 	b.w	8004f48 <_malloc_r>
 8004e76:	bf00      	nop
 8004e78:	20000234 	.word	0x20000234

08004e7c <memcpy>:
 8004e7c:	440a      	add	r2, r1
 8004e7e:	4291      	cmp	r1, r2
 8004e80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e84:	d100      	bne.n	8004e88 <memcpy+0xc>
 8004e86:	4770      	bx	lr
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e92:	4291      	cmp	r1, r2
 8004e94:	d1f9      	bne.n	8004e8a <memcpy+0xe>
 8004e96:	bd10      	pop	{r4, pc}

08004e98 <memset>:
 8004e98:	4402      	add	r2, r0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d100      	bne.n	8004ea2 <memset+0xa>
 8004ea0:	4770      	bx	lr
 8004ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea6:	e7f9      	b.n	8004e9c <memset+0x4>

08004ea8 <_free_r>:
 8004ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eaa:	2900      	cmp	r1, #0
 8004eac:	d048      	beq.n	8004f40 <_free_r+0x98>
 8004eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb2:	9001      	str	r0, [sp, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8004eba:	bfb8      	it	lt
 8004ebc:	18e4      	addlt	r4, r4, r3
 8004ebe:	f001 ff23 	bl	8006d08 <__malloc_lock>
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <_free_r+0x9c>)
 8004ec4:	9801      	ldr	r0, [sp, #4]
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	4615      	mov	r5, r2
 8004eca:	b933      	cbnz	r3, 8004eda <_free_r+0x32>
 8004ecc:	6063      	str	r3, [r4, #4]
 8004ece:	6014      	str	r4, [r2, #0]
 8004ed0:	b003      	add	sp, #12
 8004ed2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ed6:	f001 bf1d 	b.w	8006d14 <__malloc_unlock>
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	d90b      	bls.n	8004ef6 <_free_r+0x4e>
 8004ede:	6821      	ldr	r1, [r4, #0]
 8004ee0:	1862      	adds	r2, r4, r1
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	bf04      	itt	eq
 8004ee6:	681a      	ldreq	r2, [r3, #0]
 8004ee8:	685b      	ldreq	r3, [r3, #4]
 8004eea:	6063      	str	r3, [r4, #4]
 8004eec:	bf04      	itt	eq
 8004eee:	1852      	addeq	r2, r2, r1
 8004ef0:	6022      	streq	r2, [r4, #0]
 8004ef2:	602c      	str	r4, [r5, #0]
 8004ef4:	e7ec      	b.n	8004ed0 <_free_r+0x28>
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b10b      	cbz	r3, 8004f00 <_free_r+0x58>
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	d9fa      	bls.n	8004ef6 <_free_r+0x4e>
 8004f00:	6811      	ldr	r1, [r2, #0]
 8004f02:	1855      	adds	r5, r2, r1
 8004f04:	42a5      	cmp	r5, r4
 8004f06:	d10b      	bne.n	8004f20 <_free_r+0x78>
 8004f08:	6824      	ldr	r4, [r4, #0]
 8004f0a:	4421      	add	r1, r4
 8004f0c:	1854      	adds	r4, r2, r1
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	d1dd      	bne.n	8004ed0 <_free_r+0x28>
 8004f14:	681c      	ldr	r4, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	6053      	str	r3, [r2, #4]
 8004f1a:	4421      	add	r1, r4
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	e7d7      	b.n	8004ed0 <_free_r+0x28>
 8004f20:	d902      	bls.n	8004f28 <_free_r+0x80>
 8004f22:	230c      	movs	r3, #12
 8004f24:	6003      	str	r3, [r0, #0]
 8004f26:	e7d3      	b.n	8004ed0 <_free_r+0x28>
 8004f28:	6825      	ldr	r5, [r4, #0]
 8004f2a:	1961      	adds	r1, r4, r5
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	bf04      	itt	eq
 8004f30:	6819      	ldreq	r1, [r3, #0]
 8004f32:	685b      	ldreq	r3, [r3, #4]
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	bf04      	itt	eq
 8004f38:	1949      	addeq	r1, r1, r5
 8004f3a:	6021      	streq	r1, [r4, #0]
 8004f3c:	6054      	str	r4, [r2, #4]
 8004f3e:	e7c7      	b.n	8004ed0 <_free_r+0x28>
 8004f40:	b003      	add	sp, #12
 8004f42:	bd30      	pop	{r4, r5, pc}
 8004f44:	20000510 	.word	0x20000510

08004f48 <_malloc_r>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	1ccd      	adds	r5, r1, #3
 8004f4c:	f025 0503 	bic.w	r5, r5, #3
 8004f50:	3508      	adds	r5, #8
 8004f52:	2d0c      	cmp	r5, #12
 8004f54:	bf38      	it	cc
 8004f56:	250c      	movcc	r5, #12
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	db01      	blt.n	8004f62 <_malloc_r+0x1a>
 8004f5e:	42a9      	cmp	r1, r5
 8004f60:	d903      	bls.n	8004f6a <_malloc_r+0x22>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6033      	str	r3, [r6, #0]
 8004f66:	2000      	movs	r0, #0
 8004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6a:	f001 fecd 	bl	8006d08 <__malloc_lock>
 8004f6e:	4921      	ldr	r1, [pc, #132]	; (8004ff4 <_malloc_r+0xac>)
 8004f70:	680a      	ldr	r2, [r1, #0]
 8004f72:	4614      	mov	r4, r2
 8004f74:	b99c      	cbnz	r4, 8004f9e <_malloc_r+0x56>
 8004f76:	4f20      	ldr	r7, [pc, #128]	; (8004ff8 <_malloc_r+0xb0>)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b923      	cbnz	r3, 8004f86 <_malloc_r+0x3e>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f000 fd34 	bl	80059ec <_sbrk_r>
 8004f84:	6038      	str	r0, [r7, #0]
 8004f86:	4629      	mov	r1, r5
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f000 fd2f 	bl	80059ec <_sbrk_r>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	d123      	bne.n	8004fda <_malloc_r+0x92>
 8004f92:	230c      	movs	r3, #12
 8004f94:	6033      	str	r3, [r6, #0]
 8004f96:	4630      	mov	r0, r6
 8004f98:	f001 febc 	bl	8006d14 <__malloc_unlock>
 8004f9c:	e7e3      	b.n	8004f66 <_malloc_r+0x1e>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	1b5b      	subs	r3, r3, r5
 8004fa2:	d417      	bmi.n	8004fd4 <_malloc_r+0x8c>
 8004fa4:	2b0b      	cmp	r3, #11
 8004fa6:	d903      	bls.n	8004fb0 <_malloc_r+0x68>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	441c      	add	r4, r3
 8004fac:	6025      	str	r5, [r4, #0]
 8004fae:	e004      	b.n	8004fba <_malloc_r+0x72>
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	42a2      	cmp	r2, r4
 8004fb4:	bf0c      	ite	eq
 8004fb6:	600b      	streq	r3, [r1, #0]
 8004fb8:	6053      	strne	r3, [r2, #4]
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f001 feaa 	bl	8006d14 <__malloc_unlock>
 8004fc0:	f104 000b 	add.w	r0, r4, #11
 8004fc4:	1d23      	adds	r3, r4, #4
 8004fc6:	f020 0007 	bic.w	r0, r0, #7
 8004fca:	1ac2      	subs	r2, r0, r3
 8004fcc:	d0cc      	beq.n	8004f68 <_malloc_r+0x20>
 8004fce:	1a1b      	subs	r3, r3, r0
 8004fd0:	50a3      	str	r3, [r4, r2]
 8004fd2:	e7c9      	b.n	8004f68 <_malloc_r+0x20>
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	6864      	ldr	r4, [r4, #4]
 8004fd8:	e7cc      	b.n	8004f74 <_malloc_r+0x2c>
 8004fda:	1cc4      	adds	r4, r0, #3
 8004fdc:	f024 0403 	bic.w	r4, r4, #3
 8004fe0:	42a0      	cmp	r0, r4
 8004fe2:	d0e3      	beq.n	8004fac <_malloc_r+0x64>
 8004fe4:	1a21      	subs	r1, r4, r0
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 fd00 	bl	80059ec <_sbrk_r>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d1dd      	bne.n	8004fac <_malloc_r+0x64>
 8004ff0:	e7cf      	b.n	8004f92 <_malloc_r+0x4a>
 8004ff2:	bf00      	nop
 8004ff4:	20000510 	.word	0x20000510
 8004ff8:	20000514 	.word	0x20000514

08004ffc <__cvt>:
 8004ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005000:	ec55 4b10 	vmov	r4, r5, d0
 8005004:	2d00      	cmp	r5, #0
 8005006:	460e      	mov	r6, r1
 8005008:	4619      	mov	r1, r3
 800500a:	462b      	mov	r3, r5
 800500c:	bfbb      	ittet	lt
 800500e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005012:	461d      	movlt	r5, r3
 8005014:	2300      	movge	r3, #0
 8005016:	232d      	movlt	r3, #45	; 0x2d
 8005018:	700b      	strb	r3, [r1, #0]
 800501a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800501c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005020:	4691      	mov	r9, r2
 8005022:	f023 0820 	bic.w	r8, r3, #32
 8005026:	bfbc      	itt	lt
 8005028:	4622      	movlt	r2, r4
 800502a:	4614      	movlt	r4, r2
 800502c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005030:	d005      	beq.n	800503e <__cvt+0x42>
 8005032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005036:	d100      	bne.n	800503a <__cvt+0x3e>
 8005038:	3601      	adds	r6, #1
 800503a:	2102      	movs	r1, #2
 800503c:	e000      	b.n	8005040 <__cvt+0x44>
 800503e:	2103      	movs	r1, #3
 8005040:	ab03      	add	r3, sp, #12
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	ab02      	add	r3, sp, #8
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	ec45 4b10 	vmov	d0, r4, r5
 800504c:	4653      	mov	r3, sl
 800504e:	4632      	mov	r2, r6
 8005050:	f000 fe4a 	bl	8005ce8 <_dtoa_r>
 8005054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005058:	4607      	mov	r7, r0
 800505a:	d102      	bne.n	8005062 <__cvt+0x66>
 800505c:	f019 0f01 	tst.w	r9, #1
 8005060:	d022      	beq.n	80050a8 <__cvt+0xac>
 8005062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005066:	eb07 0906 	add.w	r9, r7, r6
 800506a:	d110      	bne.n	800508e <__cvt+0x92>
 800506c:	783b      	ldrb	r3, [r7, #0]
 800506e:	2b30      	cmp	r3, #48	; 0x30
 8005070:	d10a      	bne.n	8005088 <__cvt+0x8c>
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	4620      	mov	r0, r4
 8005078:	4629      	mov	r1, r5
 800507a:	f7fb fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800507e:	b918      	cbnz	r0, 8005088 <__cvt+0x8c>
 8005080:	f1c6 0601 	rsb	r6, r6, #1
 8005084:	f8ca 6000 	str.w	r6, [sl]
 8005088:	f8da 3000 	ldr.w	r3, [sl]
 800508c:	4499      	add	r9, r3
 800508e:	2200      	movs	r2, #0
 8005090:	2300      	movs	r3, #0
 8005092:	4620      	mov	r0, r4
 8005094:	4629      	mov	r1, r5
 8005096:	f7fb fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800509a:	b108      	cbz	r0, 80050a0 <__cvt+0xa4>
 800509c:	f8cd 900c 	str.w	r9, [sp, #12]
 80050a0:	2230      	movs	r2, #48	; 0x30
 80050a2:	9b03      	ldr	r3, [sp, #12]
 80050a4:	454b      	cmp	r3, r9
 80050a6:	d307      	bcc.n	80050b8 <__cvt+0xbc>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ac:	1bdb      	subs	r3, r3, r7
 80050ae:	4638      	mov	r0, r7
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	b004      	add	sp, #16
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	9103      	str	r1, [sp, #12]
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e7f0      	b.n	80050a2 <__cvt+0xa6>

080050c0 <__exponent>:
 80050c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c2:	4603      	mov	r3, r0
 80050c4:	2900      	cmp	r1, #0
 80050c6:	bfb8      	it	lt
 80050c8:	4249      	neglt	r1, r1
 80050ca:	f803 2b02 	strb.w	r2, [r3], #2
 80050ce:	bfb4      	ite	lt
 80050d0:	222d      	movlt	r2, #45	; 0x2d
 80050d2:	222b      	movge	r2, #43	; 0x2b
 80050d4:	2909      	cmp	r1, #9
 80050d6:	7042      	strb	r2, [r0, #1]
 80050d8:	dd2a      	ble.n	8005130 <__exponent+0x70>
 80050da:	f10d 0407 	add.w	r4, sp, #7
 80050de:	46a4      	mov	ip, r4
 80050e0:	270a      	movs	r7, #10
 80050e2:	46a6      	mov	lr, r4
 80050e4:	460a      	mov	r2, r1
 80050e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80050ea:	fb07 1516 	mls	r5, r7, r6, r1
 80050ee:	3530      	adds	r5, #48	; 0x30
 80050f0:	2a63      	cmp	r2, #99	; 0x63
 80050f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80050f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050fa:	4631      	mov	r1, r6
 80050fc:	dcf1      	bgt.n	80050e2 <__exponent+0x22>
 80050fe:	3130      	adds	r1, #48	; 0x30
 8005100:	f1ae 0502 	sub.w	r5, lr, #2
 8005104:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005108:	1c44      	adds	r4, r0, #1
 800510a:	4629      	mov	r1, r5
 800510c:	4561      	cmp	r1, ip
 800510e:	d30a      	bcc.n	8005126 <__exponent+0x66>
 8005110:	f10d 0209 	add.w	r2, sp, #9
 8005114:	eba2 020e 	sub.w	r2, r2, lr
 8005118:	4565      	cmp	r5, ip
 800511a:	bf88      	it	hi
 800511c:	2200      	movhi	r2, #0
 800511e:	4413      	add	r3, r2
 8005120:	1a18      	subs	r0, r3, r0
 8005122:	b003      	add	sp, #12
 8005124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800512a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800512e:	e7ed      	b.n	800510c <__exponent+0x4c>
 8005130:	2330      	movs	r3, #48	; 0x30
 8005132:	3130      	adds	r1, #48	; 0x30
 8005134:	7083      	strb	r3, [r0, #2]
 8005136:	70c1      	strb	r1, [r0, #3]
 8005138:	1d03      	adds	r3, r0, #4
 800513a:	e7f1      	b.n	8005120 <__exponent+0x60>

0800513c <_printf_float>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	ed2d 8b02 	vpush	{d8}
 8005144:	b08d      	sub	sp, #52	; 0x34
 8005146:	460c      	mov	r4, r1
 8005148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800514c:	4616      	mov	r6, r2
 800514e:	461f      	mov	r7, r3
 8005150:	4605      	mov	r5, r0
 8005152:	f001 fd6d 	bl	8006c30 <_localeconv_r>
 8005156:	f8d0 a000 	ldr.w	sl, [r0]
 800515a:	4650      	mov	r0, sl
 800515c:	f7fb f840 	bl	80001e0 <strlen>
 8005160:	2300      	movs	r3, #0
 8005162:	930a      	str	r3, [sp, #40]	; 0x28
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	9305      	str	r3, [sp, #20]
 8005168:	f8d8 3000 	ldr.w	r3, [r8]
 800516c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005170:	3307      	adds	r3, #7
 8005172:	f023 0307 	bic.w	r3, r3, #7
 8005176:	f103 0208 	add.w	r2, r3, #8
 800517a:	f8c8 2000 	str.w	r2, [r8]
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005186:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800518a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800518e:	9307      	str	r3, [sp, #28]
 8005190:	f8cd 8018 	str.w	r8, [sp, #24]
 8005194:	ee08 0a10 	vmov	s16, r0
 8005198:	4b9f      	ldr	r3, [pc, #636]	; (8005418 <_printf_float+0x2dc>)
 800519a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800519e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051a2:	f7fb fccb 	bl	8000b3c <__aeabi_dcmpun>
 80051a6:	bb88      	cbnz	r0, 800520c <_printf_float+0xd0>
 80051a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051ac:	4b9a      	ldr	r3, [pc, #616]	; (8005418 <_printf_float+0x2dc>)
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b2:	f7fb fca5 	bl	8000b00 <__aeabi_dcmple>
 80051b6:	bb48      	cbnz	r0, 800520c <_printf_float+0xd0>
 80051b8:	2200      	movs	r2, #0
 80051ba:	2300      	movs	r3, #0
 80051bc:	4640      	mov	r0, r8
 80051be:	4649      	mov	r1, r9
 80051c0:	f7fb fc94 	bl	8000aec <__aeabi_dcmplt>
 80051c4:	b110      	cbz	r0, 80051cc <_printf_float+0x90>
 80051c6:	232d      	movs	r3, #45	; 0x2d
 80051c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051cc:	4b93      	ldr	r3, [pc, #588]	; (800541c <_printf_float+0x2e0>)
 80051ce:	4894      	ldr	r0, [pc, #592]	; (8005420 <_printf_float+0x2e4>)
 80051d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051d4:	bf94      	ite	ls
 80051d6:	4698      	movls	r8, r3
 80051d8:	4680      	movhi	r8, r0
 80051da:	2303      	movs	r3, #3
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	9b05      	ldr	r3, [sp, #20]
 80051e0:	f023 0204 	bic.w	r2, r3, #4
 80051e4:	6022      	str	r2, [r4, #0]
 80051e6:	f04f 0900 	mov.w	r9, #0
 80051ea:	9700      	str	r7, [sp, #0]
 80051ec:	4633      	mov	r3, r6
 80051ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80051f0:	4621      	mov	r1, r4
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f9d8 	bl	80055a8 <_printf_common>
 80051f8:	3001      	adds	r0, #1
 80051fa:	f040 8090 	bne.w	800531e <_printf_float+0x1e2>
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005202:	b00d      	add	sp, #52	; 0x34
 8005204:	ecbd 8b02 	vpop	{d8}
 8005208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fb fc92 	bl	8000b3c <__aeabi_dcmpun>
 8005218:	b140      	cbz	r0, 800522c <_printf_float+0xf0>
 800521a:	464b      	mov	r3, r9
 800521c:	2b00      	cmp	r3, #0
 800521e:	bfbc      	itt	lt
 8005220:	232d      	movlt	r3, #45	; 0x2d
 8005222:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005226:	487f      	ldr	r0, [pc, #508]	; (8005424 <_printf_float+0x2e8>)
 8005228:	4b7f      	ldr	r3, [pc, #508]	; (8005428 <_printf_float+0x2ec>)
 800522a:	e7d1      	b.n	80051d0 <_printf_float+0x94>
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005232:	9206      	str	r2, [sp, #24]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	d13f      	bne.n	80052b8 <_printf_float+0x17c>
 8005238:	2306      	movs	r3, #6
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	9b05      	ldr	r3, [sp, #20]
 800523e:	6861      	ldr	r1, [r4, #4]
 8005240:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005244:	2300      	movs	r3, #0
 8005246:	9303      	str	r3, [sp, #12]
 8005248:	ab0a      	add	r3, sp, #40	; 0x28
 800524a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800524e:	ab09      	add	r3, sp, #36	; 0x24
 8005250:	ec49 8b10 	vmov	d0, r8, r9
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	6022      	str	r2, [r4, #0]
 8005258:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800525c:	4628      	mov	r0, r5
 800525e:	f7ff fecd 	bl	8004ffc <__cvt>
 8005262:	9b06      	ldr	r3, [sp, #24]
 8005264:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005266:	2b47      	cmp	r3, #71	; 0x47
 8005268:	4680      	mov	r8, r0
 800526a:	d108      	bne.n	800527e <_printf_float+0x142>
 800526c:	1cc8      	adds	r0, r1, #3
 800526e:	db02      	blt.n	8005276 <_printf_float+0x13a>
 8005270:	6863      	ldr	r3, [r4, #4]
 8005272:	4299      	cmp	r1, r3
 8005274:	dd41      	ble.n	80052fa <_printf_float+0x1be>
 8005276:	f1ab 0b02 	sub.w	fp, fp, #2
 800527a:	fa5f fb8b 	uxtb.w	fp, fp
 800527e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005282:	d820      	bhi.n	80052c6 <_printf_float+0x18a>
 8005284:	3901      	subs	r1, #1
 8005286:	465a      	mov	r2, fp
 8005288:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800528c:	9109      	str	r1, [sp, #36]	; 0x24
 800528e:	f7ff ff17 	bl	80050c0 <__exponent>
 8005292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005294:	1813      	adds	r3, r2, r0
 8005296:	2a01      	cmp	r2, #1
 8005298:	4681      	mov	r9, r0
 800529a:	6123      	str	r3, [r4, #16]
 800529c:	dc02      	bgt.n	80052a4 <_printf_float+0x168>
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	07d2      	lsls	r2, r2, #31
 80052a2:	d501      	bpl.n	80052a8 <_printf_float+0x16c>
 80052a4:	3301      	adds	r3, #1
 80052a6:	6123      	str	r3, [r4, #16]
 80052a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d09c      	beq.n	80051ea <_printf_float+0xae>
 80052b0:	232d      	movs	r3, #45	; 0x2d
 80052b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b6:	e798      	b.n	80051ea <_printf_float+0xae>
 80052b8:	9a06      	ldr	r2, [sp, #24]
 80052ba:	2a47      	cmp	r2, #71	; 0x47
 80052bc:	d1be      	bne.n	800523c <_printf_float+0x100>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1bc      	bne.n	800523c <_printf_float+0x100>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e7b9      	b.n	800523a <_printf_float+0xfe>
 80052c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80052ca:	d118      	bne.n	80052fe <_printf_float+0x1c2>
 80052cc:	2900      	cmp	r1, #0
 80052ce:	6863      	ldr	r3, [r4, #4]
 80052d0:	dd0b      	ble.n	80052ea <_printf_float+0x1ae>
 80052d2:	6121      	str	r1, [r4, #16]
 80052d4:	b913      	cbnz	r3, 80052dc <_printf_float+0x1a0>
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	07d0      	lsls	r0, r2, #31
 80052da:	d502      	bpl.n	80052e2 <_printf_float+0x1a6>
 80052dc:	3301      	adds	r3, #1
 80052de:	440b      	add	r3, r1
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80052e4:	f04f 0900 	mov.w	r9, #0
 80052e8:	e7de      	b.n	80052a8 <_printf_float+0x16c>
 80052ea:	b913      	cbnz	r3, 80052f2 <_printf_float+0x1b6>
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	07d2      	lsls	r2, r2, #31
 80052f0:	d501      	bpl.n	80052f6 <_printf_float+0x1ba>
 80052f2:	3302      	adds	r3, #2
 80052f4:	e7f4      	b.n	80052e0 <_printf_float+0x1a4>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e7f2      	b.n	80052e0 <_printf_float+0x1a4>
 80052fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005300:	4299      	cmp	r1, r3
 8005302:	db05      	blt.n	8005310 <_printf_float+0x1d4>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	6121      	str	r1, [r4, #16]
 8005308:	07d8      	lsls	r0, r3, #31
 800530a:	d5ea      	bpl.n	80052e2 <_printf_float+0x1a6>
 800530c:	1c4b      	adds	r3, r1, #1
 800530e:	e7e7      	b.n	80052e0 <_printf_float+0x1a4>
 8005310:	2900      	cmp	r1, #0
 8005312:	bfd4      	ite	le
 8005314:	f1c1 0202 	rsble	r2, r1, #2
 8005318:	2201      	movgt	r2, #1
 800531a:	4413      	add	r3, r2
 800531c:	e7e0      	b.n	80052e0 <_printf_float+0x1a4>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	055a      	lsls	r2, r3, #21
 8005322:	d407      	bmi.n	8005334 <_printf_float+0x1f8>
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	4642      	mov	r2, r8
 8005328:	4631      	mov	r1, r6
 800532a:	4628      	mov	r0, r5
 800532c:	47b8      	blx	r7
 800532e:	3001      	adds	r0, #1
 8005330:	d12c      	bne.n	800538c <_printf_float+0x250>
 8005332:	e764      	b.n	80051fe <_printf_float+0xc2>
 8005334:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005338:	f240 80e0 	bls.w	80054fc <_printf_float+0x3c0>
 800533c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005340:	2200      	movs	r2, #0
 8005342:	2300      	movs	r3, #0
 8005344:	f7fb fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005348:	2800      	cmp	r0, #0
 800534a:	d034      	beq.n	80053b6 <_printf_float+0x27a>
 800534c:	4a37      	ldr	r2, [pc, #220]	; (800542c <_printf_float+0x2f0>)
 800534e:	2301      	movs	r3, #1
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	47b8      	blx	r7
 8005356:	3001      	adds	r0, #1
 8005358:	f43f af51 	beq.w	80051fe <_printf_float+0xc2>
 800535c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005360:	429a      	cmp	r2, r3
 8005362:	db02      	blt.n	800536a <_printf_float+0x22e>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07d8      	lsls	r0, r3, #31
 8005368:	d510      	bpl.n	800538c <_printf_float+0x250>
 800536a:	ee18 3a10 	vmov	r3, s16
 800536e:	4652      	mov	r2, sl
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f af41 	beq.w	80051fe <_printf_float+0xc2>
 800537c:	f04f 0800 	mov.w	r8, #0
 8005380:	f104 091a 	add.w	r9, r4, #26
 8005384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005386:	3b01      	subs	r3, #1
 8005388:	4543      	cmp	r3, r8
 800538a:	dc09      	bgt.n	80053a0 <_printf_float+0x264>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	079b      	lsls	r3, r3, #30
 8005390:	f100 8105 	bmi.w	800559e <_printf_float+0x462>
 8005394:	68e0      	ldr	r0, [r4, #12]
 8005396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005398:	4298      	cmp	r0, r3
 800539a:	bfb8      	it	lt
 800539c:	4618      	movlt	r0, r3
 800539e:	e730      	b.n	8005202 <_printf_float+0xc6>
 80053a0:	2301      	movs	r3, #1
 80053a2:	464a      	mov	r2, r9
 80053a4:	4631      	mov	r1, r6
 80053a6:	4628      	mov	r0, r5
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	f43f af27 	beq.w	80051fe <_printf_float+0xc2>
 80053b0:	f108 0801 	add.w	r8, r8, #1
 80053b4:	e7e6      	b.n	8005384 <_printf_float+0x248>
 80053b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dc39      	bgt.n	8005430 <_printf_float+0x2f4>
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <_printf_float+0x2f0>)
 80053be:	2301      	movs	r3, #1
 80053c0:	4631      	mov	r1, r6
 80053c2:	4628      	mov	r0, r5
 80053c4:	47b8      	blx	r7
 80053c6:	3001      	adds	r0, #1
 80053c8:	f43f af19 	beq.w	80051fe <_printf_float+0xc2>
 80053cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d0:	4313      	orrs	r3, r2
 80053d2:	d102      	bne.n	80053da <_printf_float+0x29e>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	07d9      	lsls	r1, r3, #31
 80053d8:	d5d8      	bpl.n	800538c <_printf_float+0x250>
 80053da:	ee18 3a10 	vmov	r3, s16
 80053de:	4652      	mov	r2, sl
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	f43f af09 	beq.w	80051fe <_printf_float+0xc2>
 80053ec:	f04f 0900 	mov.w	r9, #0
 80053f0:	f104 0a1a 	add.w	sl, r4, #26
 80053f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f6:	425b      	negs	r3, r3
 80053f8:	454b      	cmp	r3, r9
 80053fa:	dc01      	bgt.n	8005400 <_printf_float+0x2c4>
 80053fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fe:	e792      	b.n	8005326 <_printf_float+0x1ea>
 8005400:	2301      	movs	r3, #1
 8005402:	4652      	mov	r2, sl
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	f43f aef7 	beq.w	80051fe <_printf_float+0xc2>
 8005410:	f109 0901 	add.w	r9, r9, #1
 8005414:	e7ee      	b.n	80053f4 <_printf_float+0x2b8>
 8005416:	bf00      	nop
 8005418:	7fefffff 	.word	0x7fefffff
 800541c:	08007fa0 	.word	0x08007fa0
 8005420:	08007fa4 	.word	0x08007fa4
 8005424:	08007fac 	.word	0x08007fac
 8005428:	08007fa8 	.word	0x08007fa8
 800542c:	08007fb0 	.word	0x08007fb0
 8005430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005434:	429a      	cmp	r2, r3
 8005436:	bfa8      	it	ge
 8005438:	461a      	movge	r2, r3
 800543a:	2a00      	cmp	r2, #0
 800543c:	4691      	mov	r9, r2
 800543e:	dc37      	bgt.n	80054b0 <_printf_float+0x374>
 8005440:	f04f 0b00 	mov.w	fp, #0
 8005444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005448:	f104 021a 	add.w	r2, r4, #26
 800544c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800544e:	9305      	str	r3, [sp, #20]
 8005450:	eba3 0309 	sub.w	r3, r3, r9
 8005454:	455b      	cmp	r3, fp
 8005456:	dc33      	bgt.n	80054c0 <_printf_float+0x384>
 8005458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800545c:	429a      	cmp	r2, r3
 800545e:	db3b      	blt.n	80054d8 <_printf_float+0x39c>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	07da      	lsls	r2, r3, #31
 8005464:	d438      	bmi.n	80054d8 <_printf_float+0x39c>
 8005466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005468:	9b05      	ldr	r3, [sp, #20]
 800546a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	eba2 0901 	sub.w	r9, r2, r1
 8005472:	4599      	cmp	r9, r3
 8005474:	bfa8      	it	ge
 8005476:	4699      	movge	r9, r3
 8005478:	f1b9 0f00 	cmp.w	r9, #0
 800547c:	dc35      	bgt.n	80054ea <_printf_float+0x3ae>
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005486:	f104 0a1a 	add.w	sl, r4, #26
 800548a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	eba3 0309 	sub.w	r3, r3, r9
 8005494:	4543      	cmp	r3, r8
 8005496:	f77f af79 	ble.w	800538c <_printf_float+0x250>
 800549a:	2301      	movs	r3, #1
 800549c:	4652      	mov	r2, sl
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b8      	blx	r7
 80054a4:	3001      	adds	r0, #1
 80054a6:	f43f aeaa 	beq.w	80051fe <_printf_float+0xc2>
 80054aa:	f108 0801 	add.w	r8, r8, #1
 80054ae:	e7ec      	b.n	800548a <_printf_float+0x34e>
 80054b0:	4613      	mov	r3, r2
 80054b2:	4631      	mov	r1, r6
 80054b4:	4642      	mov	r2, r8
 80054b6:	4628      	mov	r0, r5
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	d1c0      	bne.n	8005440 <_printf_float+0x304>
 80054be:	e69e      	b.n	80051fe <_printf_float+0xc2>
 80054c0:	2301      	movs	r3, #1
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	9205      	str	r2, [sp, #20]
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f ae97 	beq.w	80051fe <_printf_float+0xc2>
 80054d0:	9a05      	ldr	r2, [sp, #20]
 80054d2:	f10b 0b01 	add.w	fp, fp, #1
 80054d6:	e7b9      	b.n	800544c <_printf_float+0x310>
 80054d8:	ee18 3a10 	vmov	r3, s16
 80054dc:	4652      	mov	r2, sl
 80054de:	4631      	mov	r1, r6
 80054e0:	4628      	mov	r0, r5
 80054e2:	47b8      	blx	r7
 80054e4:	3001      	adds	r0, #1
 80054e6:	d1be      	bne.n	8005466 <_printf_float+0x32a>
 80054e8:	e689      	b.n	80051fe <_printf_float+0xc2>
 80054ea:	9a05      	ldr	r2, [sp, #20]
 80054ec:	464b      	mov	r3, r9
 80054ee:	4442      	add	r2, r8
 80054f0:	4631      	mov	r1, r6
 80054f2:	4628      	mov	r0, r5
 80054f4:	47b8      	blx	r7
 80054f6:	3001      	adds	r0, #1
 80054f8:	d1c1      	bne.n	800547e <_printf_float+0x342>
 80054fa:	e680      	b.n	80051fe <_printf_float+0xc2>
 80054fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054fe:	2a01      	cmp	r2, #1
 8005500:	dc01      	bgt.n	8005506 <_printf_float+0x3ca>
 8005502:	07db      	lsls	r3, r3, #31
 8005504:	d538      	bpl.n	8005578 <_printf_float+0x43c>
 8005506:	2301      	movs	r3, #1
 8005508:	4642      	mov	r2, r8
 800550a:	4631      	mov	r1, r6
 800550c:	4628      	mov	r0, r5
 800550e:	47b8      	blx	r7
 8005510:	3001      	adds	r0, #1
 8005512:	f43f ae74 	beq.w	80051fe <_printf_float+0xc2>
 8005516:	ee18 3a10 	vmov	r3, s16
 800551a:	4652      	mov	r2, sl
 800551c:	4631      	mov	r1, r6
 800551e:	4628      	mov	r0, r5
 8005520:	47b8      	blx	r7
 8005522:	3001      	adds	r0, #1
 8005524:	f43f ae6b 	beq.w	80051fe <_printf_float+0xc2>
 8005528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800552c:	2200      	movs	r2, #0
 800552e:	2300      	movs	r3, #0
 8005530:	f7fb fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005534:	b9d8      	cbnz	r0, 800556e <_printf_float+0x432>
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	f108 0201 	add.w	r2, r8, #1
 800553c:	3b01      	subs	r3, #1
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	d10e      	bne.n	8005566 <_printf_float+0x42a>
 8005548:	e659      	b.n	80051fe <_printf_float+0xc2>
 800554a:	2301      	movs	r3, #1
 800554c:	4652      	mov	r2, sl
 800554e:	4631      	mov	r1, r6
 8005550:	4628      	mov	r0, r5
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	f43f ae52 	beq.w	80051fe <_printf_float+0xc2>
 800555a:	f108 0801 	add.w	r8, r8, #1
 800555e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005560:	3b01      	subs	r3, #1
 8005562:	4543      	cmp	r3, r8
 8005564:	dcf1      	bgt.n	800554a <_printf_float+0x40e>
 8005566:	464b      	mov	r3, r9
 8005568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800556c:	e6dc      	b.n	8005328 <_printf_float+0x1ec>
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	f104 0a1a 	add.w	sl, r4, #26
 8005576:	e7f2      	b.n	800555e <_printf_float+0x422>
 8005578:	2301      	movs	r3, #1
 800557a:	4642      	mov	r2, r8
 800557c:	e7df      	b.n	800553e <_printf_float+0x402>
 800557e:	2301      	movs	r3, #1
 8005580:	464a      	mov	r2, r9
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	f43f ae38 	beq.w	80051fe <_printf_float+0xc2>
 800558e:	f108 0801 	add.w	r8, r8, #1
 8005592:	68e3      	ldr	r3, [r4, #12]
 8005594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005596:	1a5b      	subs	r3, r3, r1
 8005598:	4543      	cmp	r3, r8
 800559a:	dcf0      	bgt.n	800557e <_printf_float+0x442>
 800559c:	e6fa      	b.n	8005394 <_printf_float+0x258>
 800559e:	f04f 0800 	mov.w	r8, #0
 80055a2:	f104 0919 	add.w	r9, r4, #25
 80055a6:	e7f4      	b.n	8005592 <_printf_float+0x456>

080055a8 <_printf_common>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4616      	mov	r6, r2
 80055ae:	4699      	mov	r9, r3
 80055b0:	688a      	ldr	r2, [r1, #8]
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bfb8      	it	lt
 80055bc:	4613      	movlt	r3, r2
 80055be:	6033      	str	r3, [r6, #0]
 80055c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c4:	4607      	mov	r7, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	b10a      	cbz	r2, 80055ce <_printf_common+0x26>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	0699      	lsls	r1, r3, #26
 80055d2:	bf42      	ittt	mi
 80055d4:	6833      	ldrmi	r3, [r6, #0]
 80055d6:	3302      	addmi	r3, #2
 80055d8:	6033      	strmi	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	f015 0506 	ands.w	r5, r5, #6
 80055e0:	d106      	bne.n	80055f0 <_printf_common+0x48>
 80055e2:	f104 0a19 	add.w	sl, r4, #25
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dc26      	bgt.n	800563e <_printf_common+0x96>
 80055f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f4:	1e13      	subs	r3, r2, #0
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	0692      	lsls	r2, r2, #26
 80055fe:	d42b      	bmi.n	8005658 <_printf_common+0xb0>
 8005600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005604:	4649      	mov	r1, r9
 8005606:	4638      	mov	r0, r7
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d01e      	beq.n	800564c <_printf_common+0xa4>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	68e5      	ldr	r5, [r4, #12]
 8005612:	6832      	ldr	r2, [r6, #0]
 8005614:	f003 0306 	and.w	r3, r3, #6
 8005618:	2b04      	cmp	r3, #4
 800561a:	bf08      	it	eq
 800561c:	1aad      	subeq	r5, r5, r2
 800561e:	68a3      	ldr	r3, [r4, #8]
 8005620:	6922      	ldr	r2, [r4, #16]
 8005622:	bf0c      	ite	eq
 8005624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005628:	2500      	movne	r5, #0
 800562a:	4293      	cmp	r3, r2
 800562c:	bfc4      	itt	gt
 800562e:	1a9b      	subgt	r3, r3, r2
 8005630:	18ed      	addgt	r5, r5, r3
 8005632:	2600      	movs	r6, #0
 8005634:	341a      	adds	r4, #26
 8005636:	42b5      	cmp	r5, r6
 8005638:	d11a      	bne.n	8005670 <_printf_common+0xc8>
 800563a:	2000      	movs	r0, #0
 800563c:	e008      	b.n	8005650 <_printf_common+0xa8>
 800563e:	2301      	movs	r3, #1
 8005640:	4652      	mov	r2, sl
 8005642:	4649      	mov	r1, r9
 8005644:	4638      	mov	r0, r7
 8005646:	47c0      	blx	r8
 8005648:	3001      	adds	r0, #1
 800564a:	d103      	bne.n	8005654 <_printf_common+0xac>
 800564c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005654:	3501      	adds	r5, #1
 8005656:	e7c6      	b.n	80055e6 <_printf_common+0x3e>
 8005658:	18e1      	adds	r1, r4, r3
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	2030      	movs	r0, #48	; 0x30
 800565e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005662:	4422      	add	r2, r4
 8005664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800566c:	3302      	adds	r3, #2
 800566e:	e7c7      	b.n	8005600 <_printf_common+0x58>
 8005670:	2301      	movs	r3, #1
 8005672:	4622      	mov	r2, r4
 8005674:	4649      	mov	r1, r9
 8005676:	4638      	mov	r0, r7
 8005678:	47c0      	blx	r8
 800567a:	3001      	adds	r0, #1
 800567c:	d0e6      	beq.n	800564c <_printf_common+0xa4>
 800567e:	3601      	adds	r6, #1
 8005680:	e7d9      	b.n	8005636 <_printf_common+0x8e>
	...

08005684 <_printf_i>:
 8005684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	460c      	mov	r4, r1
 800568a:	4691      	mov	r9, r2
 800568c:	7e27      	ldrb	r7, [r4, #24]
 800568e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005690:	2f78      	cmp	r7, #120	; 0x78
 8005692:	4680      	mov	r8, r0
 8005694:	469a      	mov	sl, r3
 8005696:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800569a:	d807      	bhi.n	80056ac <_printf_i+0x28>
 800569c:	2f62      	cmp	r7, #98	; 0x62
 800569e:	d80a      	bhi.n	80056b6 <_printf_i+0x32>
 80056a0:	2f00      	cmp	r7, #0
 80056a2:	f000 80d8 	beq.w	8005856 <_printf_i+0x1d2>
 80056a6:	2f58      	cmp	r7, #88	; 0x58
 80056a8:	f000 80a3 	beq.w	80057f2 <_printf_i+0x16e>
 80056ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b4:	e03a      	b.n	800572c <_printf_i+0xa8>
 80056b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ba:	2b15      	cmp	r3, #21
 80056bc:	d8f6      	bhi.n	80056ac <_printf_i+0x28>
 80056be:	a001      	add	r0, pc, #4	; (adr r0, 80056c4 <_printf_i+0x40>)
 80056c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056c4:	0800571d 	.word	0x0800571d
 80056c8:	08005731 	.word	0x08005731
 80056cc:	080056ad 	.word	0x080056ad
 80056d0:	080056ad 	.word	0x080056ad
 80056d4:	080056ad 	.word	0x080056ad
 80056d8:	080056ad 	.word	0x080056ad
 80056dc:	08005731 	.word	0x08005731
 80056e0:	080056ad 	.word	0x080056ad
 80056e4:	080056ad 	.word	0x080056ad
 80056e8:	080056ad 	.word	0x080056ad
 80056ec:	080056ad 	.word	0x080056ad
 80056f0:	0800583d 	.word	0x0800583d
 80056f4:	08005761 	.word	0x08005761
 80056f8:	0800581f 	.word	0x0800581f
 80056fc:	080056ad 	.word	0x080056ad
 8005700:	080056ad 	.word	0x080056ad
 8005704:	0800585f 	.word	0x0800585f
 8005708:	080056ad 	.word	0x080056ad
 800570c:	08005761 	.word	0x08005761
 8005710:	080056ad 	.word	0x080056ad
 8005714:	080056ad 	.word	0x080056ad
 8005718:	08005827 	.word	0x08005827
 800571c:	680b      	ldr	r3, [r1, #0]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	600a      	str	r2, [r1, #0]
 8005724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800572c:	2301      	movs	r3, #1
 800572e:	e0a3      	b.n	8005878 <_printf_i+0x1f4>
 8005730:	6825      	ldr	r5, [r4, #0]
 8005732:	6808      	ldr	r0, [r1, #0]
 8005734:	062e      	lsls	r6, r5, #24
 8005736:	f100 0304 	add.w	r3, r0, #4
 800573a:	d50a      	bpl.n	8005752 <_printf_i+0xce>
 800573c:	6805      	ldr	r5, [r0, #0]
 800573e:	600b      	str	r3, [r1, #0]
 8005740:	2d00      	cmp	r5, #0
 8005742:	da03      	bge.n	800574c <_printf_i+0xc8>
 8005744:	232d      	movs	r3, #45	; 0x2d
 8005746:	426d      	negs	r5, r5
 8005748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574c:	485e      	ldr	r0, [pc, #376]	; (80058c8 <_printf_i+0x244>)
 800574e:	230a      	movs	r3, #10
 8005750:	e019      	b.n	8005786 <_printf_i+0x102>
 8005752:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005756:	6805      	ldr	r5, [r0, #0]
 8005758:	600b      	str	r3, [r1, #0]
 800575a:	bf18      	it	ne
 800575c:	b22d      	sxthne	r5, r5
 800575e:	e7ef      	b.n	8005740 <_printf_i+0xbc>
 8005760:	680b      	ldr	r3, [r1, #0]
 8005762:	6825      	ldr	r5, [r4, #0]
 8005764:	1d18      	adds	r0, r3, #4
 8005766:	6008      	str	r0, [r1, #0]
 8005768:	0628      	lsls	r0, r5, #24
 800576a:	d501      	bpl.n	8005770 <_printf_i+0xec>
 800576c:	681d      	ldr	r5, [r3, #0]
 800576e:	e002      	b.n	8005776 <_printf_i+0xf2>
 8005770:	0669      	lsls	r1, r5, #25
 8005772:	d5fb      	bpl.n	800576c <_printf_i+0xe8>
 8005774:	881d      	ldrh	r5, [r3, #0]
 8005776:	4854      	ldr	r0, [pc, #336]	; (80058c8 <_printf_i+0x244>)
 8005778:	2f6f      	cmp	r7, #111	; 0x6f
 800577a:	bf0c      	ite	eq
 800577c:	2308      	moveq	r3, #8
 800577e:	230a      	movne	r3, #10
 8005780:	2100      	movs	r1, #0
 8005782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005786:	6866      	ldr	r6, [r4, #4]
 8005788:	60a6      	str	r6, [r4, #8]
 800578a:	2e00      	cmp	r6, #0
 800578c:	bfa2      	ittt	ge
 800578e:	6821      	ldrge	r1, [r4, #0]
 8005790:	f021 0104 	bicge.w	r1, r1, #4
 8005794:	6021      	strge	r1, [r4, #0]
 8005796:	b90d      	cbnz	r5, 800579c <_printf_i+0x118>
 8005798:	2e00      	cmp	r6, #0
 800579a:	d04d      	beq.n	8005838 <_printf_i+0x1b4>
 800579c:	4616      	mov	r6, r2
 800579e:	fbb5 f1f3 	udiv	r1, r5, r3
 80057a2:	fb03 5711 	mls	r7, r3, r1, r5
 80057a6:	5dc7      	ldrb	r7, [r0, r7]
 80057a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ac:	462f      	mov	r7, r5
 80057ae:	42bb      	cmp	r3, r7
 80057b0:	460d      	mov	r5, r1
 80057b2:	d9f4      	bls.n	800579e <_printf_i+0x11a>
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d10b      	bne.n	80057d0 <_printf_i+0x14c>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	07df      	lsls	r7, r3, #31
 80057bc:	d508      	bpl.n	80057d0 <_printf_i+0x14c>
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	6861      	ldr	r1, [r4, #4]
 80057c2:	4299      	cmp	r1, r3
 80057c4:	bfde      	ittt	le
 80057c6:	2330      	movle	r3, #48	; 0x30
 80057c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80057d0:	1b92      	subs	r2, r2, r6
 80057d2:	6122      	str	r2, [r4, #16]
 80057d4:	f8cd a000 	str.w	sl, [sp]
 80057d8:	464b      	mov	r3, r9
 80057da:	aa03      	add	r2, sp, #12
 80057dc:	4621      	mov	r1, r4
 80057de:	4640      	mov	r0, r8
 80057e0:	f7ff fee2 	bl	80055a8 <_printf_common>
 80057e4:	3001      	adds	r0, #1
 80057e6:	d14c      	bne.n	8005882 <_printf_i+0x1fe>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ec:	b004      	add	sp, #16
 80057ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f2:	4835      	ldr	r0, [pc, #212]	; (80058c8 <_printf_i+0x244>)
 80057f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	680e      	ldr	r6, [r1, #0]
 80057fc:	061f      	lsls	r7, r3, #24
 80057fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005802:	600e      	str	r6, [r1, #0]
 8005804:	d514      	bpl.n	8005830 <_printf_i+0x1ac>
 8005806:	07d9      	lsls	r1, r3, #31
 8005808:	bf44      	itt	mi
 800580a:	f043 0320 	orrmi.w	r3, r3, #32
 800580e:	6023      	strmi	r3, [r4, #0]
 8005810:	b91d      	cbnz	r5, 800581a <_printf_i+0x196>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f023 0320 	bic.w	r3, r3, #32
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	2310      	movs	r3, #16
 800581c:	e7b0      	b.n	8005780 <_printf_i+0xfc>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	f043 0320 	orr.w	r3, r3, #32
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	2378      	movs	r3, #120	; 0x78
 8005828:	4828      	ldr	r0, [pc, #160]	; (80058cc <_printf_i+0x248>)
 800582a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800582e:	e7e3      	b.n	80057f8 <_printf_i+0x174>
 8005830:	065e      	lsls	r6, r3, #25
 8005832:	bf48      	it	mi
 8005834:	b2ad      	uxthmi	r5, r5
 8005836:	e7e6      	b.n	8005806 <_printf_i+0x182>
 8005838:	4616      	mov	r6, r2
 800583a:	e7bb      	b.n	80057b4 <_printf_i+0x130>
 800583c:	680b      	ldr	r3, [r1, #0]
 800583e:	6826      	ldr	r6, [r4, #0]
 8005840:	6960      	ldr	r0, [r4, #20]
 8005842:	1d1d      	adds	r5, r3, #4
 8005844:	600d      	str	r5, [r1, #0]
 8005846:	0635      	lsls	r5, r6, #24
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	d501      	bpl.n	8005850 <_printf_i+0x1cc>
 800584c:	6018      	str	r0, [r3, #0]
 800584e:	e002      	b.n	8005856 <_printf_i+0x1d2>
 8005850:	0671      	lsls	r1, r6, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0x1c8>
 8005854:	8018      	strh	r0, [r3, #0]
 8005856:	2300      	movs	r3, #0
 8005858:	6123      	str	r3, [r4, #16]
 800585a:	4616      	mov	r6, r2
 800585c:	e7ba      	b.n	80057d4 <_printf_i+0x150>
 800585e:	680b      	ldr	r3, [r1, #0]
 8005860:	1d1a      	adds	r2, r3, #4
 8005862:	600a      	str	r2, [r1, #0]
 8005864:	681e      	ldr	r6, [r3, #0]
 8005866:	6862      	ldr	r2, [r4, #4]
 8005868:	2100      	movs	r1, #0
 800586a:	4630      	mov	r0, r6
 800586c:	f7fa fcc0 	bl	80001f0 <memchr>
 8005870:	b108      	cbz	r0, 8005876 <_printf_i+0x1f2>
 8005872:	1b80      	subs	r0, r0, r6
 8005874:	6060      	str	r0, [r4, #4]
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	2300      	movs	r3, #0
 800587c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005880:	e7a8      	b.n	80057d4 <_printf_i+0x150>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	4632      	mov	r2, r6
 8005886:	4649      	mov	r1, r9
 8005888:	4640      	mov	r0, r8
 800588a:	47d0      	blx	sl
 800588c:	3001      	adds	r0, #1
 800588e:	d0ab      	beq.n	80057e8 <_printf_i+0x164>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	079b      	lsls	r3, r3, #30
 8005894:	d413      	bmi.n	80058be <_printf_i+0x23a>
 8005896:	68e0      	ldr	r0, [r4, #12]
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	4298      	cmp	r0, r3
 800589c:	bfb8      	it	lt
 800589e:	4618      	movlt	r0, r3
 80058a0:	e7a4      	b.n	80057ec <_printf_i+0x168>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4632      	mov	r2, r6
 80058a6:	4649      	mov	r1, r9
 80058a8:	4640      	mov	r0, r8
 80058aa:	47d0      	blx	sl
 80058ac:	3001      	adds	r0, #1
 80058ae:	d09b      	beq.n	80057e8 <_printf_i+0x164>
 80058b0:	3501      	adds	r5, #1
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	9903      	ldr	r1, [sp, #12]
 80058b6:	1a5b      	subs	r3, r3, r1
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	dcf2      	bgt.n	80058a2 <_printf_i+0x21e>
 80058bc:	e7eb      	b.n	8005896 <_printf_i+0x212>
 80058be:	2500      	movs	r5, #0
 80058c0:	f104 0619 	add.w	r6, r4, #25
 80058c4:	e7f5      	b.n	80058b2 <_printf_i+0x22e>
 80058c6:	bf00      	nop
 80058c8:	08007fb2 	.word	0x08007fb2
 80058cc:	08007fc3 	.word	0x08007fc3

080058d0 <iprintf>:
 80058d0:	b40f      	push	{r0, r1, r2, r3}
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <iprintf+0x2c>)
 80058d4:	b513      	push	{r0, r1, r4, lr}
 80058d6:	681c      	ldr	r4, [r3, #0]
 80058d8:	b124      	cbz	r4, 80058e4 <iprintf+0x14>
 80058da:	69a3      	ldr	r3, [r4, #24]
 80058dc:	b913      	cbnz	r3, 80058e4 <iprintf+0x14>
 80058de:	4620      	mov	r0, r4
 80058e0:	f001 f908 	bl	8006af4 <__sinit>
 80058e4:	ab05      	add	r3, sp, #20
 80058e6:	9a04      	ldr	r2, [sp, #16]
 80058e8:	68a1      	ldr	r1, [r4, #8]
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	4620      	mov	r0, r4
 80058ee:	f001 ff4f 	bl	8007790 <_vfiprintf_r>
 80058f2:	b002      	add	sp, #8
 80058f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f8:	b004      	add	sp, #16
 80058fa:	4770      	bx	lr
 80058fc:	20000234 	.word	0x20000234

08005900 <_puts_r>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	460e      	mov	r6, r1
 8005904:	4605      	mov	r5, r0
 8005906:	b118      	cbz	r0, 8005910 <_puts_r+0x10>
 8005908:	6983      	ldr	r3, [r0, #24]
 800590a:	b90b      	cbnz	r3, 8005910 <_puts_r+0x10>
 800590c:	f001 f8f2 	bl	8006af4 <__sinit>
 8005910:	69ab      	ldr	r3, [r5, #24]
 8005912:	68ac      	ldr	r4, [r5, #8]
 8005914:	b913      	cbnz	r3, 800591c <_puts_r+0x1c>
 8005916:	4628      	mov	r0, r5
 8005918:	f001 f8ec 	bl	8006af4 <__sinit>
 800591c:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <_puts_r+0xd0>)
 800591e:	429c      	cmp	r4, r3
 8005920:	d120      	bne.n	8005964 <_puts_r+0x64>
 8005922:	686c      	ldr	r4, [r5, #4]
 8005924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005926:	07db      	lsls	r3, r3, #31
 8005928:	d405      	bmi.n	8005936 <_puts_r+0x36>
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	0598      	lsls	r0, r3, #22
 800592e:	d402      	bmi.n	8005936 <_puts_r+0x36>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f001 f982 	bl	8006c3a <__retarget_lock_acquire_recursive>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	0719      	lsls	r1, r3, #28
 800593a:	d51d      	bpl.n	8005978 <_puts_r+0x78>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	b1db      	cbz	r3, 8005978 <_puts_r+0x78>
 8005940:	3e01      	subs	r6, #1
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005948:	3b01      	subs	r3, #1
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	bb39      	cbnz	r1, 800599e <_puts_r+0x9e>
 800594e:	2b00      	cmp	r3, #0
 8005950:	da38      	bge.n	80059c4 <_puts_r+0xc4>
 8005952:	4622      	mov	r2, r4
 8005954:	210a      	movs	r1, #10
 8005956:	4628      	mov	r0, r5
 8005958:	f000 f878 	bl	8005a4c <__swbuf_r>
 800595c:	3001      	adds	r0, #1
 800595e:	d011      	beq.n	8005984 <_puts_r+0x84>
 8005960:	250a      	movs	r5, #10
 8005962:	e011      	b.n	8005988 <_puts_r+0x88>
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <_puts_r+0xd4>)
 8005966:	429c      	cmp	r4, r3
 8005968:	d101      	bne.n	800596e <_puts_r+0x6e>
 800596a:	68ac      	ldr	r4, [r5, #8]
 800596c:	e7da      	b.n	8005924 <_puts_r+0x24>
 800596e:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <_puts_r+0xd8>)
 8005970:	429c      	cmp	r4, r3
 8005972:	bf08      	it	eq
 8005974:	68ec      	ldreq	r4, [r5, #12]
 8005976:	e7d5      	b.n	8005924 <_puts_r+0x24>
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f8b8 	bl	8005af0 <__swsetup_r>
 8005980:	2800      	cmp	r0, #0
 8005982:	d0dd      	beq.n	8005940 <_puts_r+0x40>
 8005984:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800598a:	07da      	lsls	r2, r3, #31
 800598c:	d405      	bmi.n	800599a <_puts_r+0x9a>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d402      	bmi.n	800599a <_puts_r+0x9a>
 8005994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005996:	f001 f951 	bl	8006c3c <__retarget_lock_release_recursive>
 800599a:	4628      	mov	r0, r5
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da04      	bge.n	80059ac <_puts_r+0xac>
 80059a2:	69a2      	ldr	r2, [r4, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dc06      	bgt.n	80059b6 <_puts_r+0xb6>
 80059a8:	290a      	cmp	r1, #10
 80059aa:	d004      	beq.n	80059b6 <_puts_r+0xb6>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	7019      	strb	r1, [r3, #0]
 80059b4:	e7c5      	b.n	8005942 <_puts_r+0x42>
 80059b6:	4622      	mov	r2, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 f847 	bl	8005a4c <__swbuf_r>
 80059be:	3001      	adds	r0, #1
 80059c0:	d1bf      	bne.n	8005942 <_puts_r+0x42>
 80059c2:	e7df      	b.n	8005984 <_puts_r+0x84>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	250a      	movs	r5, #10
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	701d      	strb	r5, [r3, #0]
 80059ce:	e7db      	b.n	8005988 <_puts_r+0x88>
 80059d0:	08008088 	.word	0x08008088
 80059d4:	080080a8 	.word	0x080080a8
 80059d8:	08008068 	.word	0x08008068

080059dc <puts>:
 80059dc:	4b02      	ldr	r3, [pc, #8]	; (80059e8 <puts+0xc>)
 80059de:	4601      	mov	r1, r0
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	f7ff bf8d 	b.w	8005900 <_puts_r>
 80059e6:	bf00      	nop
 80059e8:	20000234 	.word	0x20000234

080059ec <_sbrk_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4d06      	ldr	r5, [pc, #24]	; (8005a08 <_sbrk_r+0x1c>)
 80059f0:	2300      	movs	r3, #0
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	f7fb fcd2 	bl	80013a0 <_sbrk>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_sbrk_r+0x1a>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_sbrk_r+0x1a>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	200005bc 	.word	0x200005bc

08005a0c <siprintf>:
 8005a0c:	b40e      	push	{r1, r2, r3}
 8005a0e:	b500      	push	{lr}
 8005a10:	b09c      	sub	sp, #112	; 0x70
 8005a12:	ab1d      	add	r3, sp, #116	; 0x74
 8005a14:	9002      	str	r0, [sp, #8]
 8005a16:	9006      	str	r0, [sp, #24]
 8005a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a1c:	4809      	ldr	r0, [pc, #36]	; (8005a44 <siprintf+0x38>)
 8005a1e:	9107      	str	r1, [sp, #28]
 8005a20:	9104      	str	r1, [sp, #16]
 8005a22:	4909      	ldr	r1, [pc, #36]	; (8005a48 <siprintf+0x3c>)
 8005a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a28:	9105      	str	r1, [sp, #20]
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	a902      	add	r1, sp, #8
 8005a30:	f001 fd84 	bl	800753c <_svfiprintf_r>
 8005a34:	9b02      	ldr	r3, [sp, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	b01c      	add	sp, #112	; 0x70
 8005a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a40:	b003      	add	sp, #12
 8005a42:	4770      	bx	lr
 8005a44:	20000234 	.word	0x20000234
 8005a48:	ffff0208 	.word	0xffff0208

08005a4c <__swbuf_r>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	460e      	mov	r6, r1
 8005a50:	4614      	mov	r4, r2
 8005a52:	4605      	mov	r5, r0
 8005a54:	b118      	cbz	r0, 8005a5e <__swbuf_r+0x12>
 8005a56:	6983      	ldr	r3, [r0, #24]
 8005a58:	b90b      	cbnz	r3, 8005a5e <__swbuf_r+0x12>
 8005a5a:	f001 f84b 	bl	8006af4 <__sinit>
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <__swbuf_r+0x98>)
 8005a60:	429c      	cmp	r4, r3
 8005a62:	d12b      	bne.n	8005abc <__swbuf_r+0x70>
 8005a64:	686c      	ldr	r4, [r5, #4]
 8005a66:	69a3      	ldr	r3, [r4, #24]
 8005a68:	60a3      	str	r3, [r4, #8]
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	071a      	lsls	r2, r3, #28
 8005a6e:	d52f      	bpl.n	8005ad0 <__swbuf_r+0x84>
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	b36b      	cbz	r3, 8005ad0 <__swbuf_r+0x84>
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1ac0      	subs	r0, r0, r3
 8005a7a:	6963      	ldr	r3, [r4, #20]
 8005a7c:	b2f6      	uxtb	r6, r6
 8005a7e:	4283      	cmp	r3, r0
 8005a80:	4637      	mov	r7, r6
 8005a82:	dc04      	bgt.n	8005a8e <__swbuf_r+0x42>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 ffa0 	bl	80069cc <_fflush_r>
 8005a8c:	bb30      	cbnz	r0, 8005adc <__swbuf_r+0x90>
 8005a8e:	68a3      	ldr	r3, [r4, #8]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	60a3      	str	r3, [r4, #8]
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	6022      	str	r2, [r4, #0]
 8005a9a:	701e      	strb	r6, [r3, #0]
 8005a9c:	6963      	ldr	r3, [r4, #20]
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	4283      	cmp	r3, r0
 8005aa2:	d004      	beq.n	8005aae <__swbuf_r+0x62>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	07db      	lsls	r3, r3, #31
 8005aa8:	d506      	bpl.n	8005ab8 <__swbuf_r+0x6c>
 8005aaa:	2e0a      	cmp	r6, #10
 8005aac:	d104      	bne.n	8005ab8 <__swbuf_r+0x6c>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 ff8b 	bl	80069cc <_fflush_r>
 8005ab6:	b988      	cbnz	r0, 8005adc <__swbuf_r+0x90>
 8005ab8:	4638      	mov	r0, r7
 8005aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <__swbuf_r+0x9c>)
 8005abe:	429c      	cmp	r4, r3
 8005ac0:	d101      	bne.n	8005ac6 <__swbuf_r+0x7a>
 8005ac2:	68ac      	ldr	r4, [r5, #8]
 8005ac4:	e7cf      	b.n	8005a66 <__swbuf_r+0x1a>
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <__swbuf_r+0xa0>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	bf08      	it	eq
 8005acc:	68ec      	ldreq	r4, [r5, #12]
 8005ace:	e7ca      	b.n	8005a66 <__swbuf_r+0x1a>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 f80c 	bl	8005af0 <__swsetup_r>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d0cb      	beq.n	8005a74 <__swbuf_r+0x28>
 8005adc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ae0:	e7ea      	b.n	8005ab8 <__swbuf_r+0x6c>
 8005ae2:	bf00      	nop
 8005ae4:	08008088 	.word	0x08008088
 8005ae8:	080080a8 	.word	0x080080a8
 8005aec:	08008068 	.word	0x08008068

08005af0 <__swsetup_r>:
 8005af0:	4b32      	ldr	r3, [pc, #200]	; (8005bbc <__swsetup_r+0xcc>)
 8005af2:	b570      	push	{r4, r5, r6, lr}
 8005af4:	681d      	ldr	r5, [r3, #0]
 8005af6:	4606      	mov	r6, r0
 8005af8:	460c      	mov	r4, r1
 8005afa:	b125      	cbz	r5, 8005b06 <__swsetup_r+0x16>
 8005afc:	69ab      	ldr	r3, [r5, #24]
 8005afe:	b913      	cbnz	r3, 8005b06 <__swsetup_r+0x16>
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 fff7 	bl	8006af4 <__sinit>
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <__swsetup_r+0xd0>)
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	d10f      	bne.n	8005b2c <__swsetup_r+0x3c>
 8005b0c:	686c      	ldr	r4, [r5, #4]
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b14:	0719      	lsls	r1, r3, #28
 8005b16:	d42c      	bmi.n	8005b72 <__swsetup_r+0x82>
 8005b18:	06dd      	lsls	r5, r3, #27
 8005b1a:	d411      	bmi.n	8005b40 <__swsetup_r+0x50>
 8005b1c:	2309      	movs	r3, #9
 8005b1e:	6033      	str	r3, [r6, #0]
 8005b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2a:	e03e      	b.n	8005baa <__swsetup_r+0xba>
 8005b2c:	4b25      	ldr	r3, [pc, #148]	; (8005bc4 <__swsetup_r+0xd4>)
 8005b2e:	429c      	cmp	r4, r3
 8005b30:	d101      	bne.n	8005b36 <__swsetup_r+0x46>
 8005b32:	68ac      	ldr	r4, [r5, #8]
 8005b34:	e7eb      	b.n	8005b0e <__swsetup_r+0x1e>
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <__swsetup_r+0xd8>)
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	bf08      	it	eq
 8005b3c:	68ec      	ldreq	r4, [r5, #12]
 8005b3e:	e7e6      	b.n	8005b0e <__swsetup_r+0x1e>
 8005b40:	0758      	lsls	r0, r3, #29
 8005b42:	d512      	bpl.n	8005b6a <__swsetup_r+0x7a>
 8005b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b46:	b141      	cbz	r1, 8005b5a <__swsetup_r+0x6a>
 8005b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b4c:	4299      	cmp	r1, r3
 8005b4e:	d002      	beq.n	8005b56 <__swsetup_r+0x66>
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7ff f9a9 	bl	8004ea8 <_free_r>
 8005b56:	2300      	movs	r3, #0
 8005b58:	6363      	str	r3, [r4, #52]	; 0x34
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	2300      	movs	r3, #0
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f043 0308 	orr.w	r3, r3, #8
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	b94b      	cbnz	r3, 8005b8a <__swsetup_r+0x9a>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b80:	d003      	beq.n	8005b8a <__swsetup_r+0x9a>
 8005b82:	4621      	mov	r1, r4
 8005b84:	4630      	mov	r0, r6
 8005b86:	f001 f87f 	bl	8006c88 <__smakebuf_r>
 8005b8a:	89a0      	ldrh	r0, [r4, #12]
 8005b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b90:	f010 0301 	ands.w	r3, r0, #1
 8005b94:	d00a      	beq.n	8005bac <__swsetup_r+0xbc>
 8005b96:	2300      	movs	r3, #0
 8005b98:	60a3      	str	r3, [r4, #8]
 8005b9a:	6963      	ldr	r3, [r4, #20]
 8005b9c:	425b      	negs	r3, r3
 8005b9e:	61a3      	str	r3, [r4, #24]
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	b943      	cbnz	r3, 8005bb6 <__swsetup_r+0xc6>
 8005ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ba8:	d1ba      	bne.n	8005b20 <__swsetup_r+0x30>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	0781      	lsls	r1, r0, #30
 8005bae:	bf58      	it	pl
 8005bb0:	6963      	ldrpl	r3, [r4, #20]
 8005bb2:	60a3      	str	r3, [r4, #8]
 8005bb4:	e7f4      	b.n	8005ba0 <__swsetup_r+0xb0>
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	e7f7      	b.n	8005baa <__swsetup_r+0xba>
 8005bba:	bf00      	nop
 8005bbc:	20000234 	.word	0x20000234
 8005bc0:	08008088 	.word	0x08008088
 8005bc4:	080080a8 	.word	0x080080a8
 8005bc8:	08008068 	.word	0x08008068

08005bcc <quorem>:
 8005bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	6903      	ldr	r3, [r0, #16]
 8005bd2:	690c      	ldr	r4, [r1, #16]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	f2c0 8081 	blt.w	8005cde <quorem+0x112>
 8005bdc:	3c01      	subs	r4, #1
 8005bde:	f101 0814 	add.w	r8, r1, #20
 8005be2:	f100 0514 	add.w	r5, r0, #20
 8005be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c04:	d331      	bcc.n	8005c6a <quorem+0x9e>
 8005c06:	f04f 0e00 	mov.w	lr, #0
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	46ac      	mov	ip, r5
 8005c0e:	46f2      	mov	sl, lr
 8005c10:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c14:	b293      	uxth	r3, r2
 8005c16:	fb06 e303 	mla	r3, r6, r3, lr
 8005c1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	ebaa 0303 	sub.w	r3, sl, r3
 8005c24:	0c12      	lsrs	r2, r2, #16
 8005c26:	f8dc a000 	ldr.w	sl, [ip]
 8005c2a:	fb06 e202 	mla	r2, r6, r2, lr
 8005c2e:	fa13 f38a 	uxtah	r3, r3, sl
 8005c32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c36:	fa1f fa82 	uxth.w	sl, r2
 8005c3a:	f8dc 2000 	ldr.w	r2, [ip]
 8005c3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005c42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c4c:	4581      	cmp	r9, r0
 8005c4e:	f84c 3b04 	str.w	r3, [ip], #4
 8005c52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c56:	d2db      	bcs.n	8005c10 <quorem+0x44>
 8005c58:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c5c:	b92b      	cbnz	r3, 8005c6a <quorem+0x9e>
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	3b04      	subs	r3, #4
 8005c62:	429d      	cmp	r5, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	d32e      	bcc.n	8005cc6 <quorem+0xfa>
 8005c68:	613c      	str	r4, [r7, #16]
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f001 fad6 	bl	800721c <__mcmp>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	db24      	blt.n	8005cbe <quorem+0xf2>
 8005c74:	3601      	adds	r6, #1
 8005c76:	4628      	mov	r0, r5
 8005c78:	f04f 0c00 	mov.w	ip, #0
 8005c7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c80:	f8d0 e000 	ldr.w	lr, [r0]
 8005c84:	b293      	uxth	r3, r2
 8005c86:	ebac 0303 	sub.w	r3, ip, r3
 8005c8a:	0c12      	lsrs	r2, r2, #16
 8005c8c:	fa13 f38e 	uxtah	r3, r3, lr
 8005c90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c9e:	45c1      	cmp	r9, r8
 8005ca0:	f840 3b04 	str.w	r3, [r0], #4
 8005ca4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ca8:	d2e8      	bcs.n	8005c7c <quorem+0xb0>
 8005caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cb2:	b922      	cbnz	r2, 8005cbe <quorem+0xf2>
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	429d      	cmp	r5, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	d30a      	bcc.n	8005cd2 <quorem+0x106>
 8005cbc:	613c      	str	r4, [r7, #16]
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	b003      	add	sp, #12
 8005cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	d1cc      	bne.n	8005c68 <quorem+0x9c>
 8005cce:	3c01      	subs	r4, #1
 8005cd0:	e7c7      	b.n	8005c62 <quorem+0x96>
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	d1f0      	bne.n	8005cbc <quorem+0xf0>
 8005cda:	3c01      	subs	r4, #1
 8005cdc:	e7eb      	b.n	8005cb6 <quorem+0xea>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e7ee      	b.n	8005cc0 <quorem+0xf4>
 8005ce2:	0000      	movs	r0, r0
 8005ce4:	0000      	movs	r0, r0
	...

08005ce8 <_dtoa_r>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ed2d 8b02 	vpush	{d8}
 8005cf0:	ec57 6b10 	vmov	r6, r7, d0
 8005cf4:	b095      	sub	sp, #84	; 0x54
 8005cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005cf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cfc:	9105      	str	r1, [sp, #20]
 8005cfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d02:	4604      	mov	r4, r0
 8005d04:	9209      	str	r2, [sp, #36]	; 0x24
 8005d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d08:	b975      	cbnz	r5, 8005d28 <_dtoa_r+0x40>
 8005d0a:	2010      	movs	r0, #16
 8005d0c:	f7ff f8ae 	bl	8004e6c <malloc>
 8005d10:	4602      	mov	r2, r0
 8005d12:	6260      	str	r0, [r4, #36]	; 0x24
 8005d14:	b920      	cbnz	r0, 8005d20 <_dtoa_r+0x38>
 8005d16:	4bb2      	ldr	r3, [pc, #712]	; (8005fe0 <_dtoa_r+0x2f8>)
 8005d18:	21ea      	movs	r1, #234	; 0xea
 8005d1a:	48b2      	ldr	r0, [pc, #712]	; (8005fe4 <_dtoa_r+0x2fc>)
 8005d1c:	f001 febe 	bl	8007a9c <__assert_func>
 8005d20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d24:	6005      	str	r5, [r0, #0]
 8005d26:	60c5      	str	r5, [r0, #12]
 8005d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	b151      	cbz	r1, 8005d44 <_dtoa_r+0x5c>
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	604a      	str	r2, [r1, #4]
 8005d32:	2301      	movs	r3, #1
 8005d34:	4093      	lsls	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f001 f831 	bl	8006da0 <_Bfree>
 8005d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	1e3b      	subs	r3, r7, #0
 8005d46:	bfb9      	ittee	lt
 8005d48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	9303      	strlt	r3, [sp, #12]
 8005d4e:	2300      	movge	r3, #0
 8005d50:	f8c8 3000 	strge.w	r3, [r8]
 8005d54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005d58:	4ba3      	ldr	r3, [pc, #652]	; (8005fe8 <_dtoa_r+0x300>)
 8005d5a:	bfbc      	itt	lt
 8005d5c:	2201      	movlt	r2, #1
 8005d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d62:	ea33 0309 	bics.w	r3, r3, r9
 8005d66:	d11b      	bne.n	8005da0 <_dtoa_r+0xb8>
 8005d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d74:	4333      	orrs	r3, r6
 8005d76:	f000 857a 	beq.w	800686e <_dtoa_r+0xb86>
 8005d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d7c:	b963      	cbnz	r3, 8005d98 <_dtoa_r+0xb0>
 8005d7e:	4b9b      	ldr	r3, [pc, #620]	; (8005fec <_dtoa_r+0x304>)
 8005d80:	e024      	b.n	8005dcc <_dtoa_r+0xe4>
 8005d82:	4b9b      	ldr	r3, [pc, #620]	; (8005ff0 <_dtoa_r+0x308>)
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	9800      	ldr	r0, [sp, #0]
 8005d8e:	b015      	add	sp, #84	; 0x54
 8005d90:	ecbd 8b02 	vpop	{d8}
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	4b94      	ldr	r3, [pc, #592]	; (8005fec <_dtoa_r+0x304>)
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	3303      	adds	r3, #3
 8005d9e:	e7f3      	b.n	8005d88 <_dtoa_r+0xa0>
 8005da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	ec51 0b17 	vmov	r0, r1, d7
 8005daa:	2300      	movs	r3, #0
 8005dac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005db0:	f7fa fe92 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db4:	4680      	mov	r8, r0
 8005db6:	b158      	cbz	r0, 8005dd0 <_dtoa_r+0xe8>
 8005db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dba:	2301      	movs	r3, #1
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8551 	beq.w	8006868 <_dtoa_r+0xb80>
 8005dc6:	488b      	ldr	r0, [pc, #556]	; (8005ff4 <_dtoa_r+0x30c>)
 8005dc8:	6018      	str	r0, [r3, #0]
 8005dca:	1e43      	subs	r3, r0, #1
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	e7dd      	b.n	8005d8c <_dtoa_r+0xa4>
 8005dd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005dd4:	aa12      	add	r2, sp, #72	; 0x48
 8005dd6:	a913      	add	r1, sp, #76	; 0x4c
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f001 fac3 	bl	8007364 <__d2b>
 8005dde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005de2:	4683      	mov	fp, r0
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	d07c      	beq.n	8005ee2 <_dtoa_r+0x1fa>
 8005de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005df6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005dfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e02:	4b7d      	ldr	r3, [pc, #500]	; (8005ff8 <_dtoa_r+0x310>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	4630      	mov	r0, r6
 8005e08:	4639      	mov	r1, r7
 8005e0a:	f7fa fa45 	bl	8000298 <__aeabi_dsub>
 8005e0e:	a36e      	add	r3, pc, #440	; (adr r3, 8005fc8 <_dtoa_r+0x2e0>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fbf8 	bl	8000608 <__aeabi_dmul>
 8005e18:	a36d      	add	r3, pc, #436	; (adr r3, 8005fd0 <_dtoa_r+0x2e8>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f7fa fa3d 	bl	800029c <__adddf3>
 8005e22:	4606      	mov	r6, r0
 8005e24:	4628      	mov	r0, r5
 8005e26:	460f      	mov	r7, r1
 8005e28:	f7fa fb84 	bl	8000534 <__aeabi_i2d>
 8005e2c:	a36a      	add	r3, pc, #424	; (adr r3, 8005fd8 <_dtoa_r+0x2f0>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa fbe9 	bl	8000608 <__aeabi_dmul>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f7fa fa2d 	bl	800029c <__adddf3>
 8005e42:	4606      	mov	r6, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	f7fa fe8f 	bl	8000b68 <__aeabi_d2iz>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4682      	mov	sl, r0
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa fe4a 	bl	8000aec <__aeabi_dcmplt>
 8005e58:	b148      	cbz	r0, 8005e6e <_dtoa_r+0x186>
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f7fa fb6a 	bl	8000534 <__aeabi_i2d>
 8005e60:	4632      	mov	r2, r6
 8005e62:	463b      	mov	r3, r7
 8005e64:	f7fa fe38 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e68:	b908      	cbnz	r0, 8005e6e <_dtoa_r+0x186>
 8005e6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e6e:	f1ba 0f16 	cmp.w	sl, #22
 8005e72:	d854      	bhi.n	8005f1e <_dtoa_r+0x236>
 8005e74:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <_dtoa_r+0x314>)
 8005e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e82:	f7fa fe33 	bl	8000aec <__aeabi_dcmplt>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d04b      	beq.n	8005f22 <_dtoa_r+0x23a>
 8005e8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e8e:	2300      	movs	r3, #0
 8005e90:	930e      	str	r3, [sp, #56]	; 0x38
 8005e92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e94:	1b5d      	subs	r5, r3, r5
 8005e96:	1e6b      	subs	r3, r5, #1
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	bf43      	ittte	mi
 8005e9c:	2300      	movmi	r3, #0
 8005e9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005ea2:	9304      	strmi	r3, [sp, #16]
 8005ea4:	f04f 0800 	movpl.w	r8, #0
 8005ea8:	f1ba 0f00 	cmp.w	sl, #0
 8005eac:	db3b      	blt.n	8005f26 <_dtoa_r+0x23e>
 8005eae:	9b04      	ldr	r3, [sp, #16]
 8005eb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005eb4:	4453      	add	r3, sl
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9306      	str	r3, [sp, #24]
 8005ebc:	9b05      	ldr	r3, [sp, #20]
 8005ebe:	2b09      	cmp	r3, #9
 8005ec0:	d869      	bhi.n	8005f96 <_dtoa_r+0x2ae>
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	bfc4      	itt	gt
 8005ec6:	3b04      	subgt	r3, #4
 8005ec8:	9305      	strgt	r3, [sp, #20]
 8005eca:	9b05      	ldr	r3, [sp, #20]
 8005ecc:	f1a3 0302 	sub.w	r3, r3, #2
 8005ed0:	bfcc      	ite	gt
 8005ed2:	2500      	movgt	r5, #0
 8005ed4:	2501      	movle	r5, #1
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d869      	bhi.n	8005fae <_dtoa_r+0x2c6>
 8005eda:	e8df f003 	tbb	[pc, r3]
 8005ede:	4e2c      	.short	0x4e2c
 8005ee0:	5a4c      	.short	0x5a4c
 8005ee2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005ee6:	441d      	add	r5, r3
 8005ee8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	bfc1      	itttt	gt
 8005ef0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ef4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ef8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005efc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f00:	bfda      	itte	le
 8005f02:	f1c3 0320 	rsble	r3, r3, #32
 8005f06:	fa06 f003 	lslle.w	r0, r6, r3
 8005f0a:	4318      	orrgt	r0, r3
 8005f0c:	f7fa fb02 	bl	8000514 <__aeabi_ui2d>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4606      	mov	r6, r0
 8005f14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f18:	3d01      	subs	r5, #1
 8005f1a:	9310      	str	r3, [sp, #64]	; 0x40
 8005f1c:	e771      	b.n	8005e02 <_dtoa_r+0x11a>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e7b6      	b.n	8005e90 <_dtoa_r+0x1a8>
 8005f22:	900e      	str	r0, [sp, #56]	; 0x38
 8005f24:	e7b5      	b.n	8005e92 <_dtoa_r+0x1aa>
 8005f26:	f1ca 0300 	rsb	r3, sl, #0
 8005f2a:	9306      	str	r3, [sp, #24]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	eba8 080a 	sub.w	r8, r8, sl
 8005f32:	930d      	str	r3, [sp, #52]	; 0x34
 8005f34:	e7c2      	b.n	8005ebc <_dtoa_r+0x1d4>
 8005f36:	2300      	movs	r3, #0
 8005f38:	9308      	str	r3, [sp, #32]
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dc39      	bgt.n	8005fb4 <_dtoa_r+0x2cc>
 8005f40:	f04f 0901 	mov.w	r9, #1
 8005f44:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f48:	464b      	mov	r3, r9
 8005f4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f50:	2200      	movs	r2, #0
 8005f52:	6042      	str	r2, [r0, #4]
 8005f54:	2204      	movs	r2, #4
 8005f56:	f102 0614 	add.w	r6, r2, #20
 8005f5a:	429e      	cmp	r6, r3
 8005f5c:	6841      	ldr	r1, [r0, #4]
 8005f5e:	d92f      	bls.n	8005fc0 <_dtoa_r+0x2d8>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fedd 	bl	8006d20 <_Balloc>
 8005f66:	9000      	str	r0, [sp, #0]
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d14b      	bne.n	8006004 <_dtoa_r+0x31c>
 8005f6c:	4b24      	ldr	r3, [pc, #144]	; (8006000 <_dtoa_r+0x318>)
 8005f6e:	4602      	mov	r2, r0
 8005f70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f74:	e6d1      	b.n	8005d1a <_dtoa_r+0x32>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e7de      	b.n	8005f38 <_dtoa_r+0x250>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9308      	str	r3, [sp, #32]
 8005f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f80:	eb0a 0903 	add.w	r9, sl, r3
 8005f84:	f109 0301 	add.w	r3, r9, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	bfb8      	it	lt
 8005f8e:	2301      	movlt	r3, #1
 8005f90:	e7dd      	b.n	8005f4e <_dtoa_r+0x266>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e7f2      	b.n	8005f7c <_dtoa_r+0x294>
 8005f96:	2501      	movs	r5, #1
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	9508      	str	r5, [sp, #32]
 8005f9e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fa8:	2312      	movs	r3, #18
 8005faa:	9209      	str	r2, [sp, #36]	; 0x24
 8005fac:	e7cf      	b.n	8005f4e <_dtoa_r+0x266>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	9308      	str	r3, [sp, #32]
 8005fb2:	e7f4      	b.n	8005f9e <_dtoa_r+0x2b6>
 8005fb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005fb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	e7c6      	b.n	8005f4e <_dtoa_r+0x266>
 8005fc0:	3101      	adds	r1, #1
 8005fc2:	6041      	str	r1, [r0, #4]
 8005fc4:	0052      	lsls	r2, r2, #1
 8005fc6:	e7c6      	b.n	8005f56 <_dtoa_r+0x26e>
 8005fc8:	636f4361 	.word	0x636f4361
 8005fcc:	3fd287a7 	.word	0x3fd287a7
 8005fd0:	8b60c8b3 	.word	0x8b60c8b3
 8005fd4:	3fc68a28 	.word	0x3fc68a28
 8005fd8:	509f79fb 	.word	0x509f79fb
 8005fdc:	3fd34413 	.word	0x3fd34413
 8005fe0:	08007fe1 	.word	0x08007fe1
 8005fe4:	08007ff8 	.word	0x08007ff8
 8005fe8:	7ff00000 	.word	0x7ff00000
 8005fec:	08007fdd 	.word	0x08007fdd
 8005ff0:	08007fd4 	.word	0x08007fd4
 8005ff4:	08007fb1 	.word	0x08007fb1
 8005ff8:	3ff80000 	.word	0x3ff80000
 8005ffc:	08008150 	.word	0x08008150
 8006000:	08008057 	.word	0x08008057
 8006004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006006:	9a00      	ldr	r2, [sp, #0]
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	9b01      	ldr	r3, [sp, #4]
 800600c:	2b0e      	cmp	r3, #14
 800600e:	f200 80ad 	bhi.w	800616c <_dtoa_r+0x484>
 8006012:	2d00      	cmp	r5, #0
 8006014:	f000 80aa 	beq.w	800616c <_dtoa_r+0x484>
 8006018:	f1ba 0f00 	cmp.w	sl, #0
 800601c:	dd36      	ble.n	800608c <_dtoa_r+0x3a4>
 800601e:	4ac3      	ldr	r2, [pc, #780]	; (800632c <_dtoa_r+0x644>)
 8006020:	f00a 030f 	and.w	r3, sl, #15
 8006024:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006028:	ed93 7b00 	vldr	d7, [r3]
 800602c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006030:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006034:	eeb0 8a47 	vmov.f32	s16, s14
 8006038:	eef0 8a67 	vmov.f32	s17, s15
 800603c:	d016      	beq.n	800606c <_dtoa_r+0x384>
 800603e:	4bbc      	ldr	r3, [pc, #752]	; (8006330 <_dtoa_r+0x648>)
 8006040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006044:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006048:	f7fa fc08 	bl	800085c <__aeabi_ddiv>
 800604c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006050:	f007 070f 	and.w	r7, r7, #15
 8006054:	2503      	movs	r5, #3
 8006056:	4eb6      	ldr	r6, [pc, #728]	; (8006330 <_dtoa_r+0x648>)
 8006058:	b957      	cbnz	r7, 8006070 <_dtoa_r+0x388>
 800605a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605e:	ec53 2b18 	vmov	r2, r3, d8
 8006062:	f7fa fbfb 	bl	800085c <__aeabi_ddiv>
 8006066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800606a:	e029      	b.n	80060c0 <_dtoa_r+0x3d8>
 800606c:	2502      	movs	r5, #2
 800606e:	e7f2      	b.n	8006056 <_dtoa_r+0x36e>
 8006070:	07f9      	lsls	r1, r7, #31
 8006072:	d508      	bpl.n	8006086 <_dtoa_r+0x39e>
 8006074:	ec51 0b18 	vmov	r0, r1, d8
 8006078:	e9d6 2300 	ldrd	r2, r3, [r6]
 800607c:	f7fa fac4 	bl	8000608 <__aeabi_dmul>
 8006080:	ec41 0b18 	vmov	d8, r0, r1
 8006084:	3501      	adds	r5, #1
 8006086:	107f      	asrs	r7, r7, #1
 8006088:	3608      	adds	r6, #8
 800608a:	e7e5      	b.n	8006058 <_dtoa_r+0x370>
 800608c:	f000 80a6 	beq.w	80061dc <_dtoa_r+0x4f4>
 8006090:	f1ca 0600 	rsb	r6, sl, #0
 8006094:	4ba5      	ldr	r3, [pc, #660]	; (800632c <_dtoa_r+0x644>)
 8006096:	4fa6      	ldr	r7, [pc, #664]	; (8006330 <_dtoa_r+0x648>)
 8006098:	f006 020f 	and.w	r2, r6, #15
 800609c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060a8:	f7fa faae 	bl	8000608 <__aeabi_dmul>
 80060ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b0:	1136      	asrs	r6, r6, #4
 80060b2:	2300      	movs	r3, #0
 80060b4:	2502      	movs	r5, #2
 80060b6:	2e00      	cmp	r6, #0
 80060b8:	f040 8085 	bne.w	80061c6 <_dtoa_r+0x4de>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1d2      	bne.n	8006066 <_dtoa_r+0x37e>
 80060c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 808c 	beq.w	80061e0 <_dtoa_r+0x4f8>
 80060c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060cc:	4b99      	ldr	r3, [pc, #612]	; (8006334 <_dtoa_r+0x64c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	4630      	mov	r0, r6
 80060d2:	4639      	mov	r1, r7
 80060d4:	f7fa fd0a 	bl	8000aec <__aeabi_dcmplt>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f000 8081 	beq.w	80061e0 <_dtoa_r+0x4f8>
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d07d      	beq.n	80061e0 <_dtoa_r+0x4f8>
 80060e4:	f1b9 0f00 	cmp.w	r9, #0
 80060e8:	dd3c      	ble.n	8006164 <_dtoa_r+0x47c>
 80060ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80060ee:	9307      	str	r3, [sp, #28]
 80060f0:	2200      	movs	r2, #0
 80060f2:	4b91      	ldr	r3, [pc, #580]	; (8006338 <_dtoa_r+0x650>)
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fa86 	bl	8000608 <__aeabi_dmul>
 80060fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006100:	3501      	adds	r5, #1
 8006102:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006106:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800610a:	4628      	mov	r0, r5
 800610c:	f7fa fa12 	bl	8000534 <__aeabi_i2d>
 8006110:	4632      	mov	r2, r6
 8006112:	463b      	mov	r3, r7
 8006114:	f7fa fa78 	bl	8000608 <__aeabi_dmul>
 8006118:	4b88      	ldr	r3, [pc, #544]	; (800633c <_dtoa_r+0x654>)
 800611a:	2200      	movs	r2, #0
 800611c:	f7fa f8be 	bl	800029c <__adddf3>
 8006120:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800612c:	2b00      	cmp	r3, #0
 800612e:	d15c      	bne.n	80061ea <_dtoa_r+0x502>
 8006130:	4b83      	ldr	r3, [pc, #524]	; (8006340 <_dtoa_r+0x658>)
 8006132:	2200      	movs	r2, #0
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa f8ae 	bl	8000298 <__aeabi_dsub>
 800613c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006140:	4606      	mov	r6, r0
 8006142:	460f      	mov	r7, r1
 8006144:	f7fa fcf0 	bl	8000b28 <__aeabi_dcmpgt>
 8006148:	2800      	cmp	r0, #0
 800614a:	f040 8296 	bne.w	800667a <_dtoa_r+0x992>
 800614e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006152:	4630      	mov	r0, r6
 8006154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa fcc7 	bl	8000aec <__aeabi_dcmplt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8288 	bne.w	8006674 <_dtoa_r+0x98c>
 8006164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800616c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800616e:	2b00      	cmp	r3, #0
 8006170:	f2c0 8158 	blt.w	8006424 <_dtoa_r+0x73c>
 8006174:	f1ba 0f0e 	cmp.w	sl, #14
 8006178:	f300 8154 	bgt.w	8006424 <_dtoa_r+0x73c>
 800617c:	4b6b      	ldr	r3, [pc, #428]	; (800632c <_dtoa_r+0x644>)
 800617e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006182:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	f280 80e3 	bge.w	8006354 <_dtoa_r+0x66c>
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f300 80df 	bgt.w	8006354 <_dtoa_r+0x66c>
 8006196:	f040 826d 	bne.w	8006674 <_dtoa_r+0x98c>
 800619a:	4b69      	ldr	r3, [pc, #420]	; (8006340 <_dtoa_r+0x658>)
 800619c:	2200      	movs	r2, #0
 800619e:	4640      	mov	r0, r8
 80061a0:	4649      	mov	r1, r9
 80061a2:	f7fa fa31 	bl	8000608 <__aeabi_dmul>
 80061a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061aa:	f7fa fcb3 	bl	8000b14 <__aeabi_dcmpge>
 80061ae:	9e01      	ldr	r6, [sp, #4]
 80061b0:	4637      	mov	r7, r6
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f040 8243 	bne.w	800663e <_dtoa_r+0x956>
 80061b8:	9d00      	ldr	r5, [sp, #0]
 80061ba:	2331      	movs	r3, #49	; 0x31
 80061bc:	f805 3b01 	strb.w	r3, [r5], #1
 80061c0:	f10a 0a01 	add.w	sl, sl, #1
 80061c4:	e23f      	b.n	8006646 <_dtoa_r+0x95e>
 80061c6:	07f2      	lsls	r2, r6, #31
 80061c8:	d505      	bpl.n	80061d6 <_dtoa_r+0x4ee>
 80061ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ce:	f7fa fa1b 	bl	8000608 <__aeabi_dmul>
 80061d2:	3501      	adds	r5, #1
 80061d4:	2301      	movs	r3, #1
 80061d6:	1076      	asrs	r6, r6, #1
 80061d8:	3708      	adds	r7, #8
 80061da:	e76c      	b.n	80060b6 <_dtoa_r+0x3ce>
 80061dc:	2502      	movs	r5, #2
 80061de:	e76f      	b.n	80060c0 <_dtoa_r+0x3d8>
 80061e0:	9b01      	ldr	r3, [sp, #4]
 80061e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80061e6:	930c      	str	r3, [sp, #48]	; 0x30
 80061e8:	e78d      	b.n	8006106 <_dtoa_r+0x41e>
 80061ea:	9900      	ldr	r1, [sp, #0]
 80061ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80061ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f0:	4b4e      	ldr	r3, [pc, #312]	; (800632c <_dtoa_r+0x644>)
 80061f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061f6:	4401      	add	r1, r0
 80061f8:	9102      	str	r1, [sp, #8]
 80061fa:	9908      	ldr	r1, [sp, #32]
 80061fc:	eeb0 8a47 	vmov.f32	s16, s14
 8006200:	eef0 8a67 	vmov.f32	s17, s15
 8006204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006208:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800620c:	2900      	cmp	r1, #0
 800620e:	d045      	beq.n	800629c <_dtoa_r+0x5b4>
 8006210:	494c      	ldr	r1, [pc, #304]	; (8006344 <_dtoa_r+0x65c>)
 8006212:	2000      	movs	r0, #0
 8006214:	f7fa fb22 	bl	800085c <__aeabi_ddiv>
 8006218:	ec53 2b18 	vmov	r2, r3, d8
 800621c:	f7fa f83c 	bl	8000298 <__aeabi_dsub>
 8006220:	9d00      	ldr	r5, [sp, #0]
 8006222:	ec41 0b18 	vmov	d8, r0, r1
 8006226:	4639      	mov	r1, r7
 8006228:	4630      	mov	r0, r6
 800622a:	f7fa fc9d 	bl	8000b68 <__aeabi_d2iz>
 800622e:	900c      	str	r0, [sp, #48]	; 0x30
 8006230:	f7fa f980 	bl	8000534 <__aeabi_i2d>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4630      	mov	r0, r6
 800623a:	4639      	mov	r1, r7
 800623c:	f7fa f82c 	bl	8000298 <__aeabi_dsub>
 8006240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006242:	3330      	adds	r3, #48	; 0x30
 8006244:	f805 3b01 	strb.w	r3, [r5], #1
 8006248:	ec53 2b18 	vmov	r2, r3, d8
 800624c:	4606      	mov	r6, r0
 800624e:	460f      	mov	r7, r1
 8006250:	f7fa fc4c 	bl	8000aec <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	d165      	bne.n	8006324 <_dtoa_r+0x63c>
 8006258:	4632      	mov	r2, r6
 800625a:	463b      	mov	r3, r7
 800625c:	4935      	ldr	r1, [pc, #212]	; (8006334 <_dtoa_r+0x64c>)
 800625e:	2000      	movs	r0, #0
 8006260:	f7fa f81a 	bl	8000298 <__aeabi_dsub>
 8006264:	ec53 2b18 	vmov	r2, r3, d8
 8006268:	f7fa fc40 	bl	8000aec <__aeabi_dcmplt>
 800626c:	2800      	cmp	r0, #0
 800626e:	f040 80b9 	bne.w	80063e4 <_dtoa_r+0x6fc>
 8006272:	9b02      	ldr	r3, [sp, #8]
 8006274:	429d      	cmp	r5, r3
 8006276:	f43f af75 	beq.w	8006164 <_dtoa_r+0x47c>
 800627a:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <_dtoa_r+0x650>)
 800627c:	ec51 0b18 	vmov	r0, r1, d8
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa f9c1 	bl	8000608 <__aeabi_dmul>
 8006286:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <_dtoa_r+0x650>)
 8006288:	ec41 0b18 	vmov	d8, r0, r1
 800628c:	2200      	movs	r2, #0
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7fa f9b9 	bl	8000608 <__aeabi_dmul>
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	e7c4      	b.n	8006226 <_dtoa_r+0x53e>
 800629c:	ec51 0b17 	vmov	r0, r1, d7
 80062a0:	f7fa f9b2 	bl	8000608 <__aeabi_dmul>
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	9d00      	ldr	r5, [sp, #0]
 80062a8:	930c      	str	r3, [sp, #48]	; 0x30
 80062aa:	ec41 0b18 	vmov	d8, r0, r1
 80062ae:	4639      	mov	r1, r7
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7fa fc59 	bl	8000b68 <__aeabi_d2iz>
 80062b6:	9011      	str	r0, [sp, #68]	; 0x44
 80062b8:	f7fa f93c 	bl	8000534 <__aeabi_i2d>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4630      	mov	r0, r6
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7f9 ffe8 	bl	8000298 <__aeabi_dsub>
 80062c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062ca:	3330      	adds	r3, #48	; 0x30
 80062cc:	f805 3b01 	strb.w	r3, [r5], #1
 80062d0:	9b02      	ldr	r3, [sp, #8]
 80062d2:	429d      	cmp	r5, r3
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	d134      	bne.n	8006348 <_dtoa_r+0x660>
 80062de:	4b19      	ldr	r3, [pc, #100]	; (8006344 <_dtoa_r+0x65c>)
 80062e0:	ec51 0b18 	vmov	r0, r1, d8
 80062e4:	f7f9 ffda 	bl	800029c <__adddf3>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa fc1a 	bl	8000b28 <__aeabi_dcmpgt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d175      	bne.n	80063e4 <_dtoa_r+0x6fc>
 80062f8:	ec53 2b18 	vmov	r2, r3, d8
 80062fc:	4911      	ldr	r1, [pc, #68]	; (8006344 <_dtoa_r+0x65c>)
 80062fe:	2000      	movs	r0, #0
 8006300:	f7f9 ffca 	bl	8000298 <__aeabi_dsub>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4630      	mov	r0, r6
 800630a:	4639      	mov	r1, r7
 800630c:	f7fa fbee 	bl	8000aec <__aeabi_dcmplt>
 8006310:	2800      	cmp	r0, #0
 8006312:	f43f af27 	beq.w	8006164 <_dtoa_r+0x47c>
 8006316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006318:	1e6b      	subs	r3, r5, #1
 800631a:	930c      	str	r3, [sp, #48]	; 0x30
 800631c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d0f8      	beq.n	8006316 <_dtoa_r+0x62e>
 8006324:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006328:	e04a      	b.n	80063c0 <_dtoa_r+0x6d8>
 800632a:	bf00      	nop
 800632c:	08008150 	.word	0x08008150
 8006330:	08008128 	.word	0x08008128
 8006334:	3ff00000 	.word	0x3ff00000
 8006338:	40240000 	.word	0x40240000
 800633c:	401c0000 	.word	0x401c0000
 8006340:	40140000 	.word	0x40140000
 8006344:	3fe00000 	.word	0x3fe00000
 8006348:	4baf      	ldr	r3, [pc, #700]	; (8006608 <_dtoa_r+0x920>)
 800634a:	f7fa f95d 	bl	8000608 <__aeabi_dmul>
 800634e:	4606      	mov	r6, r0
 8006350:	460f      	mov	r7, r1
 8006352:	e7ac      	b.n	80062ae <_dtoa_r+0x5c6>
 8006354:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006358:	9d00      	ldr	r5, [sp, #0]
 800635a:	4642      	mov	r2, r8
 800635c:	464b      	mov	r3, r9
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa fa7b 	bl	800085c <__aeabi_ddiv>
 8006366:	f7fa fbff 	bl	8000b68 <__aeabi_d2iz>
 800636a:	9002      	str	r0, [sp, #8]
 800636c:	f7fa f8e2 	bl	8000534 <__aeabi_i2d>
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	f7fa f948 	bl	8000608 <__aeabi_dmul>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7f9 ff8a 	bl	8000298 <__aeabi_dsub>
 8006384:	9e02      	ldr	r6, [sp, #8]
 8006386:	9f01      	ldr	r7, [sp, #4]
 8006388:	3630      	adds	r6, #48	; 0x30
 800638a:	f805 6b01 	strb.w	r6, [r5], #1
 800638e:	9e00      	ldr	r6, [sp, #0]
 8006390:	1bae      	subs	r6, r5, r6
 8006392:	42b7      	cmp	r7, r6
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	d137      	bne.n	800640a <_dtoa_r+0x722>
 800639a:	f7f9 ff7f 	bl	800029c <__adddf3>
 800639e:	4642      	mov	r2, r8
 80063a0:	464b      	mov	r3, r9
 80063a2:	4606      	mov	r6, r0
 80063a4:	460f      	mov	r7, r1
 80063a6:	f7fa fbbf 	bl	8000b28 <__aeabi_dcmpgt>
 80063aa:	b9c8      	cbnz	r0, 80063e0 <_dtoa_r+0x6f8>
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	f7fa fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 80063b8:	b110      	cbz	r0, 80063c0 <_dtoa_r+0x6d8>
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	07d9      	lsls	r1, r3, #31
 80063be:	d40f      	bmi.n	80063e0 <_dtoa_r+0x6f8>
 80063c0:	4620      	mov	r0, r4
 80063c2:	4659      	mov	r1, fp
 80063c4:	f000 fcec 	bl	8006da0 <_Bfree>
 80063c8:	2300      	movs	r3, #0
 80063ca:	702b      	strb	r3, [r5, #0]
 80063cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ce:	f10a 0001 	add.w	r0, sl, #1
 80063d2:	6018      	str	r0, [r3, #0]
 80063d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f43f acd8 	beq.w	8005d8c <_dtoa_r+0xa4>
 80063dc:	601d      	str	r5, [r3, #0]
 80063de:	e4d5      	b.n	8005d8c <_dtoa_r+0xa4>
 80063e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80063e4:	462b      	mov	r3, r5
 80063e6:	461d      	mov	r5, r3
 80063e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ec:	2a39      	cmp	r2, #57	; 0x39
 80063ee:	d108      	bne.n	8006402 <_dtoa_r+0x71a>
 80063f0:	9a00      	ldr	r2, [sp, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d1f7      	bne.n	80063e6 <_dtoa_r+0x6fe>
 80063f6:	9a07      	ldr	r2, [sp, #28]
 80063f8:	9900      	ldr	r1, [sp, #0]
 80063fa:	3201      	adds	r2, #1
 80063fc:	9207      	str	r2, [sp, #28]
 80063fe:	2230      	movs	r2, #48	; 0x30
 8006400:	700a      	strb	r2, [r1, #0]
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	3201      	adds	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	e78c      	b.n	8006324 <_dtoa_r+0x63c>
 800640a:	4b7f      	ldr	r3, [pc, #508]	; (8006608 <_dtoa_r+0x920>)
 800640c:	2200      	movs	r2, #0
 800640e:	f7fa f8fb 	bl	8000608 <__aeabi_dmul>
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4606      	mov	r6, r0
 8006418:	460f      	mov	r7, r1
 800641a:	f7fa fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800641e:	2800      	cmp	r0, #0
 8006420:	d09b      	beq.n	800635a <_dtoa_r+0x672>
 8006422:	e7cd      	b.n	80063c0 <_dtoa_r+0x6d8>
 8006424:	9a08      	ldr	r2, [sp, #32]
 8006426:	2a00      	cmp	r2, #0
 8006428:	f000 80c4 	beq.w	80065b4 <_dtoa_r+0x8cc>
 800642c:	9a05      	ldr	r2, [sp, #20]
 800642e:	2a01      	cmp	r2, #1
 8006430:	f300 80a8 	bgt.w	8006584 <_dtoa_r+0x89c>
 8006434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006436:	2a00      	cmp	r2, #0
 8006438:	f000 80a0 	beq.w	800657c <_dtoa_r+0x894>
 800643c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006440:	9e06      	ldr	r6, [sp, #24]
 8006442:	4645      	mov	r5, r8
 8006444:	9a04      	ldr	r2, [sp, #16]
 8006446:	2101      	movs	r1, #1
 8006448:	441a      	add	r2, r3
 800644a:	4620      	mov	r0, r4
 800644c:	4498      	add	r8, r3
 800644e:	9204      	str	r2, [sp, #16]
 8006450:	f000 fd62 	bl	8006f18 <__i2b>
 8006454:	4607      	mov	r7, r0
 8006456:	2d00      	cmp	r5, #0
 8006458:	dd0b      	ble.n	8006472 <_dtoa_r+0x78a>
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd08      	ble.n	8006472 <_dtoa_r+0x78a>
 8006460:	42ab      	cmp	r3, r5
 8006462:	9a04      	ldr	r2, [sp, #16]
 8006464:	bfa8      	it	ge
 8006466:	462b      	movge	r3, r5
 8006468:	eba8 0803 	sub.w	r8, r8, r3
 800646c:	1aed      	subs	r5, r5, r3
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	b1fb      	cbz	r3, 80064b6 <_dtoa_r+0x7ce>
 8006476:	9b08      	ldr	r3, [sp, #32]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 809f 	beq.w	80065bc <_dtoa_r+0x8d4>
 800647e:	2e00      	cmp	r6, #0
 8006480:	dd11      	ble.n	80064a6 <_dtoa_r+0x7be>
 8006482:	4639      	mov	r1, r7
 8006484:	4632      	mov	r2, r6
 8006486:	4620      	mov	r0, r4
 8006488:	f000 fe02 	bl	8007090 <__pow5mult>
 800648c:	465a      	mov	r2, fp
 800648e:	4601      	mov	r1, r0
 8006490:	4607      	mov	r7, r0
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fd56 	bl	8006f44 <__multiply>
 8006498:	4659      	mov	r1, fp
 800649a:	9007      	str	r0, [sp, #28]
 800649c:	4620      	mov	r0, r4
 800649e:	f000 fc7f 	bl	8006da0 <_Bfree>
 80064a2:	9b07      	ldr	r3, [sp, #28]
 80064a4:	469b      	mov	fp, r3
 80064a6:	9b06      	ldr	r3, [sp, #24]
 80064a8:	1b9a      	subs	r2, r3, r6
 80064aa:	d004      	beq.n	80064b6 <_dtoa_r+0x7ce>
 80064ac:	4659      	mov	r1, fp
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fdee 	bl	8007090 <__pow5mult>
 80064b4:	4683      	mov	fp, r0
 80064b6:	2101      	movs	r1, #1
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fd2d 	bl	8006f18 <__i2b>
 80064be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	4606      	mov	r6, r0
 80064c4:	dd7c      	ble.n	80065c0 <_dtoa_r+0x8d8>
 80064c6:	461a      	mov	r2, r3
 80064c8:	4601      	mov	r1, r0
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 fde0 	bl	8007090 <__pow5mult>
 80064d0:	9b05      	ldr	r3, [sp, #20]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	4606      	mov	r6, r0
 80064d6:	dd76      	ble.n	80065c6 <_dtoa_r+0x8de>
 80064d8:	2300      	movs	r3, #0
 80064da:	9306      	str	r3, [sp, #24]
 80064dc:	6933      	ldr	r3, [r6, #16]
 80064de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064e2:	6918      	ldr	r0, [r3, #16]
 80064e4:	f000 fcc8 	bl	8006e78 <__hi0bits>
 80064e8:	f1c0 0020 	rsb	r0, r0, #32
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	4418      	add	r0, r3
 80064f0:	f010 001f 	ands.w	r0, r0, #31
 80064f4:	f000 8086 	beq.w	8006604 <_dtoa_r+0x91c>
 80064f8:	f1c0 0320 	rsb	r3, r0, #32
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	dd7f      	ble.n	8006600 <_dtoa_r+0x918>
 8006500:	f1c0 001c 	rsb	r0, r0, #28
 8006504:	9b04      	ldr	r3, [sp, #16]
 8006506:	4403      	add	r3, r0
 8006508:	4480      	add	r8, r0
 800650a:	4405      	add	r5, r0
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	f1b8 0f00 	cmp.w	r8, #0
 8006512:	dd05      	ble.n	8006520 <_dtoa_r+0x838>
 8006514:	4659      	mov	r1, fp
 8006516:	4642      	mov	r2, r8
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fe13 	bl	8007144 <__lshift>
 800651e:	4683      	mov	fp, r0
 8006520:	9b04      	ldr	r3, [sp, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	dd05      	ble.n	8006532 <_dtoa_r+0x84a>
 8006526:	4631      	mov	r1, r6
 8006528:	461a      	mov	r2, r3
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fe0a 	bl	8007144 <__lshift>
 8006530:	4606      	mov	r6, r0
 8006532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d069      	beq.n	800660c <_dtoa_r+0x924>
 8006538:	4631      	mov	r1, r6
 800653a:	4658      	mov	r0, fp
 800653c:	f000 fe6e 	bl	800721c <__mcmp>
 8006540:	2800      	cmp	r0, #0
 8006542:	da63      	bge.n	800660c <_dtoa_r+0x924>
 8006544:	2300      	movs	r3, #0
 8006546:	4659      	mov	r1, fp
 8006548:	220a      	movs	r2, #10
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fc4a 	bl	8006de4 <__multadd>
 8006550:	9b08      	ldr	r3, [sp, #32]
 8006552:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006556:	4683      	mov	fp, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 818f 	beq.w	800687c <_dtoa_r+0xb94>
 800655e:	4639      	mov	r1, r7
 8006560:	2300      	movs	r3, #0
 8006562:	220a      	movs	r2, #10
 8006564:	4620      	mov	r0, r4
 8006566:	f000 fc3d 	bl	8006de4 <__multadd>
 800656a:	f1b9 0f00 	cmp.w	r9, #0
 800656e:	4607      	mov	r7, r0
 8006570:	f300 808e 	bgt.w	8006690 <_dtoa_r+0x9a8>
 8006574:	9b05      	ldr	r3, [sp, #20]
 8006576:	2b02      	cmp	r3, #2
 8006578:	dc50      	bgt.n	800661c <_dtoa_r+0x934>
 800657a:	e089      	b.n	8006690 <_dtoa_r+0x9a8>
 800657c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800657e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006582:	e75d      	b.n	8006440 <_dtoa_r+0x758>
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	1e5e      	subs	r6, r3, #1
 8006588:	9b06      	ldr	r3, [sp, #24]
 800658a:	42b3      	cmp	r3, r6
 800658c:	bfbf      	itttt	lt
 800658e:	9b06      	ldrlt	r3, [sp, #24]
 8006590:	9606      	strlt	r6, [sp, #24]
 8006592:	1af2      	sublt	r2, r6, r3
 8006594:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006596:	bfb6      	itet	lt
 8006598:	189b      	addlt	r3, r3, r2
 800659a:	1b9e      	subge	r6, r3, r6
 800659c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	bfb8      	it	lt
 80065a2:	2600      	movlt	r6, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bfb5      	itete	lt
 80065a8:	eba8 0503 	sublt.w	r5, r8, r3
 80065ac:	9b01      	ldrge	r3, [sp, #4]
 80065ae:	2300      	movlt	r3, #0
 80065b0:	4645      	movge	r5, r8
 80065b2:	e747      	b.n	8006444 <_dtoa_r+0x75c>
 80065b4:	9e06      	ldr	r6, [sp, #24]
 80065b6:	9f08      	ldr	r7, [sp, #32]
 80065b8:	4645      	mov	r5, r8
 80065ba:	e74c      	b.n	8006456 <_dtoa_r+0x76e>
 80065bc:	9a06      	ldr	r2, [sp, #24]
 80065be:	e775      	b.n	80064ac <_dtoa_r+0x7c4>
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	dc18      	bgt.n	80065f8 <_dtoa_r+0x910>
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	b9b3      	cbnz	r3, 80065f8 <_dtoa_r+0x910>
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d0:	b9a3      	cbnz	r3, 80065fc <_dtoa_r+0x914>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065d8:	0d1b      	lsrs	r3, r3, #20
 80065da:	051b      	lsls	r3, r3, #20
 80065dc:	b12b      	cbz	r3, 80065ea <_dtoa_r+0x902>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	3301      	adds	r3, #1
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	f108 0801 	add.w	r8, r8, #1
 80065e8:	2301      	movs	r3, #1
 80065ea:	9306      	str	r3, [sp, #24]
 80065ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f47f af74 	bne.w	80064dc <_dtoa_r+0x7f4>
 80065f4:	2001      	movs	r0, #1
 80065f6:	e779      	b.n	80064ec <_dtoa_r+0x804>
 80065f8:	2300      	movs	r3, #0
 80065fa:	e7f6      	b.n	80065ea <_dtoa_r+0x902>
 80065fc:	9b02      	ldr	r3, [sp, #8]
 80065fe:	e7f4      	b.n	80065ea <_dtoa_r+0x902>
 8006600:	d085      	beq.n	800650e <_dtoa_r+0x826>
 8006602:	4618      	mov	r0, r3
 8006604:	301c      	adds	r0, #28
 8006606:	e77d      	b.n	8006504 <_dtoa_r+0x81c>
 8006608:	40240000 	.word	0x40240000
 800660c:	9b01      	ldr	r3, [sp, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	dc38      	bgt.n	8006684 <_dtoa_r+0x99c>
 8006612:	9b05      	ldr	r3, [sp, #20]
 8006614:	2b02      	cmp	r3, #2
 8006616:	dd35      	ble.n	8006684 <_dtoa_r+0x99c>
 8006618:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800661c:	f1b9 0f00 	cmp.w	r9, #0
 8006620:	d10d      	bne.n	800663e <_dtoa_r+0x956>
 8006622:	4631      	mov	r1, r6
 8006624:	464b      	mov	r3, r9
 8006626:	2205      	movs	r2, #5
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fbdb 	bl	8006de4 <__multadd>
 800662e:	4601      	mov	r1, r0
 8006630:	4606      	mov	r6, r0
 8006632:	4658      	mov	r0, fp
 8006634:	f000 fdf2 	bl	800721c <__mcmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	f73f adbd 	bgt.w	80061b8 <_dtoa_r+0x4d0>
 800663e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006640:	9d00      	ldr	r5, [sp, #0]
 8006642:	ea6f 0a03 	mvn.w	sl, r3
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	4631      	mov	r1, r6
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fba7 	bl	8006da0 <_Bfree>
 8006652:	2f00      	cmp	r7, #0
 8006654:	f43f aeb4 	beq.w	80063c0 <_dtoa_r+0x6d8>
 8006658:	f1b8 0f00 	cmp.w	r8, #0
 800665c:	d005      	beq.n	800666a <_dtoa_r+0x982>
 800665e:	45b8      	cmp	r8, r7
 8006660:	d003      	beq.n	800666a <_dtoa_r+0x982>
 8006662:	4641      	mov	r1, r8
 8006664:	4620      	mov	r0, r4
 8006666:	f000 fb9b 	bl	8006da0 <_Bfree>
 800666a:	4639      	mov	r1, r7
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fb97 	bl	8006da0 <_Bfree>
 8006672:	e6a5      	b.n	80063c0 <_dtoa_r+0x6d8>
 8006674:	2600      	movs	r6, #0
 8006676:	4637      	mov	r7, r6
 8006678:	e7e1      	b.n	800663e <_dtoa_r+0x956>
 800667a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800667c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006680:	4637      	mov	r7, r6
 8006682:	e599      	b.n	80061b8 <_dtoa_r+0x4d0>
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80fd 	beq.w	800688a <_dtoa_r+0xba2>
 8006690:	2d00      	cmp	r5, #0
 8006692:	dd05      	ble.n	80066a0 <_dtoa_r+0x9b8>
 8006694:	4639      	mov	r1, r7
 8006696:	462a      	mov	r2, r5
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fd53 	bl	8007144 <__lshift>
 800669e:	4607      	mov	r7, r0
 80066a0:	9b06      	ldr	r3, [sp, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d05c      	beq.n	8006760 <_dtoa_r+0xa78>
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 fb39 	bl	8006d20 <_Balloc>
 80066ae:	4605      	mov	r5, r0
 80066b0:	b928      	cbnz	r0, 80066be <_dtoa_r+0x9d6>
 80066b2:	4b80      	ldr	r3, [pc, #512]	; (80068b4 <_dtoa_r+0xbcc>)
 80066b4:	4602      	mov	r2, r0
 80066b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066ba:	f7ff bb2e 	b.w	8005d1a <_dtoa_r+0x32>
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	3202      	adds	r2, #2
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	f107 010c 	add.w	r1, r7, #12
 80066c8:	300c      	adds	r0, #12
 80066ca:	f7fe fbd7 	bl	8004e7c <memcpy>
 80066ce:	2201      	movs	r2, #1
 80066d0:	4629      	mov	r1, r5
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fd36 	bl	8007144 <__lshift>
 80066d8:	9b00      	ldr	r3, [sp, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	444b      	add	r3, r9
 80066e2:	9307      	str	r3, [sp, #28]
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	46b8      	mov	r8, r7
 80066ec:	9306      	str	r3, [sp, #24]
 80066ee:	4607      	mov	r7, r0
 80066f0:	9b01      	ldr	r3, [sp, #4]
 80066f2:	4631      	mov	r1, r6
 80066f4:	3b01      	subs	r3, #1
 80066f6:	4658      	mov	r0, fp
 80066f8:	9302      	str	r3, [sp, #8]
 80066fa:	f7ff fa67 	bl	8005bcc <quorem>
 80066fe:	4603      	mov	r3, r0
 8006700:	3330      	adds	r3, #48	; 0x30
 8006702:	9004      	str	r0, [sp, #16]
 8006704:	4641      	mov	r1, r8
 8006706:	4658      	mov	r0, fp
 8006708:	9308      	str	r3, [sp, #32]
 800670a:	f000 fd87 	bl	800721c <__mcmp>
 800670e:	463a      	mov	r2, r7
 8006710:	4681      	mov	r9, r0
 8006712:	4631      	mov	r1, r6
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fd9d 	bl	8007254 <__mdiff>
 800671a:	68c2      	ldr	r2, [r0, #12]
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	4605      	mov	r5, r0
 8006720:	bb02      	cbnz	r2, 8006764 <_dtoa_r+0xa7c>
 8006722:	4601      	mov	r1, r0
 8006724:	4658      	mov	r0, fp
 8006726:	f000 fd79 	bl	800721c <__mcmp>
 800672a:	9b08      	ldr	r3, [sp, #32]
 800672c:	4602      	mov	r2, r0
 800672e:	4629      	mov	r1, r5
 8006730:	4620      	mov	r0, r4
 8006732:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006736:	f000 fb33 	bl	8006da0 <_Bfree>
 800673a:	9b05      	ldr	r3, [sp, #20]
 800673c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673e:	9d01      	ldr	r5, [sp, #4]
 8006740:	ea43 0102 	orr.w	r1, r3, r2
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	430b      	orrs	r3, r1
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	d10d      	bne.n	8006768 <_dtoa_r+0xa80>
 800674c:	2b39      	cmp	r3, #57	; 0x39
 800674e:	d029      	beq.n	80067a4 <_dtoa_r+0xabc>
 8006750:	f1b9 0f00 	cmp.w	r9, #0
 8006754:	dd01      	ble.n	800675a <_dtoa_r+0xa72>
 8006756:	9b04      	ldr	r3, [sp, #16]
 8006758:	3331      	adds	r3, #49	; 0x31
 800675a:	9a02      	ldr	r2, [sp, #8]
 800675c:	7013      	strb	r3, [r2, #0]
 800675e:	e774      	b.n	800664a <_dtoa_r+0x962>
 8006760:	4638      	mov	r0, r7
 8006762:	e7b9      	b.n	80066d8 <_dtoa_r+0x9f0>
 8006764:	2201      	movs	r2, #1
 8006766:	e7e2      	b.n	800672e <_dtoa_r+0xa46>
 8006768:	f1b9 0f00 	cmp.w	r9, #0
 800676c:	db06      	blt.n	800677c <_dtoa_r+0xa94>
 800676e:	9905      	ldr	r1, [sp, #20]
 8006770:	ea41 0909 	orr.w	r9, r1, r9
 8006774:	9906      	ldr	r1, [sp, #24]
 8006776:	ea59 0101 	orrs.w	r1, r9, r1
 800677a:	d120      	bne.n	80067be <_dtoa_r+0xad6>
 800677c:	2a00      	cmp	r2, #0
 800677e:	ddec      	ble.n	800675a <_dtoa_r+0xa72>
 8006780:	4659      	mov	r1, fp
 8006782:	2201      	movs	r2, #1
 8006784:	4620      	mov	r0, r4
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	f000 fcdc 	bl	8007144 <__lshift>
 800678c:	4631      	mov	r1, r6
 800678e:	4683      	mov	fp, r0
 8006790:	f000 fd44 	bl	800721c <__mcmp>
 8006794:	2800      	cmp	r0, #0
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	dc02      	bgt.n	80067a0 <_dtoa_r+0xab8>
 800679a:	d1de      	bne.n	800675a <_dtoa_r+0xa72>
 800679c:	07da      	lsls	r2, r3, #31
 800679e:	d5dc      	bpl.n	800675a <_dtoa_r+0xa72>
 80067a0:	2b39      	cmp	r3, #57	; 0x39
 80067a2:	d1d8      	bne.n	8006756 <_dtoa_r+0xa6e>
 80067a4:	9a02      	ldr	r2, [sp, #8]
 80067a6:	2339      	movs	r3, #57	; 0x39
 80067a8:	7013      	strb	r3, [r2, #0]
 80067aa:	462b      	mov	r3, r5
 80067ac:	461d      	mov	r5, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067b4:	2a39      	cmp	r2, #57	; 0x39
 80067b6:	d050      	beq.n	800685a <_dtoa_r+0xb72>
 80067b8:	3201      	adds	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e745      	b.n	800664a <_dtoa_r+0x962>
 80067be:	2a00      	cmp	r2, #0
 80067c0:	dd03      	ble.n	80067ca <_dtoa_r+0xae2>
 80067c2:	2b39      	cmp	r3, #57	; 0x39
 80067c4:	d0ee      	beq.n	80067a4 <_dtoa_r+0xabc>
 80067c6:	3301      	adds	r3, #1
 80067c8:	e7c7      	b.n	800675a <_dtoa_r+0xa72>
 80067ca:	9a01      	ldr	r2, [sp, #4]
 80067cc:	9907      	ldr	r1, [sp, #28]
 80067ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067d2:	428a      	cmp	r2, r1
 80067d4:	d02a      	beq.n	800682c <_dtoa_r+0xb44>
 80067d6:	4659      	mov	r1, fp
 80067d8:	2300      	movs	r3, #0
 80067da:	220a      	movs	r2, #10
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 fb01 	bl	8006de4 <__multadd>
 80067e2:	45b8      	cmp	r8, r7
 80067e4:	4683      	mov	fp, r0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f04f 020a 	mov.w	r2, #10
 80067ee:	4641      	mov	r1, r8
 80067f0:	4620      	mov	r0, r4
 80067f2:	d107      	bne.n	8006804 <_dtoa_r+0xb1c>
 80067f4:	f000 faf6 	bl	8006de4 <__multadd>
 80067f8:	4680      	mov	r8, r0
 80067fa:	4607      	mov	r7, r0
 80067fc:	9b01      	ldr	r3, [sp, #4]
 80067fe:	3301      	adds	r3, #1
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	e775      	b.n	80066f0 <_dtoa_r+0xa08>
 8006804:	f000 faee 	bl	8006de4 <__multadd>
 8006808:	4639      	mov	r1, r7
 800680a:	4680      	mov	r8, r0
 800680c:	2300      	movs	r3, #0
 800680e:	220a      	movs	r2, #10
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fae7 	bl	8006de4 <__multadd>
 8006816:	4607      	mov	r7, r0
 8006818:	e7f0      	b.n	80067fc <_dtoa_r+0xb14>
 800681a:	f1b9 0f00 	cmp.w	r9, #0
 800681e:	9a00      	ldr	r2, [sp, #0]
 8006820:	bfcc      	ite	gt
 8006822:	464d      	movgt	r5, r9
 8006824:	2501      	movle	r5, #1
 8006826:	4415      	add	r5, r2
 8006828:	f04f 0800 	mov.w	r8, #0
 800682c:	4659      	mov	r1, fp
 800682e:	2201      	movs	r2, #1
 8006830:	4620      	mov	r0, r4
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	f000 fc86 	bl	8007144 <__lshift>
 8006838:	4631      	mov	r1, r6
 800683a:	4683      	mov	fp, r0
 800683c:	f000 fcee 	bl	800721c <__mcmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	dcb2      	bgt.n	80067aa <_dtoa_r+0xac2>
 8006844:	d102      	bne.n	800684c <_dtoa_r+0xb64>
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	07db      	lsls	r3, r3, #31
 800684a:	d4ae      	bmi.n	80067aa <_dtoa_r+0xac2>
 800684c:	462b      	mov	r3, r5
 800684e:	461d      	mov	r5, r3
 8006850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006854:	2a30      	cmp	r2, #48	; 0x30
 8006856:	d0fa      	beq.n	800684e <_dtoa_r+0xb66>
 8006858:	e6f7      	b.n	800664a <_dtoa_r+0x962>
 800685a:	9a00      	ldr	r2, [sp, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d1a5      	bne.n	80067ac <_dtoa_r+0xac4>
 8006860:	f10a 0a01 	add.w	sl, sl, #1
 8006864:	2331      	movs	r3, #49	; 0x31
 8006866:	e779      	b.n	800675c <_dtoa_r+0xa74>
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <_dtoa_r+0xbd0>)
 800686a:	f7ff baaf 	b.w	8005dcc <_dtoa_r+0xe4>
 800686e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f aa86 	bne.w	8005d82 <_dtoa_r+0x9a>
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <_dtoa_r+0xbd4>)
 8006878:	f7ff baa8 	b.w	8005dcc <_dtoa_r+0xe4>
 800687c:	f1b9 0f00 	cmp.w	r9, #0
 8006880:	dc03      	bgt.n	800688a <_dtoa_r+0xba2>
 8006882:	9b05      	ldr	r3, [sp, #20]
 8006884:	2b02      	cmp	r3, #2
 8006886:	f73f aec9 	bgt.w	800661c <_dtoa_r+0x934>
 800688a:	9d00      	ldr	r5, [sp, #0]
 800688c:	4631      	mov	r1, r6
 800688e:	4658      	mov	r0, fp
 8006890:	f7ff f99c 	bl	8005bcc <quorem>
 8006894:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006898:	f805 3b01 	strb.w	r3, [r5], #1
 800689c:	9a00      	ldr	r2, [sp, #0]
 800689e:	1aaa      	subs	r2, r5, r2
 80068a0:	4591      	cmp	r9, r2
 80068a2:	ddba      	ble.n	800681a <_dtoa_r+0xb32>
 80068a4:	4659      	mov	r1, fp
 80068a6:	2300      	movs	r3, #0
 80068a8:	220a      	movs	r2, #10
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fa9a 	bl	8006de4 <__multadd>
 80068b0:	4683      	mov	fp, r0
 80068b2:	e7eb      	b.n	800688c <_dtoa_r+0xba4>
 80068b4:	08008057 	.word	0x08008057
 80068b8:	08007fb0 	.word	0x08007fb0
 80068bc:	08007fd4 	.word	0x08007fd4

080068c0 <__sflush_r>:
 80068c0:	898a      	ldrh	r2, [r1, #12]
 80068c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	4605      	mov	r5, r0
 80068c8:	0710      	lsls	r0, r2, #28
 80068ca:	460c      	mov	r4, r1
 80068cc:	d458      	bmi.n	8006980 <__sflush_r+0xc0>
 80068ce:	684b      	ldr	r3, [r1, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc05      	bgt.n	80068e0 <__sflush_r+0x20>
 80068d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dc02      	bgt.n	80068e0 <__sflush_r+0x20>
 80068da:	2000      	movs	r0, #0
 80068dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	d0f9      	beq.n	80068da <__sflush_r+0x1a>
 80068e6:	2300      	movs	r3, #0
 80068e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068ec:	682f      	ldr	r7, [r5, #0]
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	d032      	beq.n	8006958 <__sflush_r+0x98>
 80068f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	075a      	lsls	r2, r3, #29
 80068f8:	d505      	bpl.n	8006906 <__sflush_r+0x46>
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	1ac0      	subs	r0, r0, r3
 80068fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006900:	b10b      	cbz	r3, 8006906 <__sflush_r+0x46>
 8006902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006904:	1ac0      	subs	r0, r0, r3
 8006906:	2300      	movs	r3, #0
 8006908:	4602      	mov	r2, r0
 800690a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800690c:	6a21      	ldr	r1, [r4, #32]
 800690e:	4628      	mov	r0, r5
 8006910:	47b0      	blx	r6
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	d106      	bne.n	8006926 <__sflush_r+0x66>
 8006918:	6829      	ldr	r1, [r5, #0]
 800691a:	291d      	cmp	r1, #29
 800691c:	d82c      	bhi.n	8006978 <__sflush_r+0xb8>
 800691e:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <__sflush_r+0x108>)
 8006920:	40ca      	lsrs	r2, r1
 8006922:	07d6      	lsls	r6, r2, #31
 8006924:	d528      	bpl.n	8006978 <__sflush_r+0xb8>
 8006926:	2200      	movs	r2, #0
 8006928:	6062      	str	r2, [r4, #4]
 800692a:	04d9      	lsls	r1, r3, #19
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	6022      	str	r2, [r4, #0]
 8006930:	d504      	bpl.n	800693c <__sflush_r+0x7c>
 8006932:	1c42      	adds	r2, r0, #1
 8006934:	d101      	bne.n	800693a <__sflush_r+0x7a>
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	b903      	cbnz	r3, 800693c <__sflush_r+0x7c>
 800693a:	6560      	str	r0, [r4, #84]	; 0x54
 800693c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800693e:	602f      	str	r7, [r5, #0]
 8006940:	2900      	cmp	r1, #0
 8006942:	d0ca      	beq.n	80068da <__sflush_r+0x1a>
 8006944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006948:	4299      	cmp	r1, r3
 800694a:	d002      	beq.n	8006952 <__sflush_r+0x92>
 800694c:	4628      	mov	r0, r5
 800694e:	f7fe faab 	bl	8004ea8 <_free_r>
 8006952:	2000      	movs	r0, #0
 8006954:	6360      	str	r0, [r4, #52]	; 0x34
 8006956:	e7c1      	b.n	80068dc <__sflush_r+0x1c>
 8006958:	6a21      	ldr	r1, [r4, #32]
 800695a:	2301      	movs	r3, #1
 800695c:	4628      	mov	r0, r5
 800695e:	47b0      	blx	r6
 8006960:	1c41      	adds	r1, r0, #1
 8006962:	d1c7      	bne.n	80068f4 <__sflush_r+0x34>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0c4      	beq.n	80068f4 <__sflush_r+0x34>
 800696a:	2b1d      	cmp	r3, #29
 800696c:	d001      	beq.n	8006972 <__sflush_r+0xb2>
 800696e:	2b16      	cmp	r3, #22
 8006970:	d101      	bne.n	8006976 <__sflush_r+0xb6>
 8006972:	602f      	str	r7, [r5, #0]
 8006974:	e7b1      	b.n	80068da <__sflush_r+0x1a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	e7ad      	b.n	80068dc <__sflush_r+0x1c>
 8006980:	690f      	ldr	r7, [r1, #16]
 8006982:	2f00      	cmp	r7, #0
 8006984:	d0a9      	beq.n	80068da <__sflush_r+0x1a>
 8006986:	0793      	lsls	r3, r2, #30
 8006988:	680e      	ldr	r6, [r1, #0]
 800698a:	bf08      	it	eq
 800698c:	694b      	ldreq	r3, [r1, #20]
 800698e:	600f      	str	r7, [r1, #0]
 8006990:	bf18      	it	ne
 8006992:	2300      	movne	r3, #0
 8006994:	eba6 0807 	sub.w	r8, r6, r7
 8006998:	608b      	str	r3, [r1, #8]
 800699a:	f1b8 0f00 	cmp.w	r8, #0
 800699e:	dd9c      	ble.n	80068da <__sflush_r+0x1a>
 80069a0:	6a21      	ldr	r1, [r4, #32]
 80069a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069a4:	4643      	mov	r3, r8
 80069a6:	463a      	mov	r2, r7
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b0      	blx	r6
 80069ac:	2800      	cmp	r0, #0
 80069ae:	dc06      	bgt.n	80069be <__sflush_r+0xfe>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069bc:	e78e      	b.n	80068dc <__sflush_r+0x1c>
 80069be:	4407      	add	r7, r0
 80069c0:	eba8 0800 	sub.w	r8, r8, r0
 80069c4:	e7e9      	b.n	800699a <__sflush_r+0xda>
 80069c6:	bf00      	nop
 80069c8:	20400001 	.word	0x20400001

080069cc <_fflush_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b913      	cbnz	r3, 80069dc <_fflush_r+0x10>
 80069d6:	2500      	movs	r5, #0
 80069d8:	4628      	mov	r0, r5
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	b118      	cbz	r0, 80069e6 <_fflush_r+0x1a>
 80069de:	6983      	ldr	r3, [r0, #24]
 80069e0:	b90b      	cbnz	r3, 80069e6 <_fflush_r+0x1a>
 80069e2:	f000 f887 	bl	8006af4 <__sinit>
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <_fflush_r+0x6c>)
 80069e8:	429c      	cmp	r4, r3
 80069ea:	d11b      	bne.n	8006a24 <_fflush_r+0x58>
 80069ec:	686c      	ldr	r4, [r5, #4]
 80069ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ef      	beq.n	80069d6 <_fflush_r+0xa>
 80069f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069f8:	07d0      	lsls	r0, r2, #31
 80069fa:	d404      	bmi.n	8006a06 <_fflush_r+0x3a>
 80069fc:	0599      	lsls	r1, r3, #22
 80069fe:	d402      	bmi.n	8006a06 <_fflush_r+0x3a>
 8006a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a02:	f000 f91a 	bl	8006c3a <__retarget_lock_acquire_recursive>
 8006a06:	4628      	mov	r0, r5
 8006a08:	4621      	mov	r1, r4
 8006a0a:	f7ff ff59 	bl	80068c0 <__sflush_r>
 8006a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a10:	07da      	lsls	r2, r3, #31
 8006a12:	4605      	mov	r5, r0
 8006a14:	d4e0      	bmi.n	80069d8 <_fflush_r+0xc>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	059b      	lsls	r3, r3, #22
 8006a1a:	d4dd      	bmi.n	80069d8 <_fflush_r+0xc>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f000 f90d 	bl	8006c3c <__retarget_lock_release_recursive>
 8006a22:	e7d9      	b.n	80069d8 <_fflush_r+0xc>
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <_fflush_r+0x70>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <_fflush_r+0x62>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7df      	b.n	80069ee <_fflush_r+0x22>
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <_fflush_r+0x74>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7da      	b.n	80069ee <_fflush_r+0x22>
 8006a38:	08008088 	.word	0x08008088
 8006a3c:	080080a8 	.word	0x080080a8
 8006a40:	08008068 	.word	0x08008068

08006a44 <std>:
 8006a44:	2300      	movs	r3, #0
 8006a46:	b510      	push	{r4, lr}
 8006a48:	4604      	mov	r4, r0
 8006a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a52:	6083      	str	r3, [r0, #8]
 8006a54:	8181      	strh	r1, [r0, #12]
 8006a56:	6643      	str	r3, [r0, #100]	; 0x64
 8006a58:	81c2      	strh	r2, [r0, #14]
 8006a5a:	6183      	str	r3, [r0, #24]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	2208      	movs	r2, #8
 8006a60:	305c      	adds	r0, #92	; 0x5c
 8006a62:	f7fe fa19 	bl	8004e98 <memset>
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <std+0x38>)
 8006a68:	6263      	str	r3, [r4, #36]	; 0x24
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <std+0x3c>)
 8006a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <std+0x40>)
 8006a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <std+0x44>)
 8006a74:	6224      	str	r4, [r4, #32]
 8006a76:	6323      	str	r3, [r4, #48]	; 0x30
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	080079f1 	.word	0x080079f1
 8006a80:	08007a13 	.word	0x08007a13
 8006a84:	08007a4b 	.word	0x08007a4b
 8006a88:	08007a6f 	.word	0x08007a6f

08006a8c <_cleanup_r>:
 8006a8c:	4901      	ldr	r1, [pc, #4]	; (8006a94 <_cleanup_r+0x8>)
 8006a8e:	f000 b8af 	b.w	8006bf0 <_fwalk_reent>
 8006a92:	bf00      	nop
 8006a94:	080069cd 	.word	0x080069cd

08006a98 <__sfmoreglue>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	1e4a      	subs	r2, r1, #1
 8006a9c:	2568      	movs	r5, #104	; 0x68
 8006a9e:	4355      	muls	r5, r2
 8006aa0:	460e      	mov	r6, r1
 8006aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aa6:	f7fe fa4f 	bl	8004f48 <_malloc_r>
 8006aaa:	4604      	mov	r4, r0
 8006aac:	b140      	cbz	r0, 8006ac0 <__sfmoreglue+0x28>
 8006aae:	2100      	movs	r1, #0
 8006ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ab4:	300c      	adds	r0, #12
 8006ab6:	60a0      	str	r0, [r4, #8]
 8006ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006abc:	f7fe f9ec 	bl	8004e98 <memset>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}

08006ac4 <__sfp_lock_acquire>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__sfp_lock_acquire+0x8>)
 8006ac6:	f000 b8b8 	b.w	8006c3a <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	200005b8 	.word	0x200005b8

08006ad0 <__sfp_lock_release>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__sfp_lock_release+0x8>)
 8006ad2:	f000 b8b3 	b.w	8006c3c <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	200005b8 	.word	0x200005b8

08006adc <__sinit_lock_acquire>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__sinit_lock_acquire+0x8>)
 8006ade:	f000 b8ac 	b.w	8006c3a <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	200005b3 	.word	0x200005b3

08006ae8 <__sinit_lock_release>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__sinit_lock_release+0x8>)
 8006aea:	f000 b8a7 	b.w	8006c3c <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	200005b3 	.word	0x200005b3

08006af4 <__sinit>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	4604      	mov	r4, r0
 8006af8:	f7ff fff0 	bl	8006adc <__sinit_lock_acquire>
 8006afc:	69a3      	ldr	r3, [r4, #24]
 8006afe:	b11b      	cbz	r3, 8006b08 <__sinit+0x14>
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	f7ff bff0 	b.w	8006ae8 <__sinit_lock_release>
 8006b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <__sinit+0x68>)
 8006b10:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <__sinit+0x6c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b16:	42a3      	cmp	r3, r4
 8006b18:	bf04      	itt	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	61a3      	streq	r3, [r4, #24]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 f820 	bl	8006b64 <__sfp>
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f81c 	bl	8006b64 <__sfp>
 8006b2c:	60a0      	str	r0, [r4, #8]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f818 	bl	8006b64 <__sfp>
 8006b34:	2200      	movs	r2, #0
 8006b36:	60e0      	str	r0, [r4, #12]
 8006b38:	2104      	movs	r1, #4
 8006b3a:	6860      	ldr	r0, [r4, #4]
 8006b3c:	f7ff ff82 	bl	8006a44 <std>
 8006b40:	68a0      	ldr	r0, [r4, #8]
 8006b42:	2201      	movs	r2, #1
 8006b44:	2109      	movs	r1, #9
 8006b46:	f7ff ff7d 	bl	8006a44 <std>
 8006b4a:	68e0      	ldr	r0, [r4, #12]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	2112      	movs	r1, #18
 8006b50:	f7ff ff78 	bl	8006a44 <std>
 8006b54:	2301      	movs	r3, #1
 8006b56:	61a3      	str	r3, [r4, #24]
 8006b58:	e7d2      	b.n	8006b00 <__sinit+0xc>
 8006b5a:	bf00      	nop
 8006b5c:	08007f9c 	.word	0x08007f9c
 8006b60:	08006a8d 	.word	0x08006a8d

08006b64 <__sfp>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	4607      	mov	r7, r0
 8006b68:	f7ff ffac 	bl	8006ac4 <__sfp_lock_acquire>
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <__sfp+0x84>)
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	69b3      	ldr	r3, [r6, #24]
 8006b72:	b913      	cbnz	r3, 8006b7a <__sfp+0x16>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff ffbd 	bl	8006af4 <__sinit>
 8006b7a:	3648      	adds	r6, #72	; 0x48
 8006b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	d503      	bpl.n	8006b8c <__sfp+0x28>
 8006b84:	6833      	ldr	r3, [r6, #0]
 8006b86:	b30b      	cbz	r3, 8006bcc <__sfp+0x68>
 8006b88:	6836      	ldr	r6, [r6, #0]
 8006b8a:	e7f7      	b.n	8006b7c <__sfp+0x18>
 8006b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b90:	b9d5      	cbnz	r5, 8006bc8 <__sfp+0x64>
 8006b92:	4b16      	ldr	r3, [pc, #88]	; (8006bec <__sfp+0x88>)
 8006b94:	60e3      	str	r3, [r4, #12]
 8006b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b9c:	f000 f84c 	bl	8006c38 <__retarget_lock_init_recursive>
 8006ba0:	f7ff ff96 	bl	8006ad0 <__sfp_lock_release>
 8006ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bac:	6025      	str	r5, [r4, #0]
 8006bae:	61a5      	str	r5, [r4, #24]
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bb8:	f7fe f96e 	bl	8004e98 <memset>
 8006bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	3468      	adds	r4, #104	; 0x68
 8006bca:	e7d9      	b.n	8006b80 <__sfp+0x1c>
 8006bcc:	2104      	movs	r1, #4
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f7ff ff62 	bl	8006a98 <__sfmoreglue>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	6030      	str	r0, [r6, #0]
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d1d5      	bne.n	8006b88 <__sfp+0x24>
 8006bdc:	f7ff ff78 	bl	8006ad0 <__sfp_lock_release>
 8006be0:	230c      	movs	r3, #12
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	e7ee      	b.n	8006bc4 <__sfp+0x60>
 8006be6:	bf00      	nop
 8006be8:	08007f9c 	.word	0x08007f9c
 8006bec:	ffff0001 	.word	0xffff0001

08006bf0 <_fwalk_reent>:
 8006bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	4688      	mov	r8, r1
 8006bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bfc:	2700      	movs	r7, #0
 8006bfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c02:	f1b9 0901 	subs.w	r9, r9, #1
 8006c06:	d505      	bpl.n	8006c14 <_fwalk_reent+0x24>
 8006c08:	6824      	ldr	r4, [r4, #0]
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	d1f7      	bne.n	8006bfe <_fwalk_reent+0xe>
 8006c0e:	4638      	mov	r0, r7
 8006c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c14:	89ab      	ldrh	r3, [r5, #12]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d907      	bls.n	8006c2a <_fwalk_reent+0x3a>
 8006c1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	d003      	beq.n	8006c2a <_fwalk_reent+0x3a>
 8006c22:	4629      	mov	r1, r5
 8006c24:	4630      	mov	r0, r6
 8006c26:	47c0      	blx	r8
 8006c28:	4307      	orrs	r7, r0
 8006c2a:	3568      	adds	r5, #104	; 0x68
 8006c2c:	e7e9      	b.n	8006c02 <_fwalk_reent+0x12>
	...

08006c30 <_localeconv_r>:
 8006c30:	4800      	ldr	r0, [pc, #0]	; (8006c34 <_localeconv_r+0x4>)
 8006c32:	4770      	bx	lr
 8006c34:	20000388 	.word	0x20000388

08006c38 <__retarget_lock_init_recursive>:
 8006c38:	4770      	bx	lr

08006c3a <__retarget_lock_acquire_recursive>:
 8006c3a:	4770      	bx	lr

08006c3c <__retarget_lock_release_recursive>:
 8006c3c:	4770      	bx	lr

08006c3e <__swhatbuf_r>:
 8006c3e:	b570      	push	{r4, r5, r6, lr}
 8006c40:	460e      	mov	r6, r1
 8006c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c46:	2900      	cmp	r1, #0
 8006c48:	b096      	sub	sp, #88	; 0x58
 8006c4a:	4614      	mov	r4, r2
 8006c4c:	461d      	mov	r5, r3
 8006c4e:	da07      	bge.n	8006c60 <__swhatbuf_r+0x22>
 8006c50:	2300      	movs	r3, #0
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	89b3      	ldrh	r3, [r6, #12]
 8006c56:	061a      	lsls	r2, r3, #24
 8006c58:	d410      	bmi.n	8006c7c <__swhatbuf_r+0x3e>
 8006c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5e:	e00e      	b.n	8006c7e <__swhatbuf_r+0x40>
 8006c60:	466a      	mov	r2, sp
 8006c62:	f000 ff5b 	bl	8007b1c <_fstat_r>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	dbf2      	blt.n	8006c50 <__swhatbuf_r+0x12>
 8006c6a:	9a01      	ldr	r2, [sp, #4]
 8006c6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c74:	425a      	negs	r2, r3
 8006c76:	415a      	adcs	r2, r3
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	e7ee      	b.n	8006c5a <__swhatbuf_r+0x1c>
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	2000      	movs	r0, #0
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	b016      	add	sp, #88	; 0x58
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c88 <__smakebuf_r>:
 8006c88:	898b      	ldrh	r3, [r1, #12]
 8006c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c8c:	079d      	lsls	r5, r3, #30
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	d507      	bpl.n	8006ca4 <__smakebuf_r+0x1c>
 8006c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	6163      	str	r3, [r4, #20]
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	ab01      	add	r3, sp, #4
 8006ca6:	466a      	mov	r2, sp
 8006ca8:	f7ff ffc9 	bl	8006c3e <__swhatbuf_r>
 8006cac:	9900      	ldr	r1, [sp, #0]
 8006cae:	4605      	mov	r5, r0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7fe f949 	bl	8004f48 <_malloc_r>
 8006cb6:	b948      	cbnz	r0, 8006ccc <__smakebuf_r+0x44>
 8006cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cbc:	059a      	lsls	r2, r3, #22
 8006cbe:	d4ef      	bmi.n	8006ca0 <__smakebuf_r+0x18>
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	e7e3      	b.n	8006c94 <__smakebuf_r+0xc>
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <__smakebuf_r+0x7c>)
 8006cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	6020      	str	r0, [r4, #0]
 8006cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	9b00      	ldr	r3, [sp, #0]
 8006cdc:	6163      	str	r3, [r4, #20]
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	6120      	str	r0, [r4, #16]
 8006ce2:	b15b      	cbz	r3, 8006cfc <__smakebuf_r+0x74>
 8006ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 ff29 	bl	8007b40 <_isatty_r>
 8006cee:	b128      	cbz	r0, 8006cfc <__smakebuf_r+0x74>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	89a0      	ldrh	r0, [r4, #12]
 8006cfe:	4305      	orrs	r5, r0
 8006d00:	81a5      	strh	r5, [r4, #12]
 8006d02:	e7cd      	b.n	8006ca0 <__smakebuf_r+0x18>
 8006d04:	08006a8d 	.word	0x08006a8d

08006d08 <__malloc_lock>:
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <__malloc_lock+0x8>)
 8006d0a:	f7ff bf96 	b.w	8006c3a <__retarget_lock_acquire_recursive>
 8006d0e:	bf00      	nop
 8006d10:	200005b4 	.word	0x200005b4

08006d14 <__malloc_unlock>:
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <__malloc_unlock+0x8>)
 8006d16:	f7ff bf91 	b.w	8006c3c <__retarget_lock_release_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	200005b4 	.word	0x200005b4

08006d20 <_Balloc>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	b976      	cbnz	r6, 8006d48 <_Balloc+0x28>
 8006d2a:	2010      	movs	r0, #16
 8006d2c:	f7fe f89e 	bl	8004e6c <malloc>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6260      	str	r0, [r4, #36]	; 0x24
 8006d34:	b920      	cbnz	r0, 8006d40 <_Balloc+0x20>
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <_Balloc+0x78>)
 8006d38:	4818      	ldr	r0, [pc, #96]	; (8006d9c <_Balloc+0x7c>)
 8006d3a:	2166      	movs	r1, #102	; 0x66
 8006d3c:	f000 feae 	bl	8007a9c <__assert_func>
 8006d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d44:	6006      	str	r6, [r0, #0]
 8006d46:	60c6      	str	r6, [r0, #12]
 8006d48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d4a:	68f3      	ldr	r3, [r6, #12]
 8006d4c:	b183      	cbz	r3, 8006d70 <_Balloc+0x50>
 8006d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d56:	b9b8      	cbnz	r0, 8006d88 <_Balloc+0x68>
 8006d58:	2101      	movs	r1, #1
 8006d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d5e:	1d72      	adds	r2, r6, #5
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fb5a 	bl	800741c <_calloc_r>
 8006d68:	b160      	cbz	r0, 8006d84 <_Balloc+0x64>
 8006d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d6e:	e00e      	b.n	8006d8e <_Balloc+0x6e>
 8006d70:	2221      	movs	r2, #33	; 0x21
 8006d72:	2104      	movs	r1, #4
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 fb51 	bl	800741c <_calloc_r>
 8006d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d7c:	60f0      	str	r0, [r6, #12]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e4      	bne.n	8006d4e <_Balloc+0x2e>
 8006d84:	2000      	movs	r0, #0
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	6802      	ldr	r2, [r0, #0]
 8006d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d94:	e7f7      	b.n	8006d86 <_Balloc+0x66>
 8006d96:	bf00      	nop
 8006d98:	08007fe1 	.word	0x08007fe1
 8006d9c:	080080c8 	.word	0x080080c8

08006da0 <_Bfree>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006da4:	4605      	mov	r5, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	b976      	cbnz	r6, 8006dc8 <_Bfree+0x28>
 8006daa:	2010      	movs	r0, #16
 8006dac:	f7fe f85e 	bl	8004e6c <malloc>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6268      	str	r0, [r5, #36]	; 0x24
 8006db4:	b920      	cbnz	r0, 8006dc0 <_Bfree+0x20>
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <_Bfree+0x3c>)
 8006db8:	4809      	ldr	r0, [pc, #36]	; (8006de0 <_Bfree+0x40>)
 8006dba:	218a      	movs	r1, #138	; 0x8a
 8006dbc:	f000 fe6e 	bl	8007a9c <__assert_func>
 8006dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc4:	6006      	str	r6, [r0, #0]
 8006dc6:	60c6      	str	r6, [r0, #12]
 8006dc8:	b13c      	cbz	r4, 8006dda <_Bfree+0x3a>
 8006dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dcc:	6862      	ldr	r2, [r4, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dd4:	6021      	str	r1, [r4, #0]
 8006dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	08007fe1 	.word	0x08007fe1
 8006de0:	080080c8 	.word	0x080080c8

08006de4 <__multadd>:
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	690e      	ldr	r6, [r1, #16]
 8006dea:	4607      	mov	r7, r0
 8006dec:	4698      	mov	r8, r3
 8006dee:	460c      	mov	r4, r1
 8006df0:	f101 0014 	add.w	r0, r1, #20
 8006df4:	2300      	movs	r3, #0
 8006df6:	6805      	ldr	r5, [r0, #0]
 8006df8:	b2a9      	uxth	r1, r5
 8006dfa:	fb02 8101 	mla	r1, r2, r1, r8
 8006dfe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e02:	0c2d      	lsrs	r5, r5, #16
 8006e04:	fb02 c505 	mla	r5, r2, r5, ip
 8006e08:	b289      	uxth	r1, r1
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006e10:	429e      	cmp	r6, r3
 8006e12:	f840 1b04 	str.w	r1, [r0], #4
 8006e16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e1a:	dcec      	bgt.n	8006df6 <__multadd+0x12>
 8006e1c:	f1b8 0f00 	cmp.w	r8, #0
 8006e20:	d022      	beq.n	8006e68 <__multadd+0x84>
 8006e22:	68a3      	ldr	r3, [r4, #8]
 8006e24:	42b3      	cmp	r3, r6
 8006e26:	dc19      	bgt.n	8006e5c <__multadd+0x78>
 8006e28:	6861      	ldr	r1, [r4, #4]
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	3101      	adds	r1, #1
 8006e2e:	f7ff ff77 	bl	8006d20 <_Balloc>
 8006e32:	4605      	mov	r5, r0
 8006e34:	b928      	cbnz	r0, 8006e42 <__multadd+0x5e>
 8006e36:	4602      	mov	r2, r0
 8006e38:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <__multadd+0x8c>)
 8006e3a:	480e      	ldr	r0, [pc, #56]	; (8006e74 <__multadd+0x90>)
 8006e3c:	21b5      	movs	r1, #181	; 0xb5
 8006e3e:	f000 fe2d 	bl	8007a9c <__assert_func>
 8006e42:	6922      	ldr	r2, [r4, #16]
 8006e44:	3202      	adds	r2, #2
 8006e46:	f104 010c 	add.w	r1, r4, #12
 8006e4a:	0092      	lsls	r2, r2, #2
 8006e4c:	300c      	adds	r0, #12
 8006e4e:	f7fe f815 	bl	8004e7c <memcpy>
 8006e52:	4621      	mov	r1, r4
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff ffa3 	bl	8006da0 <_Bfree>
 8006e5a:	462c      	mov	r4, r5
 8006e5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006e60:	3601      	adds	r6, #1
 8006e62:	f8c3 8014 	str.w	r8, [r3, #20]
 8006e66:	6126      	str	r6, [r4, #16]
 8006e68:	4620      	mov	r0, r4
 8006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6e:	bf00      	nop
 8006e70:	08008057 	.word	0x08008057
 8006e74:	080080c8 	.word	0x080080c8

08006e78 <__hi0bits>:
 8006e78:	0c03      	lsrs	r3, r0, #16
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	b9d3      	cbnz	r3, 8006eb4 <__hi0bits+0x3c>
 8006e7e:	0400      	lsls	r0, r0, #16
 8006e80:	2310      	movs	r3, #16
 8006e82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e86:	bf04      	itt	eq
 8006e88:	0200      	lsleq	r0, r0, #8
 8006e8a:	3308      	addeq	r3, #8
 8006e8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e90:	bf04      	itt	eq
 8006e92:	0100      	lsleq	r0, r0, #4
 8006e94:	3304      	addeq	r3, #4
 8006e96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e9a:	bf04      	itt	eq
 8006e9c:	0080      	lsleq	r0, r0, #2
 8006e9e:	3302      	addeq	r3, #2
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	db05      	blt.n	8006eb0 <__hi0bits+0x38>
 8006ea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ea8:	f103 0301 	add.w	r3, r3, #1
 8006eac:	bf08      	it	eq
 8006eae:	2320      	moveq	r3, #32
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	4770      	bx	lr
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e7e4      	b.n	8006e82 <__hi0bits+0xa>

08006eb8 <__lo0bits>:
 8006eb8:	6803      	ldr	r3, [r0, #0]
 8006eba:	f013 0207 	ands.w	r2, r3, #7
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	d00b      	beq.n	8006eda <__lo0bits+0x22>
 8006ec2:	07da      	lsls	r2, r3, #31
 8006ec4:	d424      	bmi.n	8006f10 <__lo0bits+0x58>
 8006ec6:	0798      	lsls	r0, r3, #30
 8006ec8:	bf49      	itett	mi
 8006eca:	085b      	lsrmi	r3, r3, #1
 8006ecc:	089b      	lsrpl	r3, r3, #2
 8006ece:	2001      	movmi	r0, #1
 8006ed0:	600b      	strmi	r3, [r1, #0]
 8006ed2:	bf5c      	itt	pl
 8006ed4:	600b      	strpl	r3, [r1, #0]
 8006ed6:	2002      	movpl	r0, #2
 8006ed8:	4770      	bx	lr
 8006eda:	b298      	uxth	r0, r3
 8006edc:	b9b0      	cbnz	r0, 8006f0c <__lo0bits+0x54>
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	2010      	movs	r0, #16
 8006ee2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ee6:	bf04      	itt	eq
 8006ee8:	0a1b      	lsreq	r3, r3, #8
 8006eea:	3008      	addeq	r0, #8
 8006eec:	071a      	lsls	r2, r3, #28
 8006eee:	bf04      	itt	eq
 8006ef0:	091b      	lsreq	r3, r3, #4
 8006ef2:	3004      	addeq	r0, #4
 8006ef4:	079a      	lsls	r2, r3, #30
 8006ef6:	bf04      	itt	eq
 8006ef8:	089b      	lsreq	r3, r3, #2
 8006efa:	3002      	addeq	r0, #2
 8006efc:	07da      	lsls	r2, r3, #31
 8006efe:	d403      	bmi.n	8006f08 <__lo0bits+0x50>
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	f100 0001 	add.w	r0, r0, #1
 8006f06:	d005      	beq.n	8006f14 <__lo0bits+0x5c>
 8006f08:	600b      	str	r3, [r1, #0]
 8006f0a:	4770      	bx	lr
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	e7e8      	b.n	8006ee2 <__lo0bits+0x2a>
 8006f10:	2000      	movs	r0, #0
 8006f12:	4770      	bx	lr
 8006f14:	2020      	movs	r0, #32
 8006f16:	4770      	bx	lr

08006f18 <__i2b>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	f7ff feff 	bl	8006d20 <_Balloc>
 8006f22:	4602      	mov	r2, r0
 8006f24:	b928      	cbnz	r0, 8006f32 <__i2b+0x1a>
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <__i2b+0x24>)
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <__i2b+0x28>)
 8006f2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f2e:	f000 fdb5 	bl	8007a9c <__assert_func>
 8006f32:	2301      	movs	r3, #1
 8006f34:	6144      	str	r4, [r0, #20]
 8006f36:	6103      	str	r3, [r0, #16]
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	bf00      	nop
 8006f3c:	08008057 	.word	0x08008057
 8006f40:	080080c8 	.word	0x080080c8

08006f44 <__multiply>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	4614      	mov	r4, r2
 8006f4a:	690a      	ldr	r2, [r1, #16]
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	bfb8      	it	lt
 8006f52:	460b      	movlt	r3, r1
 8006f54:	460d      	mov	r5, r1
 8006f56:	bfbc      	itt	lt
 8006f58:	4625      	movlt	r5, r4
 8006f5a:	461c      	movlt	r4, r3
 8006f5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006f60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f64:	68ab      	ldr	r3, [r5, #8]
 8006f66:	6869      	ldr	r1, [r5, #4]
 8006f68:	eb0a 0709 	add.w	r7, sl, r9
 8006f6c:	42bb      	cmp	r3, r7
 8006f6e:	b085      	sub	sp, #20
 8006f70:	bfb8      	it	lt
 8006f72:	3101      	addlt	r1, #1
 8006f74:	f7ff fed4 	bl	8006d20 <_Balloc>
 8006f78:	b930      	cbnz	r0, 8006f88 <__multiply+0x44>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	4b42      	ldr	r3, [pc, #264]	; (8007088 <__multiply+0x144>)
 8006f7e:	4843      	ldr	r0, [pc, #268]	; (800708c <__multiply+0x148>)
 8006f80:	f240 115d 	movw	r1, #349	; 0x15d
 8006f84:	f000 fd8a 	bl	8007a9c <__assert_func>
 8006f88:	f100 0614 	add.w	r6, r0, #20
 8006f8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006f90:	4633      	mov	r3, r6
 8006f92:	2200      	movs	r2, #0
 8006f94:	4543      	cmp	r3, r8
 8006f96:	d31e      	bcc.n	8006fd6 <__multiply+0x92>
 8006f98:	f105 0c14 	add.w	ip, r5, #20
 8006f9c:	f104 0314 	add.w	r3, r4, #20
 8006fa0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006fa4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006fa8:	9202      	str	r2, [sp, #8]
 8006faa:	ebac 0205 	sub.w	r2, ip, r5
 8006fae:	3a15      	subs	r2, #21
 8006fb0:	f022 0203 	bic.w	r2, r2, #3
 8006fb4:	3204      	adds	r2, #4
 8006fb6:	f105 0115 	add.w	r1, r5, #21
 8006fba:	458c      	cmp	ip, r1
 8006fbc:	bf38      	it	cc
 8006fbe:	2204      	movcc	r2, #4
 8006fc0:	9201      	str	r2, [sp, #4]
 8006fc2:	9a02      	ldr	r2, [sp, #8]
 8006fc4:	9303      	str	r3, [sp, #12]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d808      	bhi.n	8006fdc <__multiply+0x98>
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	dc55      	bgt.n	800707a <__multiply+0x136>
 8006fce:	6107      	str	r7, [r0, #16]
 8006fd0:	b005      	add	sp, #20
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	f843 2b04 	str.w	r2, [r3], #4
 8006fda:	e7db      	b.n	8006f94 <__multiply+0x50>
 8006fdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fe0:	f1ba 0f00 	cmp.w	sl, #0
 8006fe4:	d020      	beq.n	8007028 <__multiply+0xe4>
 8006fe6:	f105 0e14 	add.w	lr, r5, #20
 8006fea:	46b1      	mov	r9, r6
 8006fec:	2200      	movs	r2, #0
 8006fee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ff2:	f8d9 b000 	ldr.w	fp, [r9]
 8006ff6:	b2a1      	uxth	r1, r4
 8006ff8:	fa1f fb8b 	uxth.w	fp, fp
 8006ffc:	fb0a b101 	mla	r1, sl, r1, fp
 8007000:	4411      	add	r1, r2
 8007002:	f8d9 2000 	ldr.w	r2, [r9]
 8007006:	0c24      	lsrs	r4, r4, #16
 8007008:	0c12      	lsrs	r2, r2, #16
 800700a:	fb0a 2404 	mla	r4, sl, r4, r2
 800700e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007012:	b289      	uxth	r1, r1
 8007014:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007018:	45f4      	cmp	ip, lr
 800701a:	f849 1b04 	str.w	r1, [r9], #4
 800701e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007022:	d8e4      	bhi.n	8006fee <__multiply+0xaa>
 8007024:	9901      	ldr	r1, [sp, #4]
 8007026:	5072      	str	r2, [r6, r1]
 8007028:	9a03      	ldr	r2, [sp, #12]
 800702a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800702e:	3304      	adds	r3, #4
 8007030:	f1b9 0f00 	cmp.w	r9, #0
 8007034:	d01f      	beq.n	8007076 <__multiply+0x132>
 8007036:	6834      	ldr	r4, [r6, #0]
 8007038:	f105 0114 	add.w	r1, r5, #20
 800703c:	46b6      	mov	lr, r6
 800703e:	f04f 0a00 	mov.w	sl, #0
 8007042:	880a      	ldrh	r2, [r1, #0]
 8007044:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007048:	fb09 b202 	mla	r2, r9, r2, fp
 800704c:	4492      	add	sl, r2
 800704e:	b2a4      	uxth	r4, r4
 8007050:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007054:	f84e 4b04 	str.w	r4, [lr], #4
 8007058:	f851 4b04 	ldr.w	r4, [r1], #4
 800705c:	f8be 2000 	ldrh.w	r2, [lr]
 8007060:	0c24      	lsrs	r4, r4, #16
 8007062:	fb09 2404 	mla	r4, r9, r4, r2
 8007066:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800706a:	458c      	cmp	ip, r1
 800706c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007070:	d8e7      	bhi.n	8007042 <__multiply+0xfe>
 8007072:	9a01      	ldr	r2, [sp, #4]
 8007074:	50b4      	str	r4, [r6, r2]
 8007076:	3604      	adds	r6, #4
 8007078:	e7a3      	b.n	8006fc2 <__multiply+0x7e>
 800707a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1a5      	bne.n	8006fce <__multiply+0x8a>
 8007082:	3f01      	subs	r7, #1
 8007084:	e7a1      	b.n	8006fca <__multiply+0x86>
 8007086:	bf00      	nop
 8007088:	08008057 	.word	0x08008057
 800708c:	080080c8 	.word	0x080080c8

08007090 <__pow5mult>:
 8007090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007094:	4615      	mov	r5, r2
 8007096:	f012 0203 	ands.w	r2, r2, #3
 800709a:	4606      	mov	r6, r0
 800709c:	460f      	mov	r7, r1
 800709e:	d007      	beq.n	80070b0 <__pow5mult+0x20>
 80070a0:	4c25      	ldr	r4, [pc, #148]	; (8007138 <__pow5mult+0xa8>)
 80070a2:	3a01      	subs	r2, #1
 80070a4:	2300      	movs	r3, #0
 80070a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070aa:	f7ff fe9b 	bl	8006de4 <__multadd>
 80070ae:	4607      	mov	r7, r0
 80070b0:	10ad      	asrs	r5, r5, #2
 80070b2:	d03d      	beq.n	8007130 <__pow5mult+0xa0>
 80070b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070b6:	b97c      	cbnz	r4, 80070d8 <__pow5mult+0x48>
 80070b8:	2010      	movs	r0, #16
 80070ba:	f7fd fed7 	bl	8004e6c <malloc>
 80070be:	4602      	mov	r2, r0
 80070c0:	6270      	str	r0, [r6, #36]	; 0x24
 80070c2:	b928      	cbnz	r0, 80070d0 <__pow5mult+0x40>
 80070c4:	4b1d      	ldr	r3, [pc, #116]	; (800713c <__pow5mult+0xac>)
 80070c6:	481e      	ldr	r0, [pc, #120]	; (8007140 <__pow5mult+0xb0>)
 80070c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070cc:	f000 fce6 	bl	8007a9c <__assert_func>
 80070d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070d4:	6004      	str	r4, [r0, #0]
 80070d6:	60c4      	str	r4, [r0, #12]
 80070d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070e0:	b94c      	cbnz	r4, 80070f6 <__pow5mult+0x66>
 80070e2:	f240 2171 	movw	r1, #625	; 0x271
 80070e6:	4630      	mov	r0, r6
 80070e8:	f7ff ff16 	bl	8006f18 <__i2b>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80070f2:	4604      	mov	r4, r0
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	f04f 0900 	mov.w	r9, #0
 80070fa:	07eb      	lsls	r3, r5, #31
 80070fc:	d50a      	bpl.n	8007114 <__pow5mult+0x84>
 80070fe:	4639      	mov	r1, r7
 8007100:	4622      	mov	r2, r4
 8007102:	4630      	mov	r0, r6
 8007104:	f7ff ff1e 	bl	8006f44 <__multiply>
 8007108:	4639      	mov	r1, r7
 800710a:	4680      	mov	r8, r0
 800710c:	4630      	mov	r0, r6
 800710e:	f7ff fe47 	bl	8006da0 <_Bfree>
 8007112:	4647      	mov	r7, r8
 8007114:	106d      	asrs	r5, r5, #1
 8007116:	d00b      	beq.n	8007130 <__pow5mult+0xa0>
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	b938      	cbnz	r0, 800712c <__pow5mult+0x9c>
 800711c:	4622      	mov	r2, r4
 800711e:	4621      	mov	r1, r4
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ff0f 	bl	8006f44 <__multiply>
 8007126:	6020      	str	r0, [r4, #0]
 8007128:	f8c0 9000 	str.w	r9, [r0]
 800712c:	4604      	mov	r4, r0
 800712e:	e7e4      	b.n	80070fa <__pow5mult+0x6a>
 8007130:	4638      	mov	r0, r7
 8007132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007136:	bf00      	nop
 8007138:	08008218 	.word	0x08008218
 800713c:	08007fe1 	.word	0x08007fe1
 8007140:	080080c8 	.word	0x080080c8

08007144 <__lshift>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	460c      	mov	r4, r1
 800714a:	6849      	ldr	r1, [r1, #4]
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	4607      	mov	r7, r0
 8007156:	4691      	mov	r9, r2
 8007158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800715c:	f108 0601 	add.w	r6, r8, #1
 8007160:	42b3      	cmp	r3, r6
 8007162:	db0b      	blt.n	800717c <__lshift+0x38>
 8007164:	4638      	mov	r0, r7
 8007166:	f7ff fddb 	bl	8006d20 <_Balloc>
 800716a:	4605      	mov	r5, r0
 800716c:	b948      	cbnz	r0, 8007182 <__lshift+0x3e>
 800716e:	4602      	mov	r2, r0
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <__lshift+0xd0>)
 8007172:	4829      	ldr	r0, [pc, #164]	; (8007218 <__lshift+0xd4>)
 8007174:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007178:	f000 fc90 	bl	8007a9c <__assert_func>
 800717c:	3101      	adds	r1, #1
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	e7ee      	b.n	8007160 <__lshift+0x1c>
 8007182:	2300      	movs	r3, #0
 8007184:	f100 0114 	add.w	r1, r0, #20
 8007188:	f100 0210 	add.w	r2, r0, #16
 800718c:	4618      	mov	r0, r3
 800718e:	4553      	cmp	r3, sl
 8007190:	db33      	blt.n	80071fa <__lshift+0xb6>
 8007192:	6920      	ldr	r0, [r4, #16]
 8007194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007198:	f104 0314 	add.w	r3, r4, #20
 800719c:	f019 091f 	ands.w	r9, r9, #31
 80071a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071a8:	d02b      	beq.n	8007202 <__lshift+0xbe>
 80071aa:	f1c9 0e20 	rsb	lr, r9, #32
 80071ae:	468a      	mov	sl, r1
 80071b0:	2200      	movs	r2, #0
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	fa00 f009 	lsl.w	r0, r0, r9
 80071b8:	4302      	orrs	r2, r0
 80071ba:	f84a 2b04 	str.w	r2, [sl], #4
 80071be:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c2:	459c      	cmp	ip, r3
 80071c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071c8:	d8f3      	bhi.n	80071b2 <__lshift+0x6e>
 80071ca:	ebac 0304 	sub.w	r3, ip, r4
 80071ce:	3b15      	subs	r3, #21
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	3304      	adds	r3, #4
 80071d6:	f104 0015 	add.w	r0, r4, #21
 80071da:	4584      	cmp	ip, r0
 80071dc:	bf38      	it	cc
 80071de:	2304      	movcc	r3, #4
 80071e0:	50ca      	str	r2, [r1, r3]
 80071e2:	b10a      	cbz	r2, 80071e8 <__lshift+0xa4>
 80071e4:	f108 0602 	add.w	r6, r8, #2
 80071e8:	3e01      	subs	r6, #1
 80071ea:	4638      	mov	r0, r7
 80071ec:	612e      	str	r6, [r5, #16]
 80071ee:	4621      	mov	r1, r4
 80071f0:	f7ff fdd6 	bl	8006da0 <_Bfree>
 80071f4:	4628      	mov	r0, r5
 80071f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80071fe:	3301      	adds	r3, #1
 8007200:	e7c5      	b.n	800718e <__lshift+0x4a>
 8007202:	3904      	subs	r1, #4
 8007204:	f853 2b04 	ldr.w	r2, [r3], #4
 8007208:	f841 2f04 	str.w	r2, [r1, #4]!
 800720c:	459c      	cmp	ip, r3
 800720e:	d8f9      	bhi.n	8007204 <__lshift+0xc0>
 8007210:	e7ea      	b.n	80071e8 <__lshift+0xa4>
 8007212:	bf00      	nop
 8007214:	08008057 	.word	0x08008057
 8007218:	080080c8 	.word	0x080080c8

0800721c <__mcmp>:
 800721c:	b530      	push	{r4, r5, lr}
 800721e:	6902      	ldr	r2, [r0, #16]
 8007220:	690c      	ldr	r4, [r1, #16]
 8007222:	1b12      	subs	r2, r2, r4
 8007224:	d10e      	bne.n	8007244 <__mcmp+0x28>
 8007226:	f100 0314 	add.w	r3, r0, #20
 800722a:	3114      	adds	r1, #20
 800722c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800723c:	42a5      	cmp	r5, r4
 800723e:	d003      	beq.n	8007248 <__mcmp+0x2c>
 8007240:	d305      	bcc.n	800724e <__mcmp+0x32>
 8007242:	2201      	movs	r2, #1
 8007244:	4610      	mov	r0, r2
 8007246:	bd30      	pop	{r4, r5, pc}
 8007248:	4283      	cmp	r3, r0
 800724a:	d3f3      	bcc.n	8007234 <__mcmp+0x18>
 800724c:	e7fa      	b.n	8007244 <__mcmp+0x28>
 800724e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007252:	e7f7      	b.n	8007244 <__mcmp+0x28>

08007254 <__mdiff>:
 8007254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	460c      	mov	r4, r1
 800725a:	4606      	mov	r6, r0
 800725c:	4611      	mov	r1, r2
 800725e:	4620      	mov	r0, r4
 8007260:	4617      	mov	r7, r2
 8007262:	f7ff ffdb 	bl	800721c <__mcmp>
 8007266:	1e05      	subs	r5, r0, #0
 8007268:	d110      	bne.n	800728c <__mdiff+0x38>
 800726a:	4629      	mov	r1, r5
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff fd57 	bl	8006d20 <_Balloc>
 8007272:	b930      	cbnz	r0, 8007282 <__mdiff+0x2e>
 8007274:	4b39      	ldr	r3, [pc, #228]	; (800735c <__mdiff+0x108>)
 8007276:	4602      	mov	r2, r0
 8007278:	f240 2132 	movw	r1, #562	; 0x232
 800727c:	4838      	ldr	r0, [pc, #224]	; (8007360 <__mdiff+0x10c>)
 800727e:	f000 fc0d 	bl	8007a9c <__assert_func>
 8007282:	2301      	movs	r3, #1
 8007284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728c:	bfa4      	itt	ge
 800728e:	463b      	movge	r3, r7
 8007290:	4627      	movge	r7, r4
 8007292:	4630      	mov	r0, r6
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	bfa6      	itte	ge
 8007298:	461c      	movge	r4, r3
 800729a:	2500      	movge	r5, #0
 800729c:	2501      	movlt	r5, #1
 800729e:	f7ff fd3f 	bl	8006d20 <_Balloc>
 80072a2:	b920      	cbnz	r0, 80072ae <__mdiff+0x5a>
 80072a4:	4b2d      	ldr	r3, [pc, #180]	; (800735c <__mdiff+0x108>)
 80072a6:	4602      	mov	r2, r0
 80072a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072ac:	e7e6      	b.n	800727c <__mdiff+0x28>
 80072ae:	693e      	ldr	r6, [r7, #16]
 80072b0:	60c5      	str	r5, [r0, #12]
 80072b2:	6925      	ldr	r5, [r4, #16]
 80072b4:	f107 0114 	add.w	r1, r7, #20
 80072b8:	f104 0914 	add.w	r9, r4, #20
 80072bc:	f100 0e14 	add.w	lr, r0, #20
 80072c0:	f107 0210 	add.w	r2, r7, #16
 80072c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80072c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80072cc:	46f2      	mov	sl, lr
 80072ce:	2700      	movs	r7, #0
 80072d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80072d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072d8:	fa1f f883 	uxth.w	r8, r3
 80072dc:	fa17 f78b 	uxtah	r7, r7, fp
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	eba7 0808 	sub.w	r8, r7, r8
 80072e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072ee:	fa1f f888 	uxth.w	r8, r8
 80072f2:	141f      	asrs	r7, r3, #16
 80072f4:	454d      	cmp	r5, r9
 80072f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072fa:	f84a 3b04 	str.w	r3, [sl], #4
 80072fe:	d8e7      	bhi.n	80072d0 <__mdiff+0x7c>
 8007300:	1b2b      	subs	r3, r5, r4
 8007302:	3b15      	subs	r3, #21
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	3304      	adds	r3, #4
 800730a:	3415      	adds	r4, #21
 800730c:	42a5      	cmp	r5, r4
 800730e:	bf38      	it	cc
 8007310:	2304      	movcc	r3, #4
 8007312:	4419      	add	r1, r3
 8007314:	4473      	add	r3, lr
 8007316:	469e      	mov	lr, r3
 8007318:	460d      	mov	r5, r1
 800731a:	4565      	cmp	r5, ip
 800731c:	d30e      	bcc.n	800733c <__mdiff+0xe8>
 800731e:	f10c 0203 	add.w	r2, ip, #3
 8007322:	1a52      	subs	r2, r2, r1
 8007324:	f022 0203 	bic.w	r2, r2, #3
 8007328:	3903      	subs	r1, #3
 800732a:	458c      	cmp	ip, r1
 800732c:	bf38      	it	cc
 800732e:	2200      	movcc	r2, #0
 8007330:	441a      	add	r2, r3
 8007332:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007336:	b17b      	cbz	r3, 8007358 <__mdiff+0x104>
 8007338:	6106      	str	r6, [r0, #16]
 800733a:	e7a5      	b.n	8007288 <__mdiff+0x34>
 800733c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007340:	fa17 f488 	uxtah	r4, r7, r8
 8007344:	1422      	asrs	r2, r4, #16
 8007346:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800734a:	b2a4      	uxth	r4, r4
 800734c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007350:	f84e 4b04 	str.w	r4, [lr], #4
 8007354:	1417      	asrs	r7, r2, #16
 8007356:	e7e0      	b.n	800731a <__mdiff+0xc6>
 8007358:	3e01      	subs	r6, #1
 800735a:	e7ea      	b.n	8007332 <__mdiff+0xde>
 800735c:	08008057 	.word	0x08008057
 8007360:	080080c8 	.word	0x080080c8

08007364 <__d2b>:
 8007364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007368:	4689      	mov	r9, r1
 800736a:	2101      	movs	r1, #1
 800736c:	ec57 6b10 	vmov	r6, r7, d0
 8007370:	4690      	mov	r8, r2
 8007372:	f7ff fcd5 	bl	8006d20 <_Balloc>
 8007376:	4604      	mov	r4, r0
 8007378:	b930      	cbnz	r0, 8007388 <__d2b+0x24>
 800737a:	4602      	mov	r2, r0
 800737c:	4b25      	ldr	r3, [pc, #148]	; (8007414 <__d2b+0xb0>)
 800737e:	4826      	ldr	r0, [pc, #152]	; (8007418 <__d2b+0xb4>)
 8007380:	f240 310a 	movw	r1, #778	; 0x30a
 8007384:	f000 fb8a 	bl	8007a9c <__assert_func>
 8007388:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800738c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007390:	bb35      	cbnz	r5, 80073e0 <__d2b+0x7c>
 8007392:	2e00      	cmp	r6, #0
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	d028      	beq.n	80073ea <__d2b+0x86>
 8007398:	4668      	mov	r0, sp
 800739a:	9600      	str	r6, [sp, #0]
 800739c:	f7ff fd8c 	bl	8006eb8 <__lo0bits>
 80073a0:	9900      	ldr	r1, [sp, #0]
 80073a2:	b300      	cbz	r0, 80073e6 <__d2b+0x82>
 80073a4:	9a01      	ldr	r2, [sp, #4]
 80073a6:	f1c0 0320 	rsb	r3, r0, #32
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	430b      	orrs	r3, r1
 80073b0:	40c2      	lsrs	r2, r0
 80073b2:	6163      	str	r3, [r4, #20]
 80073b4:	9201      	str	r2, [sp, #4]
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	61a3      	str	r3, [r4, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bf14      	ite	ne
 80073be:	2202      	movne	r2, #2
 80073c0:	2201      	moveq	r2, #1
 80073c2:	6122      	str	r2, [r4, #16]
 80073c4:	b1d5      	cbz	r5, 80073fc <__d2b+0x98>
 80073c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073ca:	4405      	add	r5, r0
 80073cc:	f8c9 5000 	str.w	r5, [r9]
 80073d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073d4:	f8c8 0000 	str.w	r0, [r8]
 80073d8:	4620      	mov	r0, r4
 80073da:	b003      	add	sp, #12
 80073dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073e4:	e7d5      	b.n	8007392 <__d2b+0x2e>
 80073e6:	6161      	str	r1, [r4, #20]
 80073e8:	e7e5      	b.n	80073b6 <__d2b+0x52>
 80073ea:	a801      	add	r0, sp, #4
 80073ec:	f7ff fd64 	bl	8006eb8 <__lo0bits>
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	6163      	str	r3, [r4, #20]
 80073f4:	2201      	movs	r2, #1
 80073f6:	6122      	str	r2, [r4, #16]
 80073f8:	3020      	adds	r0, #32
 80073fa:	e7e3      	b.n	80073c4 <__d2b+0x60>
 80073fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007400:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007404:	f8c9 0000 	str.w	r0, [r9]
 8007408:	6918      	ldr	r0, [r3, #16]
 800740a:	f7ff fd35 	bl	8006e78 <__hi0bits>
 800740e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007412:	e7df      	b.n	80073d4 <__d2b+0x70>
 8007414:	08008057 	.word	0x08008057
 8007418:	080080c8 	.word	0x080080c8

0800741c <_calloc_r>:
 800741c:	b513      	push	{r0, r1, r4, lr}
 800741e:	434a      	muls	r2, r1
 8007420:	4611      	mov	r1, r2
 8007422:	9201      	str	r2, [sp, #4]
 8007424:	f7fd fd90 	bl	8004f48 <_malloc_r>
 8007428:	4604      	mov	r4, r0
 800742a:	b118      	cbz	r0, 8007434 <_calloc_r+0x18>
 800742c:	9a01      	ldr	r2, [sp, #4]
 800742e:	2100      	movs	r1, #0
 8007430:	f7fd fd32 	bl	8004e98 <memset>
 8007434:	4620      	mov	r0, r4
 8007436:	b002      	add	sp, #8
 8007438:	bd10      	pop	{r4, pc}

0800743a <_realloc_r>:
 800743a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743c:	4607      	mov	r7, r0
 800743e:	4614      	mov	r4, r2
 8007440:	460e      	mov	r6, r1
 8007442:	b921      	cbnz	r1, 800744e <_realloc_r+0x14>
 8007444:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007448:	4611      	mov	r1, r2
 800744a:	f7fd bd7d 	b.w	8004f48 <_malloc_r>
 800744e:	b922      	cbnz	r2, 800745a <_realloc_r+0x20>
 8007450:	f7fd fd2a 	bl	8004ea8 <_free_r>
 8007454:	4625      	mov	r5, r4
 8007456:	4628      	mov	r0, r5
 8007458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745a:	f000 fbbf 	bl	8007bdc <_malloc_usable_size_r>
 800745e:	42a0      	cmp	r0, r4
 8007460:	d20f      	bcs.n	8007482 <_realloc_r+0x48>
 8007462:	4621      	mov	r1, r4
 8007464:	4638      	mov	r0, r7
 8007466:	f7fd fd6f 	bl	8004f48 <_malloc_r>
 800746a:	4605      	mov	r5, r0
 800746c:	2800      	cmp	r0, #0
 800746e:	d0f2      	beq.n	8007456 <_realloc_r+0x1c>
 8007470:	4631      	mov	r1, r6
 8007472:	4622      	mov	r2, r4
 8007474:	f7fd fd02 	bl	8004e7c <memcpy>
 8007478:	4631      	mov	r1, r6
 800747a:	4638      	mov	r0, r7
 800747c:	f7fd fd14 	bl	8004ea8 <_free_r>
 8007480:	e7e9      	b.n	8007456 <_realloc_r+0x1c>
 8007482:	4635      	mov	r5, r6
 8007484:	e7e7      	b.n	8007456 <_realloc_r+0x1c>

08007486 <__ssputs_r>:
 8007486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748a:	688e      	ldr	r6, [r1, #8]
 800748c:	429e      	cmp	r6, r3
 800748e:	4682      	mov	sl, r0
 8007490:	460c      	mov	r4, r1
 8007492:	4690      	mov	r8, r2
 8007494:	461f      	mov	r7, r3
 8007496:	d838      	bhi.n	800750a <__ssputs_r+0x84>
 8007498:	898a      	ldrh	r2, [r1, #12]
 800749a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800749e:	d032      	beq.n	8007506 <__ssputs_r+0x80>
 80074a0:	6825      	ldr	r5, [r4, #0]
 80074a2:	6909      	ldr	r1, [r1, #16]
 80074a4:	eba5 0901 	sub.w	r9, r5, r1
 80074a8:	6965      	ldr	r5, [r4, #20]
 80074aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074b2:	3301      	adds	r3, #1
 80074b4:	444b      	add	r3, r9
 80074b6:	106d      	asrs	r5, r5, #1
 80074b8:	429d      	cmp	r5, r3
 80074ba:	bf38      	it	cc
 80074bc:	461d      	movcc	r5, r3
 80074be:	0553      	lsls	r3, r2, #21
 80074c0:	d531      	bpl.n	8007526 <__ssputs_r+0xa0>
 80074c2:	4629      	mov	r1, r5
 80074c4:	f7fd fd40 	bl	8004f48 <_malloc_r>
 80074c8:	4606      	mov	r6, r0
 80074ca:	b950      	cbnz	r0, 80074e2 <__ssputs_r+0x5c>
 80074cc:	230c      	movs	r3, #12
 80074ce:	f8ca 3000 	str.w	r3, [sl]
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d8:	81a3      	strh	r3, [r4, #12]
 80074da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e2:	6921      	ldr	r1, [r4, #16]
 80074e4:	464a      	mov	r2, r9
 80074e6:	f7fd fcc9 	bl	8004e7c <memcpy>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	6126      	str	r6, [r4, #16]
 80074f8:	6165      	str	r5, [r4, #20]
 80074fa:	444e      	add	r6, r9
 80074fc:	eba5 0509 	sub.w	r5, r5, r9
 8007500:	6026      	str	r6, [r4, #0]
 8007502:	60a5      	str	r5, [r4, #8]
 8007504:	463e      	mov	r6, r7
 8007506:	42be      	cmp	r6, r7
 8007508:	d900      	bls.n	800750c <__ssputs_r+0x86>
 800750a:	463e      	mov	r6, r7
 800750c:	4632      	mov	r2, r6
 800750e:	6820      	ldr	r0, [r4, #0]
 8007510:	4641      	mov	r1, r8
 8007512:	f000 fb49 	bl	8007ba8 <memmove>
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	1b9b      	subs	r3, r3, r6
 800751c:	4432      	add	r2, r6
 800751e:	60a3      	str	r3, [r4, #8]
 8007520:	6022      	str	r2, [r4, #0]
 8007522:	2000      	movs	r0, #0
 8007524:	e7db      	b.n	80074de <__ssputs_r+0x58>
 8007526:	462a      	mov	r2, r5
 8007528:	f7ff ff87 	bl	800743a <_realloc_r>
 800752c:	4606      	mov	r6, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	d1e1      	bne.n	80074f6 <__ssputs_r+0x70>
 8007532:	6921      	ldr	r1, [r4, #16]
 8007534:	4650      	mov	r0, sl
 8007536:	f7fd fcb7 	bl	8004ea8 <_free_r>
 800753a:	e7c7      	b.n	80074cc <__ssputs_r+0x46>

0800753c <_svfiprintf_r>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	4698      	mov	r8, r3
 8007542:	898b      	ldrh	r3, [r1, #12]
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	b09d      	sub	sp, #116	; 0x74
 8007548:	4607      	mov	r7, r0
 800754a:	460d      	mov	r5, r1
 800754c:	4614      	mov	r4, r2
 800754e:	d50e      	bpl.n	800756e <_svfiprintf_r+0x32>
 8007550:	690b      	ldr	r3, [r1, #16]
 8007552:	b963      	cbnz	r3, 800756e <_svfiprintf_r+0x32>
 8007554:	2140      	movs	r1, #64	; 0x40
 8007556:	f7fd fcf7 	bl	8004f48 <_malloc_r>
 800755a:	6028      	str	r0, [r5, #0]
 800755c:	6128      	str	r0, [r5, #16]
 800755e:	b920      	cbnz	r0, 800756a <_svfiprintf_r+0x2e>
 8007560:	230c      	movs	r3, #12
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007568:	e0d1      	b.n	800770e <_svfiprintf_r+0x1d2>
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	616b      	str	r3, [r5, #20]
 800756e:	2300      	movs	r3, #0
 8007570:	9309      	str	r3, [sp, #36]	; 0x24
 8007572:	2320      	movs	r3, #32
 8007574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007578:	f8cd 800c 	str.w	r8, [sp, #12]
 800757c:	2330      	movs	r3, #48	; 0x30
 800757e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007728 <_svfiprintf_r+0x1ec>
 8007582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007586:	f04f 0901 	mov.w	r9, #1
 800758a:	4623      	mov	r3, r4
 800758c:	469a      	mov	sl, r3
 800758e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007592:	b10a      	cbz	r2, 8007598 <_svfiprintf_r+0x5c>
 8007594:	2a25      	cmp	r2, #37	; 0x25
 8007596:	d1f9      	bne.n	800758c <_svfiprintf_r+0x50>
 8007598:	ebba 0b04 	subs.w	fp, sl, r4
 800759c:	d00b      	beq.n	80075b6 <_svfiprintf_r+0x7a>
 800759e:	465b      	mov	r3, fp
 80075a0:	4622      	mov	r2, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	4638      	mov	r0, r7
 80075a6:	f7ff ff6e 	bl	8007486 <__ssputs_r>
 80075aa:	3001      	adds	r0, #1
 80075ac:	f000 80aa 	beq.w	8007704 <_svfiprintf_r+0x1c8>
 80075b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075b2:	445a      	add	r2, fp
 80075b4:	9209      	str	r2, [sp, #36]	; 0x24
 80075b6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 80a2 	beq.w	8007704 <_svfiprintf_r+0x1c8>
 80075c0:	2300      	movs	r3, #0
 80075c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ca:	f10a 0a01 	add.w	sl, sl, #1
 80075ce:	9304      	str	r3, [sp, #16]
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075d6:	931a      	str	r3, [sp, #104]	; 0x68
 80075d8:	4654      	mov	r4, sl
 80075da:	2205      	movs	r2, #5
 80075dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e0:	4851      	ldr	r0, [pc, #324]	; (8007728 <_svfiprintf_r+0x1ec>)
 80075e2:	f7f8 fe05 	bl	80001f0 <memchr>
 80075e6:	9a04      	ldr	r2, [sp, #16]
 80075e8:	b9d8      	cbnz	r0, 8007622 <_svfiprintf_r+0xe6>
 80075ea:	06d0      	lsls	r0, r2, #27
 80075ec:	bf44      	itt	mi
 80075ee:	2320      	movmi	r3, #32
 80075f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f4:	0711      	lsls	r1, r2, #28
 80075f6:	bf44      	itt	mi
 80075f8:	232b      	movmi	r3, #43	; 0x2b
 80075fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007602:	2b2a      	cmp	r3, #42	; 0x2a
 8007604:	d015      	beq.n	8007632 <_svfiprintf_r+0xf6>
 8007606:	9a07      	ldr	r2, [sp, #28]
 8007608:	4654      	mov	r4, sl
 800760a:	2000      	movs	r0, #0
 800760c:	f04f 0c0a 	mov.w	ip, #10
 8007610:	4621      	mov	r1, r4
 8007612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007616:	3b30      	subs	r3, #48	; 0x30
 8007618:	2b09      	cmp	r3, #9
 800761a:	d94e      	bls.n	80076ba <_svfiprintf_r+0x17e>
 800761c:	b1b0      	cbz	r0, 800764c <_svfiprintf_r+0x110>
 800761e:	9207      	str	r2, [sp, #28]
 8007620:	e014      	b.n	800764c <_svfiprintf_r+0x110>
 8007622:	eba0 0308 	sub.w	r3, r0, r8
 8007626:	fa09 f303 	lsl.w	r3, r9, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	9304      	str	r3, [sp, #16]
 800762e:	46a2      	mov	sl, r4
 8007630:	e7d2      	b.n	80075d8 <_svfiprintf_r+0x9c>
 8007632:	9b03      	ldr	r3, [sp, #12]
 8007634:	1d19      	adds	r1, r3, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	9103      	str	r1, [sp, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfbb      	ittet	lt
 800763e:	425b      	neglt	r3, r3
 8007640:	f042 0202 	orrlt.w	r2, r2, #2
 8007644:	9307      	strge	r3, [sp, #28]
 8007646:	9307      	strlt	r3, [sp, #28]
 8007648:	bfb8      	it	lt
 800764a:	9204      	strlt	r2, [sp, #16]
 800764c:	7823      	ldrb	r3, [r4, #0]
 800764e:	2b2e      	cmp	r3, #46	; 0x2e
 8007650:	d10c      	bne.n	800766c <_svfiprintf_r+0x130>
 8007652:	7863      	ldrb	r3, [r4, #1]
 8007654:	2b2a      	cmp	r3, #42	; 0x2a
 8007656:	d135      	bne.n	80076c4 <_svfiprintf_r+0x188>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	1d1a      	adds	r2, r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	9203      	str	r2, [sp, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfb8      	it	lt
 8007664:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007668:	3402      	adds	r4, #2
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007738 <_svfiprintf_r+0x1fc>
 8007670:	7821      	ldrb	r1, [r4, #0]
 8007672:	2203      	movs	r2, #3
 8007674:	4650      	mov	r0, sl
 8007676:	f7f8 fdbb 	bl	80001f0 <memchr>
 800767a:	b140      	cbz	r0, 800768e <_svfiprintf_r+0x152>
 800767c:	2340      	movs	r3, #64	; 0x40
 800767e:	eba0 000a 	sub.w	r0, r0, sl
 8007682:	fa03 f000 	lsl.w	r0, r3, r0
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	4303      	orrs	r3, r0
 800768a:	3401      	adds	r4, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007692:	4826      	ldr	r0, [pc, #152]	; (800772c <_svfiprintf_r+0x1f0>)
 8007694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007698:	2206      	movs	r2, #6
 800769a:	f7f8 fda9 	bl	80001f0 <memchr>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d038      	beq.n	8007714 <_svfiprintf_r+0x1d8>
 80076a2:	4b23      	ldr	r3, [pc, #140]	; (8007730 <_svfiprintf_r+0x1f4>)
 80076a4:	bb1b      	cbnz	r3, 80076ee <_svfiprintf_r+0x1b2>
 80076a6:	9b03      	ldr	r3, [sp, #12]
 80076a8:	3307      	adds	r3, #7
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	3308      	adds	r3, #8
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b4:	4433      	add	r3, r6
 80076b6:	9309      	str	r3, [sp, #36]	; 0x24
 80076b8:	e767      	b.n	800758a <_svfiprintf_r+0x4e>
 80076ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80076be:	460c      	mov	r4, r1
 80076c0:	2001      	movs	r0, #1
 80076c2:	e7a5      	b.n	8007610 <_svfiprintf_r+0xd4>
 80076c4:	2300      	movs	r3, #0
 80076c6:	3401      	adds	r4, #1
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	4619      	mov	r1, r3
 80076cc:	f04f 0c0a 	mov.w	ip, #10
 80076d0:	4620      	mov	r0, r4
 80076d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d6:	3a30      	subs	r2, #48	; 0x30
 80076d8:	2a09      	cmp	r2, #9
 80076da:	d903      	bls.n	80076e4 <_svfiprintf_r+0x1a8>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0c5      	beq.n	800766c <_svfiprintf_r+0x130>
 80076e0:	9105      	str	r1, [sp, #20]
 80076e2:	e7c3      	b.n	800766c <_svfiprintf_r+0x130>
 80076e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e8:	4604      	mov	r4, r0
 80076ea:	2301      	movs	r3, #1
 80076ec:	e7f0      	b.n	80076d0 <_svfiprintf_r+0x194>
 80076ee:	ab03      	add	r3, sp, #12
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	462a      	mov	r2, r5
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <_svfiprintf_r+0x1f8>)
 80076f6:	a904      	add	r1, sp, #16
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7fd fd1f 	bl	800513c <_printf_float>
 80076fe:	1c42      	adds	r2, r0, #1
 8007700:	4606      	mov	r6, r0
 8007702:	d1d6      	bne.n	80076b2 <_svfiprintf_r+0x176>
 8007704:	89ab      	ldrh	r3, [r5, #12]
 8007706:	065b      	lsls	r3, r3, #25
 8007708:	f53f af2c 	bmi.w	8007564 <_svfiprintf_r+0x28>
 800770c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800770e:	b01d      	add	sp, #116	; 0x74
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	462a      	mov	r2, r5
 800771a:	4b06      	ldr	r3, [pc, #24]	; (8007734 <_svfiprintf_r+0x1f8>)
 800771c:	a904      	add	r1, sp, #16
 800771e:	4638      	mov	r0, r7
 8007720:	f7fd ffb0 	bl	8005684 <_printf_i>
 8007724:	e7eb      	b.n	80076fe <_svfiprintf_r+0x1c2>
 8007726:	bf00      	nop
 8007728:	08008224 	.word	0x08008224
 800772c:	0800822e 	.word	0x0800822e
 8007730:	0800513d 	.word	0x0800513d
 8007734:	08007487 	.word	0x08007487
 8007738:	0800822a 	.word	0x0800822a

0800773c <__sfputc_r>:
 800773c:	6893      	ldr	r3, [r2, #8]
 800773e:	3b01      	subs	r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	b410      	push	{r4}
 8007744:	6093      	str	r3, [r2, #8]
 8007746:	da08      	bge.n	800775a <__sfputc_r+0x1e>
 8007748:	6994      	ldr	r4, [r2, #24]
 800774a:	42a3      	cmp	r3, r4
 800774c:	db01      	blt.n	8007752 <__sfputc_r+0x16>
 800774e:	290a      	cmp	r1, #10
 8007750:	d103      	bne.n	800775a <__sfputc_r+0x1e>
 8007752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007756:	f7fe b979 	b.w	8005a4c <__swbuf_r>
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	1c58      	adds	r0, r3, #1
 800775e:	6010      	str	r0, [r2, #0]
 8007760:	7019      	strb	r1, [r3, #0]
 8007762:	4608      	mov	r0, r1
 8007764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007768:	4770      	bx	lr

0800776a <__sfputs_r>:
 800776a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776c:	4606      	mov	r6, r0
 800776e:	460f      	mov	r7, r1
 8007770:	4614      	mov	r4, r2
 8007772:	18d5      	adds	r5, r2, r3
 8007774:	42ac      	cmp	r4, r5
 8007776:	d101      	bne.n	800777c <__sfputs_r+0x12>
 8007778:	2000      	movs	r0, #0
 800777a:	e007      	b.n	800778c <__sfputs_r+0x22>
 800777c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007780:	463a      	mov	r2, r7
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff ffda 	bl	800773c <__sfputc_r>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d1f3      	bne.n	8007774 <__sfputs_r+0xa>
 800778c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007790 <_vfiprintf_r>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	460d      	mov	r5, r1
 8007796:	b09d      	sub	sp, #116	; 0x74
 8007798:	4614      	mov	r4, r2
 800779a:	4698      	mov	r8, r3
 800779c:	4606      	mov	r6, r0
 800779e:	b118      	cbz	r0, 80077a8 <_vfiprintf_r+0x18>
 80077a0:	6983      	ldr	r3, [r0, #24]
 80077a2:	b90b      	cbnz	r3, 80077a8 <_vfiprintf_r+0x18>
 80077a4:	f7ff f9a6 	bl	8006af4 <__sinit>
 80077a8:	4b89      	ldr	r3, [pc, #548]	; (80079d0 <_vfiprintf_r+0x240>)
 80077aa:	429d      	cmp	r5, r3
 80077ac:	d11b      	bne.n	80077e6 <_vfiprintf_r+0x56>
 80077ae:	6875      	ldr	r5, [r6, #4]
 80077b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077b2:	07d9      	lsls	r1, r3, #31
 80077b4:	d405      	bmi.n	80077c2 <_vfiprintf_r+0x32>
 80077b6:	89ab      	ldrh	r3, [r5, #12]
 80077b8:	059a      	lsls	r2, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <_vfiprintf_r+0x32>
 80077bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077be:	f7ff fa3c 	bl	8006c3a <__retarget_lock_acquire_recursive>
 80077c2:	89ab      	ldrh	r3, [r5, #12]
 80077c4:	071b      	lsls	r3, r3, #28
 80077c6:	d501      	bpl.n	80077cc <_vfiprintf_r+0x3c>
 80077c8:	692b      	ldr	r3, [r5, #16]
 80077ca:	b9eb      	cbnz	r3, 8007808 <_vfiprintf_r+0x78>
 80077cc:	4629      	mov	r1, r5
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7fe f98e 	bl	8005af0 <__swsetup_r>
 80077d4:	b1c0      	cbz	r0, 8007808 <_vfiprintf_r+0x78>
 80077d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077d8:	07dc      	lsls	r4, r3, #31
 80077da:	d50e      	bpl.n	80077fa <_vfiprintf_r+0x6a>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e0:	b01d      	add	sp, #116	; 0x74
 80077e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e6:	4b7b      	ldr	r3, [pc, #492]	; (80079d4 <_vfiprintf_r+0x244>)
 80077e8:	429d      	cmp	r5, r3
 80077ea:	d101      	bne.n	80077f0 <_vfiprintf_r+0x60>
 80077ec:	68b5      	ldr	r5, [r6, #8]
 80077ee:	e7df      	b.n	80077b0 <_vfiprintf_r+0x20>
 80077f0:	4b79      	ldr	r3, [pc, #484]	; (80079d8 <_vfiprintf_r+0x248>)
 80077f2:	429d      	cmp	r5, r3
 80077f4:	bf08      	it	eq
 80077f6:	68f5      	ldreq	r5, [r6, #12]
 80077f8:	e7da      	b.n	80077b0 <_vfiprintf_r+0x20>
 80077fa:	89ab      	ldrh	r3, [r5, #12]
 80077fc:	0598      	lsls	r0, r3, #22
 80077fe:	d4ed      	bmi.n	80077dc <_vfiprintf_r+0x4c>
 8007800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007802:	f7ff fa1b 	bl	8006c3c <__retarget_lock_release_recursive>
 8007806:	e7e9      	b.n	80077dc <_vfiprintf_r+0x4c>
 8007808:	2300      	movs	r3, #0
 800780a:	9309      	str	r3, [sp, #36]	; 0x24
 800780c:	2320      	movs	r3, #32
 800780e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007812:	f8cd 800c 	str.w	r8, [sp, #12]
 8007816:	2330      	movs	r3, #48	; 0x30
 8007818:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079dc <_vfiprintf_r+0x24c>
 800781c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007820:	f04f 0901 	mov.w	r9, #1
 8007824:	4623      	mov	r3, r4
 8007826:	469a      	mov	sl, r3
 8007828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800782c:	b10a      	cbz	r2, 8007832 <_vfiprintf_r+0xa2>
 800782e:	2a25      	cmp	r2, #37	; 0x25
 8007830:	d1f9      	bne.n	8007826 <_vfiprintf_r+0x96>
 8007832:	ebba 0b04 	subs.w	fp, sl, r4
 8007836:	d00b      	beq.n	8007850 <_vfiprintf_r+0xc0>
 8007838:	465b      	mov	r3, fp
 800783a:	4622      	mov	r2, r4
 800783c:	4629      	mov	r1, r5
 800783e:	4630      	mov	r0, r6
 8007840:	f7ff ff93 	bl	800776a <__sfputs_r>
 8007844:	3001      	adds	r0, #1
 8007846:	f000 80aa 	beq.w	800799e <_vfiprintf_r+0x20e>
 800784a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800784c:	445a      	add	r2, fp
 800784e:	9209      	str	r2, [sp, #36]	; 0x24
 8007850:	f89a 3000 	ldrb.w	r3, [sl]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80a2 	beq.w	800799e <_vfiprintf_r+0x20e>
 800785a:	2300      	movs	r3, #0
 800785c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007864:	f10a 0a01 	add.w	sl, sl, #1
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	9307      	str	r3, [sp, #28]
 800786c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007870:	931a      	str	r3, [sp, #104]	; 0x68
 8007872:	4654      	mov	r4, sl
 8007874:	2205      	movs	r2, #5
 8007876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800787a:	4858      	ldr	r0, [pc, #352]	; (80079dc <_vfiprintf_r+0x24c>)
 800787c:	f7f8 fcb8 	bl	80001f0 <memchr>
 8007880:	9a04      	ldr	r2, [sp, #16]
 8007882:	b9d8      	cbnz	r0, 80078bc <_vfiprintf_r+0x12c>
 8007884:	06d1      	lsls	r1, r2, #27
 8007886:	bf44      	itt	mi
 8007888:	2320      	movmi	r3, #32
 800788a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800788e:	0713      	lsls	r3, r2, #28
 8007890:	bf44      	itt	mi
 8007892:	232b      	movmi	r3, #43	; 0x2b
 8007894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007898:	f89a 3000 	ldrb.w	r3, [sl]
 800789c:	2b2a      	cmp	r3, #42	; 0x2a
 800789e:	d015      	beq.n	80078cc <_vfiprintf_r+0x13c>
 80078a0:	9a07      	ldr	r2, [sp, #28]
 80078a2:	4654      	mov	r4, sl
 80078a4:	2000      	movs	r0, #0
 80078a6:	f04f 0c0a 	mov.w	ip, #10
 80078aa:	4621      	mov	r1, r4
 80078ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078b0:	3b30      	subs	r3, #48	; 0x30
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	d94e      	bls.n	8007954 <_vfiprintf_r+0x1c4>
 80078b6:	b1b0      	cbz	r0, 80078e6 <_vfiprintf_r+0x156>
 80078b8:	9207      	str	r2, [sp, #28]
 80078ba:	e014      	b.n	80078e6 <_vfiprintf_r+0x156>
 80078bc:	eba0 0308 	sub.w	r3, r0, r8
 80078c0:	fa09 f303 	lsl.w	r3, r9, r3
 80078c4:	4313      	orrs	r3, r2
 80078c6:	9304      	str	r3, [sp, #16]
 80078c8:	46a2      	mov	sl, r4
 80078ca:	e7d2      	b.n	8007872 <_vfiprintf_r+0xe2>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	1d19      	adds	r1, r3, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	9103      	str	r1, [sp, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bfbb      	ittet	lt
 80078d8:	425b      	neglt	r3, r3
 80078da:	f042 0202 	orrlt.w	r2, r2, #2
 80078de:	9307      	strge	r3, [sp, #28]
 80078e0:	9307      	strlt	r3, [sp, #28]
 80078e2:	bfb8      	it	lt
 80078e4:	9204      	strlt	r2, [sp, #16]
 80078e6:	7823      	ldrb	r3, [r4, #0]
 80078e8:	2b2e      	cmp	r3, #46	; 0x2e
 80078ea:	d10c      	bne.n	8007906 <_vfiprintf_r+0x176>
 80078ec:	7863      	ldrb	r3, [r4, #1]
 80078ee:	2b2a      	cmp	r3, #42	; 0x2a
 80078f0:	d135      	bne.n	800795e <_vfiprintf_r+0x1ce>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	1d1a      	adds	r2, r3, #4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	9203      	str	r2, [sp, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bfb8      	it	lt
 80078fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007902:	3402      	adds	r4, #2
 8007904:	9305      	str	r3, [sp, #20]
 8007906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079ec <_vfiprintf_r+0x25c>
 800790a:	7821      	ldrb	r1, [r4, #0]
 800790c:	2203      	movs	r2, #3
 800790e:	4650      	mov	r0, sl
 8007910:	f7f8 fc6e 	bl	80001f0 <memchr>
 8007914:	b140      	cbz	r0, 8007928 <_vfiprintf_r+0x198>
 8007916:	2340      	movs	r3, #64	; 0x40
 8007918:	eba0 000a 	sub.w	r0, r0, sl
 800791c:	fa03 f000 	lsl.w	r0, r3, r0
 8007920:	9b04      	ldr	r3, [sp, #16]
 8007922:	4303      	orrs	r3, r0
 8007924:	3401      	adds	r4, #1
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800792c:	482c      	ldr	r0, [pc, #176]	; (80079e0 <_vfiprintf_r+0x250>)
 800792e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007932:	2206      	movs	r2, #6
 8007934:	f7f8 fc5c 	bl	80001f0 <memchr>
 8007938:	2800      	cmp	r0, #0
 800793a:	d03f      	beq.n	80079bc <_vfiprintf_r+0x22c>
 800793c:	4b29      	ldr	r3, [pc, #164]	; (80079e4 <_vfiprintf_r+0x254>)
 800793e:	bb1b      	cbnz	r3, 8007988 <_vfiprintf_r+0x1f8>
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	3307      	adds	r3, #7
 8007944:	f023 0307 	bic.w	r3, r3, #7
 8007948:	3308      	adds	r3, #8
 800794a:	9303      	str	r3, [sp, #12]
 800794c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794e:	443b      	add	r3, r7
 8007950:	9309      	str	r3, [sp, #36]	; 0x24
 8007952:	e767      	b.n	8007824 <_vfiprintf_r+0x94>
 8007954:	fb0c 3202 	mla	r2, ip, r2, r3
 8007958:	460c      	mov	r4, r1
 800795a:	2001      	movs	r0, #1
 800795c:	e7a5      	b.n	80078aa <_vfiprintf_r+0x11a>
 800795e:	2300      	movs	r3, #0
 8007960:	3401      	adds	r4, #1
 8007962:	9305      	str	r3, [sp, #20]
 8007964:	4619      	mov	r1, r3
 8007966:	f04f 0c0a 	mov.w	ip, #10
 800796a:	4620      	mov	r0, r4
 800796c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007970:	3a30      	subs	r2, #48	; 0x30
 8007972:	2a09      	cmp	r2, #9
 8007974:	d903      	bls.n	800797e <_vfiprintf_r+0x1ee>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0c5      	beq.n	8007906 <_vfiprintf_r+0x176>
 800797a:	9105      	str	r1, [sp, #20]
 800797c:	e7c3      	b.n	8007906 <_vfiprintf_r+0x176>
 800797e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007982:	4604      	mov	r4, r0
 8007984:	2301      	movs	r3, #1
 8007986:	e7f0      	b.n	800796a <_vfiprintf_r+0x1da>
 8007988:	ab03      	add	r3, sp, #12
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	462a      	mov	r2, r5
 800798e:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <_vfiprintf_r+0x258>)
 8007990:	a904      	add	r1, sp, #16
 8007992:	4630      	mov	r0, r6
 8007994:	f7fd fbd2 	bl	800513c <_printf_float>
 8007998:	4607      	mov	r7, r0
 800799a:	1c78      	adds	r0, r7, #1
 800799c:	d1d6      	bne.n	800794c <_vfiprintf_r+0x1bc>
 800799e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079a0:	07d9      	lsls	r1, r3, #31
 80079a2:	d405      	bmi.n	80079b0 <_vfiprintf_r+0x220>
 80079a4:	89ab      	ldrh	r3, [r5, #12]
 80079a6:	059a      	lsls	r2, r3, #22
 80079a8:	d402      	bmi.n	80079b0 <_vfiprintf_r+0x220>
 80079aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ac:	f7ff f946 	bl	8006c3c <__retarget_lock_release_recursive>
 80079b0:	89ab      	ldrh	r3, [r5, #12]
 80079b2:	065b      	lsls	r3, r3, #25
 80079b4:	f53f af12 	bmi.w	80077dc <_vfiprintf_r+0x4c>
 80079b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ba:	e711      	b.n	80077e0 <_vfiprintf_r+0x50>
 80079bc:	ab03      	add	r3, sp, #12
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	462a      	mov	r2, r5
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <_vfiprintf_r+0x258>)
 80079c4:	a904      	add	r1, sp, #16
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7fd fe5c 	bl	8005684 <_printf_i>
 80079cc:	e7e4      	b.n	8007998 <_vfiprintf_r+0x208>
 80079ce:	bf00      	nop
 80079d0:	08008088 	.word	0x08008088
 80079d4:	080080a8 	.word	0x080080a8
 80079d8:	08008068 	.word	0x08008068
 80079dc:	08008224 	.word	0x08008224
 80079e0:	0800822e 	.word	0x0800822e
 80079e4:	0800513d 	.word	0x0800513d
 80079e8:	0800776b 	.word	0x0800776b
 80079ec:	0800822a 	.word	0x0800822a

080079f0 <__sread>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	f000 f8f8 	bl	8007bec <_read_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	bfab      	itete	ge
 8007a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a02:	89a3      	ldrhlt	r3, [r4, #12]
 8007a04:	181b      	addge	r3, r3, r0
 8007a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a0a:	bfac      	ite	ge
 8007a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a0e:	81a3      	strhlt	r3, [r4, #12]
 8007a10:	bd10      	pop	{r4, pc}

08007a12 <__swrite>:
 8007a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a16:	461f      	mov	r7, r3
 8007a18:	898b      	ldrh	r3, [r1, #12]
 8007a1a:	05db      	lsls	r3, r3, #23
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4616      	mov	r6, r2
 8007a22:	d505      	bpl.n	8007a30 <__swrite+0x1e>
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	2302      	movs	r3, #2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f000 f898 	bl	8007b60 <_lseek_r>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	4628      	mov	r0, r5
 8007a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a46:	f000 b817 	b.w	8007a78 <_write_r>

08007a4a <__sseek>:
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a52:	f000 f885 	bl	8007b60 <_lseek_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	bf15      	itete	ne
 8007a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a66:	81a3      	strheq	r3, [r4, #12]
 8007a68:	bf18      	it	ne
 8007a6a:	81a3      	strhne	r3, [r4, #12]
 8007a6c:	bd10      	pop	{r4, pc}

08007a6e <__sclose>:
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 b831 	b.w	8007ad8 <_close_r>
	...

08007a78 <_write_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d07      	ldr	r5, [pc, #28]	; (8007a98 <_write_r+0x20>)
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	602a      	str	r2, [r5, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	f000 f952 	bl	8007d30 <_write>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_write_r+0x1e>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_write_r+0x1e>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	200005bc 	.word	0x200005bc

08007a9c <__assert_func>:
 8007a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a9e:	4614      	mov	r4, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <__assert_func+0x2c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	68d8      	ldr	r0, [r3, #12]
 8007aaa:	b14c      	cbz	r4, 8007ac0 <__assert_func+0x24>
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <__assert_func+0x30>)
 8007aae:	9100      	str	r1, [sp, #0]
 8007ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ab4:	4906      	ldr	r1, [pc, #24]	; (8007ad0 <__assert_func+0x34>)
 8007ab6:	462b      	mov	r3, r5
 8007ab8:	f000 f81e 	bl	8007af8 <fiprintf>
 8007abc:	f000 f8b5 	bl	8007c2a <abort>
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <__assert_func+0x38>)
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	e7f3      	b.n	8007aae <__assert_func+0x12>
 8007ac6:	bf00      	nop
 8007ac8:	20000234 	.word	0x20000234
 8007acc:	08008235 	.word	0x08008235
 8007ad0:	08008242 	.word	0x08008242
 8007ad4:	08008270 	.word	0x08008270

08007ad8 <_close_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d06      	ldr	r5, [pc, #24]	; (8007af4 <_close_r+0x1c>)
 8007adc:	2300      	movs	r3, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	f000 f8ec 	bl	8007cc0 <_close>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_close_r+0x1a>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_close_r+0x1a>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	200005bc 	.word	0x200005bc

08007af8 <fiprintf>:
 8007af8:	b40e      	push	{r1, r2, r3}
 8007afa:	b503      	push	{r0, r1, lr}
 8007afc:	4601      	mov	r1, r0
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	4805      	ldr	r0, [pc, #20]	; (8007b18 <fiprintf+0x20>)
 8007b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b06:	6800      	ldr	r0, [r0, #0]
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	f7ff fe41 	bl	8007790 <_vfiprintf_r>
 8007b0e:	b002      	add	sp, #8
 8007b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b14:	b003      	add	sp, #12
 8007b16:	4770      	bx	lr
 8007b18:	20000234 	.word	0x20000234

08007b1c <_fstat_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	; (8007b3c <_fstat_r+0x20>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	f000 f8d1 	bl	8007cd0 <_fstat>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d102      	bne.n	8007b38 <_fstat_r+0x1c>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b103      	cbz	r3, 8007b38 <_fstat_r+0x1c>
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200005bc 	.word	0x200005bc

08007b40 <_isatty_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	; (8007b5c <_isatty_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f000 f8d0 	bl	8007cf0 <_isatty>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_isatty_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_isatty_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	200005bc 	.word	0x200005bc

08007b60 <_lseek_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	; (8007b80 <_lseek_r+0x20>)
 8007b64:	4604      	mov	r4, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	602a      	str	r2, [r5, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f000 f8ce 	bl	8007d10 <_lseek>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_lseek_r+0x1e>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_lseek_r+0x1e>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	200005bc 	.word	0x200005bc

08007b84 <__ascii_mbtowc>:
 8007b84:	b082      	sub	sp, #8
 8007b86:	b901      	cbnz	r1, 8007b8a <__ascii_mbtowc+0x6>
 8007b88:	a901      	add	r1, sp, #4
 8007b8a:	b142      	cbz	r2, 8007b9e <__ascii_mbtowc+0x1a>
 8007b8c:	b14b      	cbz	r3, 8007ba2 <__ascii_mbtowc+0x1e>
 8007b8e:	7813      	ldrb	r3, [r2, #0]
 8007b90:	600b      	str	r3, [r1, #0]
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	1e10      	subs	r0, r2, #0
 8007b96:	bf18      	it	ne
 8007b98:	2001      	movne	r0, #1
 8007b9a:	b002      	add	sp, #8
 8007b9c:	4770      	bx	lr
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	e7fb      	b.n	8007b9a <__ascii_mbtowc+0x16>
 8007ba2:	f06f 0001 	mvn.w	r0, #1
 8007ba6:	e7f8      	b.n	8007b9a <__ascii_mbtowc+0x16>

08007ba8 <memmove>:
 8007ba8:	4288      	cmp	r0, r1
 8007baa:	b510      	push	{r4, lr}
 8007bac:	eb01 0402 	add.w	r4, r1, r2
 8007bb0:	d902      	bls.n	8007bb8 <memmove+0x10>
 8007bb2:	4284      	cmp	r4, r0
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	d807      	bhi.n	8007bc8 <memmove+0x20>
 8007bb8:	1e43      	subs	r3, r0, #1
 8007bba:	42a1      	cmp	r1, r4
 8007bbc:	d008      	beq.n	8007bd0 <memmove+0x28>
 8007bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bc6:	e7f8      	b.n	8007bba <memmove+0x12>
 8007bc8:	4402      	add	r2, r0
 8007bca:	4601      	mov	r1, r0
 8007bcc:	428a      	cmp	r2, r1
 8007bce:	d100      	bne.n	8007bd2 <memmove+0x2a>
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bda:	e7f7      	b.n	8007bcc <memmove+0x24>

08007bdc <_malloc_usable_size_r>:
 8007bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be0:	1f18      	subs	r0, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfbc      	itt	lt
 8007be6:	580b      	ldrlt	r3, [r1, r0]
 8007be8:	18c0      	addlt	r0, r0, r3
 8007bea:	4770      	bx	lr

08007bec <_read_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	; (8007c0c <_read_r+0x20>)
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	602a      	str	r2, [r5, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f000 f890 	bl	8007d20 <_read>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_read_r+0x1e>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_read_r+0x1e>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	200005bc 	.word	0x200005bc

08007c10 <__ascii_wctomb>:
 8007c10:	b149      	cbz	r1, 8007c26 <__ascii_wctomb+0x16>
 8007c12:	2aff      	cmp	r2, #255	; 0xff
 8007c14:	bf85      	ittet	hi
 8007c16:	238a      	movhi	r3, #138	; 0x8a
 8007c18:	6003      	strhi	r3, [r0, #0]
 8007c1a:	700a      	strbls	r2, [r1, #0]
 8007c1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007c20:	bf98      	it	ls
 8007c22:	2001      	movls	r0, #1
 8007c24:	4770      	bx	lr
 8007c26:	4608      	mov	r0, r1
 8007c28:	4770      	bx	lr

08007c2a <abort>:
 8007c2a:	b508      	push	{r3, lr}
 8007c2c:	2006      	movs	r0, #6
 8007c2e:	f000 f82b 	bl	8007c88 <raise>
 8007c32:	2001      	movs	r0, #1
 8007c34:	f000 f884 	bl	8007d40 <_exit>

08007c38 <_raise_r>:
 8007c38:	291f      	cmp	r1, #31
 8007c3a:	b538      	push	{r3, r4, r5, lr}
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	460d      	mov	r5, r1
 8007c40:	d904      	bls.n	8007c4c <_raise_r+0x14>
 8007c42:	2316      	movs	r3, #22
 8007c44:	6003      	str	r3, [r0, #0]
 8007c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c4e:	b112      	cbz	r2, 8007c56 <_raise_r+0x1e>
 8007c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c54:	b94b      	cbnz	r3, 8007c6a <_raise_r+0x32>
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 f830 	bl	8007cbc <_getpid_r>
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4601      	mov	r1, r0
 8007c60:	4620      	mov	r0, r4
 8007c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c66:	f000 b817 	b.w	8007c98 <_kill_r>
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d00a      	beq.n	8007c84 <_raise_r+0x4c>
 8007c6e:	1c59      	adds	r1, r3, #1
 8007c70:	d103      	bne.n	8007c7a <_raise_r+0x42>
 8007c72:	2316      	movs	r3, #22
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	2001      	movs	r0, #1
 8007c78:	e7e7      	b.n	8007c4a <_raise_r+0x12>
 8007c7a:	2400      	movs	r4, #0
 8007c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c80:	4628      	mov	r0, r5
 8007c82:	4798      	blx	r3
 8007c84:	2000      	movs	r0, #0
 8007c86:	e7e0      	b.n	8007c4a <_raise_r+0x12>

08007c88 <raise>:
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <raise+0xc>)
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	f7ff bfd3 	b.w	8007c38 <_raise_r>
 8007c92:	bf00      	nop
 8007c94:	20000234 	.word	0x20000234

08007c98 <_kill_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d07      	ldr	r5, [pc, #28]	; (8007cb8 <_kill_r+0x20>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	f000 f82b 	bl	8007d00 <_kill>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d102      	bne.n	8007cb4 <_kill_r+0x1c>
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	b103      	cbz	r3, 8007cb4 <_kill_r+0x1c>
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	bd38      	pop	{r3, r4, r5, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200005bc 	.word	0x200005bc

08007cbc <_getpid_r>:
 8007cbc:	f000 b810 	b.w	8007ce0 <_getpid>

08007cc0 <_close>:
 8007cc0:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <_close+0xc>)
 8007cc2:	2258      	movs	r2, #88	; 0x58
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cca:	4770      	bx	lr
 8007ccc:	200005bc 	.word	0x200005bc

08007cd0 <_fstat>:
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <_fstat+0xc>)
 8007cd2:	2258      	movs	r2, #88	; 0x58
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cda:	4770      	bx	lr
 8007cdc:	200005bc 	.word	0x200005bc

08007ce0 <_getpid>:
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <_getpid+0xc>)
 8007ce2:	2258      	movs	r2, #88	; 0x58
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cea:	4770      	bx	lr
 8007cec:	200005bc 	.word	0x200005bc

08007cf0 <_isatty>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <_isatty+0xc>)
 8007cf2:	2258      	movs	r2, #88	; 0x58
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	200005bc 	.word	0x200005bc

08007d00 <_kill>:
 8007d00:	4b02      	ldr	r3, [pc, #8]	; (8007d0c <_kill+0xc>)
 8007d02:	2258      	movs	r2, #88	; 0x58
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d0a:	4770      	bx	lr
 8007d0c:	200005bc 	.word	0x200005bc

08007d10 <_lseek>:
 8007d10:	4b02      	ldr	r3, [pc, #8]	; (8007d1c <_lseek+0xc>)
 8007d12:	2258      	movs	r2, #88	; 0x58
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d1a:	4770      	bx	lr
 8007d1c:	200005bc 	.word	0x200005bc

08007d20 <_read>:
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <_read+0xc>)
 8007d22:	2258      	movs	r2, #88	; 0x58
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d2a:	4770      	bx	lr
 8007d2c:	200005bc 	.word	0x200005bc

08007d30 <_write>:
 8007d30:	4b02      	ldr	r3, [pc, #8]	; (8007d3c <_write+0xc>)
 8007d32:	2258      	movs	r2, #88	; 0x58
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d3a:	4770      	bx	lr
 8007d3c:	200005bc 	.word	0x200005bc

08007d40 <_exit>:
 8007d40:	e7fe      	b.n	8007d40 <_exit>
	...

08007d44 <_init>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr

08007d50 <_fini>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr
